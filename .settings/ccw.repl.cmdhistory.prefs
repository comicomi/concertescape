cmdhistory=["(get-date \\"2012-01-12\\" -)" "(get-date \\"2012-01-31\\" -)" "(get-date \\"2012-01-31\\" +)" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )\\r\\n(defrecord Ticket [price url])\\r\\n(defrecord Performer [name genre image_url])\\r\\n(defrecord Place [name city country location])\\r\\n(defrecord Event [name performer date Place Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])" " (defn send-flight-request [origincode destinationcode departure_date arrival_date]\\r\\n    (\\r\\n      (def requestFlight (generate-string  {\:request{\\r\\n                                                     \:slice [\\r\\n                                                             {\\r\\n                                                              \:origin origincode,\\r\\n                                                              \:destination destinationcode,\\r\\n                                                              \:date departure_date\\r\\n                                                              },\\r\\n                                                             {\\r\\n                                                              \:origin destinationcode,\\r\\n                                                              \:destination origincode,\\r\\n                                                              \:date arrival_date\\r\\n                                                              }\\r\\n                                                             ],\\r\\n                                                     \:passengers {\\r\\n                                                                  \:adultCount 1,\\r\\n                                                                  \:infantInLapCount 0,\\r\\n                                                                  \:infantInSeatCount 0,\\r\\n                                                                  \:childCount 0,\\r\\n                                                                  \:seniorCount 0\\r\\n                                                                  },\\r\\n                                                     \:solutions 1,\\r\\n                                                     \:refundable false\\r\\n                                                     }}))\\r\\n      (def options {\\r\\n                    \:body  requestFlight\\r\\n                    \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                              \\"Content-Type\\" \\"application/json\\"}\\r\\n                    \:content-type \:json\\r\\n                    \:accept \:json\\r\\n                    \:throw-entire-message? true}\\r\\n        )   \\r\\n      (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                 options))\\r\\n      \\r\\n      \\r\\n      (def body (parse-string (\:body response) true))\\r\\n      \\r\\n      \\r\\n      ))" "(send-flight-request \\"BCN\\" \\"BEG\\" \\"2015-04-30\\" \\"2015-05-02\\")" "(defn send-flight-request [origin_code destination_code departure_date arrival_date]\\r\\n    (\\r\\n      (def requestFlight (generate-string  {\:request{\\r\\n                                                     \:slice [\\r\\n                                                             {\\r\\n                                                              \:origin origin_code,\\r\\n                                                              \:destination destination_code,\\r\\n                                                              \:date departure_date\\r\\n                                                              },\\r\\n                                                             {\\r\\n                                                              \:origin destination_code,\\r\\n                                                              \:destination origin_code,\\r\\n                                                              \:date arrival_date\\r\\n                                                              }\\r\\n                                                             ],\\r\\n                                                     \:passengers {\\r\\n                                                                  \:adultCount 1,\\r\\n                                                                  \:infantInLapCount 0,\\r\\n                                                                  \:infantInSeatCount 0,\\r\\n                                                                  \:childCount 0,\\r\\n                                                                  \:seniorCount 0\\r\\n                                                                  },\\r\\n                                                     \:solutions 1,\\r\\n                                                     \:refundable false\\r\\n                                                     }}))\\r\\n      (def options {\\r\\n                    \:body  requestFlight\\r\\n                    \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                              \\"Content-Type\\" \\"application/json\\"}\\r\\n                    \:content-type \:json\\r\\n                    \:accept \:json\\r\\n                    \:throw-entire-message? true}\\r\\n        )   \\r\\n      (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                 options))\\r\\n      \\r\\n      \\r\\n      (def body (parse-string (\:body response) true))\\r\\n      \\r\\n      \\r\\n      ))" "(send-flight-request \\"BCN\\" \\"BEG\\" \\"2015-04-30\\" \\"2015-05-02\\")" " (def requestFlight (generate-string  {\:request{\\r\\n                                                     \:slice [\\r\\n                                                             {\\r\\n                                                              \:origin \\"BCN\\",\\r\\n                                                              \:destination \\"BEG\\",\\r\\n                                                              \:date \\"2015-04-30\\"\\r\\n                                                              },\\r\\n                                                             {\\r\\n                                                              \:origin \\"BEG\\",\\r\\n                                                              \:destination \\"BCN\\",\\r\\n                                                              \:date \\"2015-05-02\\"\\r\\n                                                              }\\r\\n                                                             ],\\r\\n                                                     \:passengers {\\r\\n                                                                  \:adultCount 1,\\r\\n                                                                  \:infantInLapCount 0,\\r\\n                                                                  \:infantInSeatCount 0,\\r\\n                                                                  \:childCount 0,\\r\\n                                                                  \:seniorCount 0\\r\\n                                                                  },\\r\\n                                                     \:solutions 1,\\r\\n                                                     \:refundable false\\r\\n                                                     }}))" " (def options {\\r\\n                    \:body  requestFlight\\r\\n                    \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                              \\"Content-Type\\" \\"application/json\\"}\\r\\n                    \:content-type \:json\\r\\n                    \:accept \:json\\r\\n                    \:throw-entire-message? true}\\r\\n        )" "  (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                 options))" "(def body (parse-string (\:body response) true))" "body" "  (defn send-flight-request [origin_code destination_code departure_date arrival_date]\\r\\n    \\r\\n      (def requestFlight (generate-string  {\:request{\\r\\n                                                     \:slice [\\r\\n                                                             {\\r\\n                                                              \:origin origin_code,\\r\\n                                                              \:destination destination_code,\\r\\n                                                              \:date departure_date\\r\\n                                                              },\\r\\n                                                             {\\r\\n                                                              \:origin destination_code,\\r\\n                                                              \:destination origin_code,\\r\\n                                                              \:date arrival_date\\r\\n                                                              }\\r\\n                                                             ],\\r\\n                                                     \:passengers {\\r\\n                                                                  \:adultCount 1,\\r\\n                                                                  \:infantInLapCount 0,\\r\\n                                                                  \:infantInSeatCount 0,\\r\\n                                                                  \:childCount 0,\\r\\n                                                                  \:seniorCount 0\\r\\n                                                                  },\\r\\n                                                     \:solutions 1,\\r\\n                                                     \:refundable false\\r\\n                                                     }}))\\r\\n      (def options {\\r\\n                    \:body  requestFlight\\r\\n                    \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                              \\"Content-Type\\" \\"application/json\\"}\\r\\n                    \:content-type \:json\\r\\n                    \:accept \:json\\r\\n                    \:throw-entire-message? true}\\r\\n        )   \\r\\n      (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                 options))\\r\\n      \\r\\n      \\r\\n      (def body (parse-string (\:body response) true))\\r\\n      \\r\\n      \\r\\n      )" "(send-flight-request \\"BCN\\" \\"BEG\\" \\"2015-04-30\\" \\"2015-05-02\\")" "body" "(def price {\:price (\:saleTotal (first (\:tripOption (\:trips body))))})" "price" "(def fare (\:segment (first (\:slice (first (\:tripOption (\:trips body)))))))" "fare" "(def fareInformation (for [i (range 0 (count fare))] (first(\:leg (fare i)))))" "fareInformation" "fare" "  (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=carrier(name),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))" " (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=aircraft/carrier(name),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))" "  (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=data/carrier(name),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))" "\\n(def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=data/carrier,trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))" "\\n(def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=carrier,trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))" "(def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/data/carrier(name),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))" "response" " (def body (parse-string (\:body response) true))" "body" "\\n(def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/data/carrier(code,name),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))" "response" "\\r\\n  (def body (parse-string (\:body response) true))" "body" "(def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/city(code,name),trips/data/carrier(code,name),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))\\r\\n  \\r\\n  \\r\\n  (def body (parse-string (\:body response) true))" "(def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/data/airport/city(code,name),trips/data/carrier(code,name),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))\\r\\n  \\r\\n  \\r\\n  (def body (parse-string (\:body response) true))" "(def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/data/airport/city,trips/data/carrier(code,name),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))" "response" "\\r\\n  \\r\\n  \\r\\n  (def body (parse-string (\:body response) true))" "body" " (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/data/city(code,name),trips/data/carrier(code,name),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))\\r\\n  \\r\\n  \\r\\n  (def body (parse-string (\:body response) true))" "body" "(def price {\:price (\:saleTotal (first (\:tripOption (\:trips body))))})" "PRICE" "price" "(\:tripOption (\:trips body))" "(first (\:tripOption (\:trips body)))" "(def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))]\\r\\n    (def connections (\:segment (nth i fares)))\\r\\n    (for [j (range 0 (count connections))]\\r\\n      \\r\\n      )\\r\\n    )" "faRES" "fares" " (for [i (range 0 (count fares))]\\r\\n    (def connections (\:segment (nth i fares))))" "(for [i (range 0 (count fares))]\\r\\n    (def connections (\:segment (nth fares i)))\\r\\n    (for [j (range 0 (count connections))]\\r\\n      \\r\\n      )\\r\\n    )" "(for [i (range 0 (count fares))]\\r\\n    (def connections (\:segment (nt)h fares i)))" "(for [i (range 0 (count fares))]\\r\\n    (def connections (\:segment (nth fares i))))" "connections" " (def price {\:price (\:saleTotal (first (\:tripOption (\:trips body))))})" "price" " (def cities (first (\:city (\:data (\:trips body)))))" "cities" " (def cities (\:city (\:data (\:trips body))))" "cities" "(map \:code cities)" "(keyword (map \:code cities))" "(map keyword (map \:code cities))" "(map \:name cities)" "(def kljucevi (map keyword (map \:code cities)))" "kljucevi" "(def vrednosti (map \:name cities))" "vrednosti" "(def mapa (zipmap kljucevi vrednosti))" "mapa" "(def kljucevi (map \:code cities))" "kljucevi" "(def mapa (zipmap kljucevi vrednosti))" "mapa" "\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))" "citymap" "\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))" "carriermap" "(\:pricing (\:tripOption (\:trips body)))" "(\:pricing (first (\:tripOption (\:trips body))))" "\\r\\n  (def fares (\:fare (first (\:slice (first (\:tripOption (\:trips body)))))))" "fares" "  (def fares (first (\:slice (first (\:tripOption (\:trips body))))))" "fares" "\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))" "fares" "(def carrs (first (\:tripOption (\:trips body))))" "carrs" "\\r\\n  (def carrs (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))" "carrs" "(def a)" "a" " (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))]\\r\\n    (def connections (\:segment (nth fares i)))\\r\\n    (for [j (range 0 (count connections))] \\r\\n      (def carrier (nth carriermap i))\\r\\n      (def car)\\r\\n       (def connection (first (\:leg (nth connections j))))\\r\\n       (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )\\r\\n       (->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n      )\\r\\n    )" " (for [j (range 0 (count connections))] \\r\\n      (def carrier (nth carriermap 0))\\r\\n      (def car)\\r\\n       (def connection (first (\:leg (nth connections j))))\\r\\n       (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )\\r\\n       (->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n      )" "    (for [j (range 0 (count connections))] \\r\\n      \\r\\n      (def car)\\n      )" " (for [j (range 0 (count connections))] \\r\\n      (def carrier (nth carriermap 0))\\r\\n      (def car)\\r\\n       (def connection (first (\:leg (nth connections j))))\\r\\n       (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )\\r\\n     )" " (for [j (range 0 (count connections))] \\r\\n      (def carrier (nth carriermap 0))\\r\\n      (def car)\\r\\n       (def connection (first (\:leg (nth connections j))))\\r\\n    )" " (for [j (range 0 (count connections))] \\r\\n     ( (def carrier (nth carriermap 0))\\r\\n      (def car)\\r\\n       (def connection (first (\:leg (nth connections j)))))\\r\\n    )" "connections" " (for [j (range 0 (count connections))] \\r\\n     ( (def carrier (nth carriermap 0))\\r\\n      (def car)\\r\\n       (def connection (first (\:leg (connections j)))))\\r\\n    )" "carriermap" "fare_carriers" " (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))]\\r\\n    (def connections (\:segment (nth fares i)))\\r\\n    (for [j (range 0 (count connections))] \\r\\n      (def carrier (nth fare_carriers i))\\r\\n      (def car)\\r\\n       (def connection (first (\:leg (connections j))))\\r\\n       (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )\\r\\n       (->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n      )\\r\\n    )" "(def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n    (\\r\\n    (def connections (\:segment (nth fares i)))\\r\\n    (for [j (range 0 (count connections))] \\r\\n      (\\r\\n      (def carrier (nth fare_carriers i))\\r\\n      (def car)\\r\\n       (def connection (first (\:leg (connections j))))\\r\\n       (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )\\r\\n       (->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n      ))\\r\\n    )" " (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n    \\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def car)\\r\\n          (def connection (first (\:leg (connections j))))\\r\\n          (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )\\r\\n          (->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n          ))\\r\\n      \\r\\n    )" "(for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def car)\\r\\n          (def connection (first (\:leg (connections j))))\\r\\n          (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )\\r\\n          (->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" " (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def car)\\r\\n          (def connection (first (\:leg (connections j))))\\r\\n          (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )\\r\\n          (->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n          )\\r\\n        )\\r\\n      )" "(count fares)" "(for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def car)\\r\\n          (def connection (first (\:leg (connections j))))\\r\\n          (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )\\r\\n          (->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" "(for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def car)\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )\\r\\n          (->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" " (def connections (\:segment (nth fares 0)))" "connections" "(def carrier (nth fare_carriers 0))" "carrier" "(def connection (first (\:leg (nth connections 0))))" "connection" " (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )" "\\n(if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )" "carriermap" "(\:carrier connection)" "connection" "carrier" "fare_carriers" "((\:carrier fare_carriers) carriermap)" "(\:carrier fare_carriers)" "(\:carrier carrier)" "((\:carrier carrier) carriermap)" "carriermap" "(\\"OS\\" carriermap)" "(carriermap \\"OS\\")" " (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (car (carriermap (\:carrier carrier)))  )" "\\n(if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )" "car" " (def car \\"\\")" "\\n(if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )" " (def car \\"\\")" "\\n(if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (car (carriermap (\:carrier carrier)))  )" "(def a)" "(a 3)" "(def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n         \\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" " (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )" "car" "(->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)" " (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car)" "(defrecord Ticket [price url])\\r\\n(defrecord Performer [name genre image_url])\\r\\n(defrecord Place [name city country location])\\r\\n(defrecord Event [name performer date Place Ticket])\\r\\n(defrecord Flight [origin destination departure_date arrival_date carrier])\\r\\n(defrecord Trip [Flights price])\\r\\n(defrecord Result [Event Flight total_price total_distance])" " (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car)" " (def flights (atom []))" "(swap\! flights 1)" "(swap\! flights conj 1)" " (def flights (atom []))\\r\\n  (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n         \\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" "(for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n         \\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" "(for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n         \\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          \\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" " (def connections (\:segment (nth fares 0)))" " (def carrier (nth fare_carriers 0))" "\\r\\n          (def connection (first (\:leg (nth connections j))))" "\\r\\n          (def connection (first (\:leg (nth connections 0))))" " (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )" "(swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))" "flights" "  (for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" " (count connections)" "(count fares)" "(def flights (atom []))\\r\\n  (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))" "(for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" "(for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) \\"\\"))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" "(def e (atom []))" "(for [i (range 10)] (swap\! e conj i))" "(for [i (range 10)] (for [j (range 10)] (swap\! e conj j)))" "(for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares 0)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers 0))\\r\\n          (def connection (first (\:leg (nth connections 0))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" "(def connections (\:segment (nth fares 0)))" "(def carrier (nth fare_carriers 0))" "\\r\\n          (def connection (first (\:leg (nth connections 0))))" "   (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )" "(swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))" " (def connection (first (\:leg (nth connections 1))))" " (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )" "(swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))" "  (def connections (\:segment (nth fares 1)))" "  (def carrier (nth fare_carriers 1))" "  (def connection (first (\:leg (nth connections 0))))" "  (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )" "(swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))" " (def connection (first (\:leg (nth connections 1))))" "    (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )" " (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))" " (for [i (range 0 (count fares))] \\r\\n    \\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        \\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          \\r\\n        )\\r\\n       \\r\\n    )" " (for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        \\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          \\r\\n        )\\r\\n       )\\r\\n    )" "(for [i (range 0 (count fares))] \\r\\n   (comp\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (comp\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" " (def flights (atom []))\\r\\n  (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n   (comp\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (comp\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" "flights" " (def flights (atom []))\\r\\n  (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n   (comp\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (comp\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )flights\\r\\n        )\\r\\n      ) \\r\\n    )" "(defn process-flight-response [body] \\r\\n  (def flights (atom []))\\r\\n  (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n   (comp\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (comp\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )\\r\\n  )" "(process-flight-response body)" " (def flights (atom []))\\r\\n  (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n   (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" "(def flights (atom []))\\r\\n  (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n   (comp\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (comp\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )flights" "(defn process-flight-response [body] \\r\\n  (def flights (atom []))\\r\\n  (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n   (comp\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (comp\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )flights\\r\\n  )" "(process-flight-response body)" "body" "(def flights (atom []))\\r\\n(defn process-flight-response [body] \\r\\n  \\r\\n  (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n   (comp\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (comp\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )flights\\r\\n  )" "(process-flight-response body)" "(defn process-flight-response [body] \\r\\n  \\r\\n  (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n   (comp\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (comp\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          flights)\\r\\n        )\\r\\n      ) \\r\\n    )flights\\r\\n  )" "(process-flight-response body)" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )\\r\\n(defrecord Ticket [price url])\\r\\n(defrecord Performer [name genre image_url])\\r\\n(defrecord Place [name city country location])\\r\\n(defrecord Event [name performer date Place Ticket])\\r\\n(defrecord Flight [origin destination departure_date arrival_date carrier])\\r\\n(defrecord Trip [Flights price])\\r\\n(defrecord Result [Event Flight total_price total_distance])" "(defn send-flight-request [origin_code destination_code departure_date arrival_date]\\r\\n  \\r\\n  (def requestFlight (generate-string  {\:request{\\r\\n                                                 \:slice [\\r\\n                                                         {\\r\\n                                                          \:origin origin_code,\\r\\n                                                          \:destination destination_code,\\r\\n                                                          \:date departure_date\\r\\n                                                          },\\r\\n                                                         {\\r\\n                                                          \:origin destination_code,\\r\\n                                                          \:destination origin_code,\\r\\n                                                          \:date arrival_date\\r\\n                                                          }\\r\\n                                                         ],\\r\\n                                                 \:passengers {\\r\\n                                                              \:adultCount 1,\\r\\n                                                              \:infantInLapCount 0,\\r\\n                                                              \:infantInSeatCount 0,\\r\\n                                                              \:childCount 0,\\r\\n                                                              \:seniorCount 0\\r\\n                                                              },\\r\\n                                                 \:solutions 1,\\r\\n                                                 \:refundable false\\r\\n                                                 }}))\\r\\n  (def options {\\r\\n                \:body  requestFlight\\r\\n                \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                          \\"Content-Type\\" \\"application/json\\"}\\r\\n                \:content-type \:json\\r\\n                \:accept \:json\\r\\n                \:throw-entire-message? true}\\r\\n    )   \\r\\n  (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/data/city(code,name),trips/data/carrier(code,name),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))\\r\\n  \\r\\n  \\r\\n  (def body (parse-string (\:body response) true))\\r\\n  \\r\\n  \\r\\n  )" "(send-flight-request \\"BEG\\" \\"BCN\\" \\"2015-20-05\\" \\"2015-23-05\\")" "(send-flight-request \\"BEG\\" \\"BCN\\" \\"2015-05-20\\" \\"2015-05-21\\")" "body" "(def flights (atom []))" "(defn process-flight-response [body]   \\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fare (\:slice tripOption)\\r\\n        data ((\:data (\:trips body))),\\r\\n        cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code cities) (map \:name cities))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n  (for [i (range 0 (count fares))] \\r\\n   (let [connections (\:segment (nth fares i))]\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n            (let [car (carriermap (\:carrier carrier))] \\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          flights))\\r\\n        )\\r\\n      ) \\r\\n    )flights)\\r\\n  ))" "(defn process-flight-response [body]   \\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fare (\:slice tripOption)\\r\\n        data ((\:data (\:trips body))),\\r\\n        cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code cities) (map \:name cities))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n  (for [i (range 0 (count fares))] \\r\\n   (let [connections (\:segment (nth fares i))]\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n            (let [car (carriermap (\:carrier carrier))] \\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          flights))\\r\\n        )\\r\\n      ) \\r\\n    ))\\r\\n  ))" "(defn process-flight-response [body]   \\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fare (\:slice tripOption)\\r\\n        data ((\:data (\:trips body))),\\r\\n        cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code cities) (map \:name cities))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(defn process-flight-response [body]   \\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data ((\:data (\:trips body))),\\r\\n        cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code cities) (map \:name cities))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(defn process-flight-response [body]   \\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data ((\:data (\:trips body))),\\r\\n        cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code cities) (map \:name cities))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (swap\! flights (conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car)))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(def \\n  tripOption  (first (\:tripOption (\:trips body))))" "(def  price (\:saleTotal tripOption))" "(def  fare_carriers  (\:fare (first (\:pricing tripOption)))\\r\\n        )" "(def  fares (\:slice tripOption))" "(def  data ((\:data (\:trips body))))" "(def  data (\:data (\:trips body)))" "(defn process-flight-response [body]   \\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n        cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code cities) (map \:name cities))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(defn process-flight-response [body]\\r\\n  (def flights [])\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n        cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code cities) (map \:name cities))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (conj flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(defn get-date [date choice] \\r\\n  (.format (SimpleDateFormat. \\"yyyy-MM-dd\\") (Date. (+ (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\")) (* 1000 60 60 24))))\\r\\n  )" "(import 'java.util.Date)" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n   (import 'java.util.Date)\\r\\n  )" "(defn get-date [date choice] \\r\\n  (.format (SimpleDateFormat. \\"yyyy-MM-dd\\") (Date. (+ (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\")) (* 1000 60 60 24))))\\r\\n  )" "(import 'java.text.SimpleDateFormat)" "(defn get-date [date choice] \\r\\n  (.format (SimpleDateFormat. \\"yyyy-MM-dd\\") (Date. (+ (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\")) (* 1000 60 60 24))))\\r\\n  )" "(get-date \\"2000-02-02\\")" "(get-date \\"2000-02-02\\" +)" "(defn get-date [date choice] \\r\\n  (.format (SimpleDateFormat. \\"yyyy-MM-dd\\") (Date. (choice (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") date)) (* 1000 60 60 24))))\\r\\n  )" "(get-date \\"2000-02-02\\" +)" "(defn get-date [date choice] \\r\\n  (Date. (choice (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") date)) (* 1000 60 60 24)))\\r\\n  )" "(get-date \\"2000-02-02\\" +)" "(defn format-date [date]\\r\\n  (.format (SimpleDateFormat. \\"yyyy-MM-dd\\") date)\\r\\n  )" "(format-date (get-date \\"2010-01-01\\" +))" "data" "cities" " cities  (\:city data)" "citymap (zipmap (map \:code cities) (map \:name cities))" "(def citymap (zipmap (map \:code cities) (map \:name cities)))" "(def cities  (\:city data))" "(def citymap (zipmap (map \:code cities) (map \:name cities)))" "citymap" "(defn process-flight-response [body]\\r\\n  (def flights [])\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n        cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code cities) (map \:name cities))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (conj flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "body" "(defn send-flight-request [origin_code destination_code departure_date arrival_date]\\r\\n  \\r\\n  (def requestFlight (generate-string  {\:request{\\r\\n                                                 \:slice [\\r\\n                                                         {\\r\\n                                                          \:origin origin_code,\\r\\n                                                          \:destination destination_code,\\r\\n                                                          \:date departure_date\\r\\n                                                          },\\r\\n                                                         {\\r\\n                                                          \:origin destination_code,\\r\\n                                                          \:destination origin_code,\\r\\n                                                          \:date arrival_date\\r\\n                                                          }\\r\\n                                                         ],\\r\\n                                                 \:passengers {\\r\\n                                                              \:adultCount 1,\\r\\n                                                              \:infantInLapCount 0,\\r\\n                                                              \:infantInSeatCount 0,\\r\\n                                                              \:childCount 0,\\r\\n                                                              \:seniorCount 0\\r\\n                                                              },\\r\\n                                                 \:solutions 1,\\r\\n                                                 \:refundable false\\r\\n                                                 }}))\\r\\n  (def options {\\r\\n                \:body  requestFlight\\r\\n                \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                          \\"Content-Type\\" \\"application/json\\"}\\r\\n                \:content-type \:json\\r\\n                \:accept \:json\\r\\n                \:throw-entire-message? true}\\r\\n    )   \\r\\n  (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/data(city(code,name),carrier(code,name),airport(code,name)),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))\\r\\n  \\r\\n  \\r\\n  (def body (parse-string (\:body response) true))\\r\\n  \\r\\n  \\r\\n  )" "(send-flight-request \\"BEG\\" \\"BCN\\" \\"2015-05-20\\" \\"2015-05-21\\")" "body" "(defn send-flight-request [origin_code destination_code departure_date arrival_date]\\r\\n  \\r\\n  (def requestFlight (generate-string  {\:request{\\r\\n                                                 \:slice [\\r\\n                                                         {\\r\\n                                                          \:origin origin_code,\\r\\n                                                          \:destination destination_code,\\r\\n                                                          \:date departure_date\\r\\n                                                          },\\r\\n                                                         {\\r\\n                                                          \:origin destination_code,\\r\\n                                                          \:destination origin_code,\\r\\n                                                          \:date arrival_date\\r\\n                                                          }\\r\\n                                                         ],\\r\\n                                                 \:passengers {\\r\\n                                                              \:adultCount 1,\\r\\n                                                              \:infantInLapCount 0,\\r\\n                                                              \:infantInSeatCount 0,\\r\\n                                                              \:childCount 0,\\r\\n                                                              \:seniorCount 0\\r\\n                                                              },\\r\\n                                                 \:solutions 1,\\r\\n                                                 \:refundable false\\r\\n                                                 }}))\\r\\n  (def options {\\r\\n                \:body  requestFlight\\r\\n                \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                          \\"Content-Type\\" \\"application/json\\"}\\r\\n                \:content-type \:json\\r\\n                \:accept \:json\\r\\n                \:throw-entire-message? true}\\r\\n    )   \\r\\n  (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/data(city(code,name),carrier(code,name),airport),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))\\r\\n  \\r\\n  \\r\\n  (def body (parse-string (\:body response) true))\\r\\n  \\r\\n  \\r\\n  )" "(send-flight-request \\"BEG\\" \\"BCN\\" \\"2015-05-20\\" \\"2015-05-21\\")" "body" "\\r\\n(defn send-flight-request [origin_code destination_code departure_date arrival_date]\\r\\n  \\r\\n  (def requestFlight (generate-string  {\:request{\\r\\n                                                 \:slice [\\r\\n                                                         {\\r\\n                                                          \:origin origin_code,\\r\\n                                                          \:destination destination_code,\\r\\n                                                          \:date departure_date\\r\\n                                                          },\\r\\n                                                         {\\r\\n                                                          \:origin destination_code,\\r\\n                                                          \:destination origin_code,\\r\\n                                                          \:date arrival_date\\r\\n                                                          }\\r\\n                                                         ],\\r\\n                                                 \:passengers {\\r\\n                                                              \:adultCount 1,\\r\\n                                                              \:infantInLapCount 0,\\r\\n                                                              \:infantInSeatCount 0,\\r\\n                                                              \:childCount 0,\\r\\n                                                              \:seniorCount 0\\r\\n                                                              },\\r\\n                                                 \:solutions 1,\\r\\n                                                 \:refundable false\\r\\n                                                 }}))\\r\\n  (def options {\\r\\n                \:body  requestFlight\\r\\n                \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                          \\"Content-Type\\" \\"application/json\\"}\\r\\n                \:content-type \:json\\r\\n                \:accept \:json\\r\\n                \:throw-entire-message? true}\\r\\n    )   \\r\\n  (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/data(city(code,name),carrier(code,name),airport(code,city)),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))\\r\\n  \\r\\n  \\r\\n  (def body (parse-string (\:body response) true))\\r\\n  \\r\\n  \\r\\n  )" "(send-flight-request \\"BEG\\" \\"BCN\\" \\"2015-05-20\\" \\"2015-05-21\\")" "body" "(defn process-flight-response [body]\\r\\n  (def flights [])\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n      ;  cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (conj flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(def flights (list ()))" "flights" "\\r\\n(defn process-flight-response [body]\\r\\n  (def flights (list ()))\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n      ;  cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (conj flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(defn process-flight-response [body]\\r\\n  (def flights )\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n      ;  cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (conj flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(defn process-flight-response [body]\\r\\n  (def flights (atom (list ())))\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n      ;  cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (conj flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "\\r\\n(defn process-flight-response [body]\\r\\n  (def flights (atom (list ())))\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n      ;  cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(defn process-flight-response [body]\\r\\n  (def flights [])\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n      ;  cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (concat flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "\\r\\n(defn process-flight-response [body]\\r\\n  (def flights [])\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n      ;  cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (cons flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "\\r\\n(defn process-flight-response [body]\\r\\n  (def flights [])\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n      ;  cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (conj flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(defn process-flight-response [body]\\r\\n  (def flights [])\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n      ;  cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (conj\! flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(defn process-flight-response [body]\\r\\n  (def flights (list ()))\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n      ;  cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (conj\! flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(defn process-flight-response [body]\\r\\n  (def flights [])\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (conj flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(def proc (process-flight-response body))" "(proc 0)" "(nth proc 0)" "((nth proc 0)0)" "((nth proc 0) 0)" "(nth (nth proc 0) 0)" "(nth (nth proc 0) 1)" "((nth (nth proc 0) 1)0)" "(defn process-flight-response [body]\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(defn process-flight-response [body]\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (format-date (\:departureTime connection)) (format-date (\:arrivalTime connection)) car)\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(get-date \\"2013-02-14\\")" "(get-date \\"2013-02-14\\" +)" "(Date. \\"2015-05-21T12\:35+02\:00\\")" "(Date. (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2015-05-21T12\:35+02\:00\\")))" "(defn parse-date [date]\\r\\n   (Date. (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") date)))\\r\\n  )" "(parse-date \\"2015-05-21T12\:35+02\:00\\")" "(defn crease-date [choice date]\\r\\n  (choice date  (* 1000 60 60 24) )\\r\\n  )" "(crease-date + (parse-date \\"2015-05-21T12\:35+02\:00\\"))" "(defn crease-date [choice date]\\r\\n  (choice (.getTime date)  (* 1000 60 60 24) )\\r\\n  )" "(crease-date + (parse-date \\"2015-05-21T12\:35+02\:00\\"))" "(defn crease-date [choice date]\\r\\n  (Date.(choice (.getTime date)  (* 1000 60 60 24) ))\\r\\n  )" "(crease-date + (parse-date \\"2015-05-21T12\:35+02\:00\\"))" "(defn parse-date [date]\\r\\n   (Date. (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") date)))\\r\\n  )" "(parse-date \\"2015-05-21T12\:35+02\:00\\")" "(format-date (parse-date \\"2015-05-21T12\:35+02\:00\\"))" "(defn parse-date [pattern date]\\r\\n      (Date. (.getTime (.parse (SimpleDateFormat. pattern) date)))\\r\\n     )" "(format-date (parse-date \\"yyyy-MM-dd hh\:mm\\" \\"2015-05-21T12\:35+02\:00\\"))" "(format-date (parse-date \\"yyyy-MM-dd\\" \\"2015-05-21T12\:35+02\:00\\"))" "(format-date (parse-date \\"yyyy-MM-dd hh\\" \\"2015-05-21T12\:35+02\:00\\"))" "(format-date (parse-date \\"yyyy-MM-ddThh\\" \\"2015-05-21T12\:35+02\:00\\"))" "(format-date (parse-date \\"yyyy-MM-dd-hh\\" \\"2015-05-21T12\:35+02\:00\\"))" "(format-date (parse-date \\"yyyy-MM-dd-mm\\" \\"2015-05-21T12\:35+02\:00\\"))" "(format-date (parse-date \\"yyyy-MM-dd\\" \\"2015-05-21T12\:35+02\:00\\"))" "(format-date (parse-date \\"hh\:mm\\" \\"2015-05-21T12\:35+02\:00\\"))" "(format-date (parse-date \\"ss\\" \\"2015-05-21T12\:35+02\:00\\"))" "(format-date (parse-date \\"mm\:ss\\" \\"2015-05-21T12\:35+02\:00\\"))" "(format-date (parse-date \\"yyyy.MM.dd\\" \\"2015-05-21T12\:35+02\:00\\"))" "Domaci zadatak Mreze" "(defn process-flight-response [body]\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (format-date (parse-date (\:departureTime connection))) (format-date (parse-date (\:arrivalTime connection))) car)\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "\\r\\n(defn parse-date [date]\\r\\n   (Date. (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") date)))\\r\\n  )" "(process-flight-response body)" "(Date. (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") \\"12.12.2015\\")))" "(Date. (.getTime (.parse (SimpleDateFormat. \\"dd.MM.yyyy\\") \\"12.12.2015\\")))" "(Date. (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-ddThh\:mm\\") \\"2015-05-21T12\:35+02\:00\\")))" "(Date. (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd'T'hh\:mm\\") \\"2015-05-21T12\:35+02\:00\\")))" "(defn parse-date [pattern date]\\r\\n   (Date. (.getTime (.parse (SimpleDateFormat. pattern) date)))\\r\\n  )" "(parse-date  \\"yyyy-MM-dd'T'hh\:mm\\" \\"2015-05-21T12\:35+02\:00\\")" "(format-date (parse-date  \\"yyyy-MM-dd'T'hh\:mm\\" \\"2015-05-21T12\:35+02\:00\\"))" " (.format (SimpleDateFormat. \\"yyyy-MM-dd hh\:mm\\") (parse-date  \\"yyyy-MM-dd'T'hh\:mm\\" \\"2015-05-21T12\:35+02\:00\\"))" " (.format (SimpleDateFormat. \\"yyyy-MM-dd 'at' hh\:mm\\") (parse-date  \\"yyyy-MM-dd'T'hh\:mm\\" \\"2015-05-21T12\:35+02\:00\\"))" "(defn parse-date [pattern date]\\r\\n   (Date. (.getTime (.parse (SimpleDateFormat. pattern) date)))\\r\\n  )\\r\\n(defn get-date [choice date]\\r\\n  (Date.(choice (.getTime date)  (* 1000 60 60 24) ))\\r\\n  )\\r\\n\\r\\n(defn format-date [date]\\r\\n  (.format (SimpleDateFormat. \\"yyyy-MM-dd 'at' hh\:mm\\") date)\\r\\n  )" "(defn process-flight-response [body]\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (format-date (parse-date \\"yyyy-MM-dd'T'hh\:mm\\" (\:departureTime connection))) (format-date (parse-date \\"yyyy-MM-dd'T'hh\:mm\\" (\:arrivalTime connection))) car)\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(->Trip (process-flight-response body) (\:saleTotal  (first (\:tripOption (\:trips body)))))" "(use 'concertescape.core)" "-main" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(request-events \\"avicii\\")" " \\n (def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))" "(def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (def event (->Event (el \\"title\\") (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) a ven tick))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )\\r\\n  eventsmap" "eventsmap" "(request-events \\"avicii\\")" "(str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" \\"avicii\\")" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" \\"avicii\\")))) \\"events\\"))" "events" "  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (def event (->Event (el \\"title\\") (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) a ven tick))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "eventsmap" "(request-events \\"avicii\\")" "(defn request-events [artist]\\r\\n  (def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (def event (->Event (el \\"title\\") (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) a ven tick))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )\\r\\n  eventsmap\\r\\n  )" "(request-events \\"avicii\\")" "(defn request-events [artist]\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (def event (->Event (el \\"title\\") (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) a ven tick))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    ))\\r\\n  eventsmap\\r\\n  )" "(request-events \\"avicii\\")" "(defn request-events [artist]\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (def event (->Event (el \\"title\\") (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) a ven tick))\\r\\n\\r\\n      )\\r\\n    ))\\r\\n  )" "(request-events \\"avicii\\")" "event" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (def event (->Event (el \\"title\\") (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) a ven tick))\\r\\n      (conj e event)\\r\\n      )\\r\\n    ))\\r\\n  )" "(request-events \\"avicii\\")" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (def event (->Event (el \\"title\\") a (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))\\r\\n      (conj e event)\\r\\n      )\\r\\n    ))\\r\\n  )" "(request-events \\"avicii\\")" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (def event (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))\\r\\n      (conj e event)\\r\\n      )\\r\\n    ))" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (def event (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))\\r\\n      (conj e event)\\r\\n      )\\r\\n    ))\\r\\n  )" "(request-events \\"avicii\\")" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists [])\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (conj artists (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (def event (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))\\r\\n      (conj e event)\\r\\n      )\\r\\n    ))\\r\\n  )" "(request-events \\"avicii\\")" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists [])\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n           (conj artists (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (def event (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))\\r\\n      (conj e event)\\r\\n      )\\r\\n    ))\\r\\n  )" "(request-events \\"avicii\\")" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n           (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (def event (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))\\r\\n      (conj e event)\\r\\n      )\\r\\n    ))\\n  \\r\\n  )" "(request-events \\"avicii\\")" "(let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")] performers)))" "\\n(let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" \\"avicii\\")))) \\"events\\")]\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")] performers)))" "\\n(let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" \\"avicii\\")))) \\"events\\")]\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range 0 (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n           (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        ))))" "artists" "\\n(let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" \\"avicii\\")))) \\"events\\")]\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists  [])\\r\\n      (for [j (range 0 (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n           (artists (conj artists (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (def event (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))\\r\\n      (conj e event)\\r\\n      )\\r\\n    ))" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists  [])\\r\\n      (for [j (range 0 (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n           (artists (conj artists (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (conj e (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))\\r\\n      )\\r\\n    ))\\r\\n  )" "(request-events \\"avicii\\")" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range 0 (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n           (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (conj e (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))\\r\\n      (reset\! artists)\\r\\n      )\\r\\n    ))\\r\\n  )" "(request-events \\"avicii\\")" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range 0 (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n           (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (conj e (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))\\r\\n      (reset\! artists [])\\r\\n      )\\r\\n    ))\\r\\n  )" "(request-events \\"avicii\\")" "e" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range 0 (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n           (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (conj e (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))\\r\\n     \\r\\n      )\\r\\n    ))\\r\\n  )" "(request-events \\"avicii\\")" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), \\r\\n          performers (el \\"performers\\"), \\r\\n          venue (el \\"venue\\"), \\r\\n          ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n          tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\"))]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range 0 (count performers))] \\r\\n        (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n           (swap\! artists conj performer)\\r\\n        )\\r\\n      )\\r\\n       (conj e (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))     \\r\\n     \\r\\n    ))\\r\\n  ))" "(request-events \\"avicii\\")" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n            performers (el \\"performers\\"), \\r\\n            venue (el \\"venue\\"), \\r\\n            ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n            tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\"))]\\r\\n        (def artists [])\\r\\n        (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n            (conj artists performer)\\r\\n            )\\r\\n          )\\r\\n        (conj e (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))     \\r\\n        \\r\\n        ))\\r\\n    ))" "(request-events \\"avicii\\")" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" \\"avicii\\")))) \\"events\\"))" "(def el (nth events 0))" "el" "(def performers (el \\"performers\\"))" "performers" "(def per (nth performers 0))" "per" "(def performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))" "performer" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n            performers (el \\"performers\\"), \\r\\n            venue (el \\"venue\\"), \\r\\n            ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n            tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\"))]\\r\\n        (def artists [])\\r\\n        (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n             (def a (conj artists performer))\\r\\n            )\\r\\n          )\\r\\n        (conj e (->Event (el \\"title\\") a (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))     \\r\\n        \\r\\n        ))\\r\\n    ))" "(request-events \\"avicii\\")" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n            performers (el \\"performers\\"), \\r\\n            venue (el \\"venue\\"), \\r\\n            ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n            tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\"))]\\r\\n        (def artists (atom []))\\r\\n        (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n             (reset\! artists (conj artists performer))\\r\\n            )\\r\\n          )\\r\\n        (conj e (->Event (el \\"title\\") a (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))     \\r\\n        \\r\\n        ))\\r\\n    ))" "(request-events \\"avicii\\")" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n            performers (el \\"performers\\"), \\r\\n            venue (el \\"venue\\"), \\r\\n            ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n            tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\"))]\\r\\n        (def artists (atom []))\\r\\n        (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n             (reset\! artists (conj artists performer))\\r\\n            )\\r\\n          )\\r\\n        (conj e (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))     \\r\\n        \\r\\n        ))\\r\\n    ))" "(request-events \\"avicii\\")" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n            performers (el \\"performers\\"), \\r\\n            venue (el \\"venue\\"), \\r\\n            ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n            tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\")), artists []]\\r\\n        (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n             (conj artists performer)\\r\\n            )\\r\\n          )\\r\\n        (conj e (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))     \\r\\n        \\r\\n        ))\\r\\n    ))" "(request-events \\"avicii\\")" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n            performers (el \\"performers\\"), \\r\\n            venue (el \\"venue\\"), \\r\\n            ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n            tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\")), artists (atom [])]\\r\\n        (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n             (swap\! artists conj performer)\\r\\n            )\\r\\n          )\\r\\n        (conj e (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))     \\r\\n        \\r\\n        ))\\r\\n    ))" "(request-events \\"avicii\\")" "\\r\\n(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n            performers (el \\"performers\\"), \\r\\n            venue (el \\"venue\\"), \\r\\n            ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n            tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\")), artists []]\\r\\n        (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n            (cons artists performer)\\r\\n            )\\r\\n          )\\r\\n        (conj e (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))     \\r\\n        \\r\\n        ))\\r\\n    ))" "(request-events \\"avicii\\")" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n            performers (el \\"performers\\"), \\r\\n            venue (el \\"venue\\"), \\r\\n            ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n            tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\")), artists []]\\r\\n        (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n            (concat artists performer)\\r\\n            )\\r\\n          )\\r\\n        (conj e (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))     \\r\\n        )\\r\\n      )\\r\\n    )\\r\\n  )" "(request-events \\"avicii\\")" "(def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n            performers (el \\"performers\\"), \\r\\n            venue (el \\"venue\\"), \\r\\n            ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n            tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\")), artists (atom [])]\\r\\n        (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n            (concat artists performer)\\r\\n            )\\r\\n          )\\r\\n        (conj e (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))     \\r\\n        )\\r\\n      )\\r\\n    )" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n            performers (el \\"performers\\"), \\r\\n            venue (el \\"venue\\"), \\r\\n            ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n            tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\")), artists (atom [])]\\r\\n        (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n            (concat artists performer)\\r\\n            )\\r\\n          )\\r\\n        (conj e (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))     \\r\\n        )\\r\\n      )\\r\\n    )\\r\\n  )" "(request-events \\"avicii\\")" "(defn request-events [artist]\\r\\n  (def e [],  artists [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n            performers (el \\"performers\\"), \\r\\n            venue (el \\"venue\\"), \\r\\n            ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n            tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\"))] \\r\\n        (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n            (concat artists performer)\\r\\n            )\\r\\n          )\\r\\n        (conj e (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))     \\r\\n        )\\r\\n      )\\r\\n    )\\r\\n  )" "(defn request-events [artist]\\r\\n  (def e [])\\r\\n  (def artists [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n            performers (el \\"performers\\"), \\r\\n            venue (el \\"venue\\"), \\r\\n            ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n            tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\"))] \\r\\n        (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n            (concat artists performer)\\r\\n            )\\r\\n          )\\r\\n        (conj e (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick))     \\r\\n        )\\r\\n      )\\r\\n    )\\r\\n  )" "(request-events \\"avicii\\")" "(def e [])\\r\\n  (def artists [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n            performers (el \\"performers\\"), \\r\\n            venue (el \\"venue\\"), \\r\\n            ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n            tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\"))] \\r\\n        (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n            (concat artists performer)\\r\\n            )\\r\\n          ))))" "\\n\\n(def e [])\\r\\n  (def artists [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" \\"avicii\\")))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n            performers (el \\"performers\\"), \\r\\n            venue (el \\"venue\\"), \\r\\n            ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n            tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\"))] \\r\\n        (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n            (concat artists performer)\\r\\n            )\\r\\n          ))))" " (def e [])\\r\\n  (def artists [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n            performers (el \\"performers\\"), \\r\\n            venue (el \\"venue\\"), \\r\\n            ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n            tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\"))] \\r\\n        (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n            (cons artists performer)\\r\\n            )\\r\\n          ))))" "\\n(def e [])\\r\\n  (def artists [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" \\"avicii\\")))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n            performers (el \\"performers\\"), \\r\\n            venue (el \\"venue\\"), \\r\\n            ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n            tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\"))] \\r\\n        (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n            (cons artists performer)\\r\\n            )\\r\\n          ))))" "(def e [])\\r\\n  (def artists [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n            performers (el \\"performers\\"), \\r\\n            venue (el \\"venue\\"), \\r\\n            ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n            tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\"))] \\r\\n        (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n            (conj artists performer)\\r\\n            )\\r\\n          ))))" "\\n(def e [])\\r\\n  (def artists [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" \\"avicii\\")))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n            performers (el \\"performers\\"), \\r\\n            venue (el \\"venue\\"), \\r\\n            ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n            tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\"))] \\r\\n        (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n            (conj artists performer)\\r\\n            )\\r\\n          ))))" "(defn request-events [artist]\\r\\n  (def artists [])\\r\\n  (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n            performers (el \\"performers\\"), \\r\\n            venue (el \\"venue\\"), \\r\\n            ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n            tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\"))] \\r\\n        (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n            (conj artists performer)\\r\\n            )\\r\\n          )\\r\\n        (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick)     \\r\\n        )\\r\\n      )\\r\\n    )\\r\\n  )" "(request-events \\"avicii\\")" "(defn request-events [artist]\\r\\n   (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n             performers (el \\"performers\\"), \\r\\n             venue (el \\"venue\\"), \\r\\n             ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n             tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\")),\\r\\n             artists []] \\r\\n        (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n            (conj artists performer)\\r\\n            )\\r\\n          )\\r\\n         (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick)     \\r\\n        )\\r\\n       )\\r\\n    )\\r\\n  )" "(request-events \\"avicii\\")" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" \\"avicii\\")))) \\"events\\")\\r\\n   )" "(def el (nth events 0))" "el" "(def  performers (el \\"performers\\"))" " venue (el \\"venue\\")" "(def venue (el \\"venue\\"))" "(def   ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))))" "(def  tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\")))" "(def artists [])" "(def per (nth performers 0))" "(def performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))" " (conj artists performer)" "(for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n            (conj artists performer)\\r\\n            )\\r\\n          )" "(map \\"name\\" performers)" "(map performers \\"name\\")" "(keys performers)" "performers" "performer" "per" "(def mapa [{\\"a\\" 1 \\"b\\" 2} {\\"a\\" 3 \\"b\\" 4}])" "(mapa 0)" "(key \\"a\\")" "(key (mapa 0))" "(def mapa [{\:a 1 \:b 2} {\:a 3 \:b 4}])" "(map \:a mapa)" "(map keyword (keys mapa))" "(map keywordize (keys mapa))" "(def mapa [{\\"a\\" 1 \\"b\\" 2} {\\"a\\" 3 \\"b\\" 4}])" "(map mapa \\"a\\")" "(map \\"a\\" mapa)" "(map [\\"a\\"] mapa)" "(hash-map (mapa 0))" "(defn get-performers [performers]\\r\\n  (let [artists ()] \\r\\n    (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n            (conj artists performer)\\r\\n            )\\r\\n          ))\\r\\n  )" "(defn request-events [artist]\\r\\n   (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n             performers (el \\"performers\\"), \\r\\n             venue (el \\"venue\\"), \\r\\n             ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n             tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\")),\\r\\n             artists (get-performers performers)] \\r\\n      \\r\\n         (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick)     \\r\\n        )\\r\\n       )\\r\\n    )\\r\\n  )" "(request-events \\"avicii\\")" "(defn get-performers [performers]\\r\\n  (let [artists {}] \\r\\n    (for [j (range 0 (count performers))] \\r\\n          (let [per (nth performers j), performer (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))]\\r\\n            (conj artists performer)\\r\\n            )\\r\\n          ))\\r\\n  )\\r\\n\\r\\n(defn request-events [artist]\\r\\n   (let [events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\")]\\r\\n    (for [i (range 0 (count events))] \\r\\n      (let [el (nth events i), \\r\\n             performers (el \\"performers\\"), \\r\\n             venue (el \\"venue\\"), \\r\\n             ven (->Place (venue \\"name\\") (venue \\"city\\") (venue \\"country\\") (vals (venue \\"location\\"))),\\r\\n             tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\")),\\r\\n             artists (get-performers performers)] \\r\\n      \\r\\n         (->Event (el \\"title\\") artists (subs (el \\"datetime_local\\") 0 (.indexOf (el \\"datetime_local\\") \\"T\\")) ven tick)     \\r\\n        )\\r\\n       )\\r\\n    )\\r\\n  )" "(request-events \\"avicii\\")" "(map keyword (keys mapa))" "(map keyword (keys (mapa 0)))" "(map keyword (map keys mapa))" "(map keys mapa)" "(map keyword keys mapa)" "(zipmap keyword (map keys mapa))" "(zipmap (keyword (map keys mapa)) (vals mapa))" "(zipmap (keyword (map keys mapa)) (map vals mapa))" "(zipmap (map keys mapa) (map vals mapa))" "performers" "(request-events \\"avicii\\")" "(map \:date (request-events \\"avicii\\"))" "(defn load-airport-codes []   \\r\\n  (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;,)\\r\\n           ))\\r\\n  a  \\r\\n  )" "load-airport-codes" "(load-airport-codes)" "(def airports (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n                (csv/read-csv (slurp file) \:separator \\\\;,)\\r\\n                )\\r\\n  )" " (def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count airports))] \\r\\n      (let [elem (nth airports i)]\\r\\n        (swap\! aiportmap assoc (elem 3) [(elem 1) (elem 2)] ) i)\\r\\n      )aiportmap\\r\\n    ;   (def mapair (zipmap (map keyword (keys @aiportmap)) (vals @aiportmap)))\\r\\n    ;  )mapair" "(map (3 [1 2]) airports)" "(map [3 [1 2]] airports)" "(map [3 (1 2)] airports)" "(map [3 1 2] airports)" "airports" "(map 1 airports)" "(map [1] airports)" "(map [airports 1] airports)" "(map nth airports)" "(map nth airports (count airports))" "(map nth (count airports )airports)" "airports" "(flatten airports)" "(apply map 1 airports)" "airports" "(apply map (1) airports)" "(map 1 airports)" "performers" "(map (performers \\"name\\") performers)" "aiportmap" "events" "eventsmap" "eventstmap" "(events \\"date\\")" "(get-events-map events)" "(get-events-map (request-events \\"avicii\\"))" " \\n (request-events \\"avicii\\")" "(\:city (request-events \\"AVICII\\"))" "(\:Place (request-events \\"AVICII\\"))" "(map \:Place (request-events \\"AVICII\\"))" "(map \:name (request-events \\"AVICII\\"))" " \\n (request-events \\"avicii\\")" "(map \:name (request-events \\"AVICII\\"))" "(def r \\n (request-events \\"avicii\\"))" "r" "(map \:name r)" "(map \:name (request-events \\"avicii\\"))" "(map \:Place (request-events \\"avicii\\"))" "(map \:city \:country  (map \:Place (request-events \\"avicii\\")) )" "(map \:city (map \:Place (request-events \\"avicii\\")) )" "\\n(let [x (zipmap  (map \:city (map \:Place (request-events \\"avicii\\")))  (map \:country (map \:Place (request-events \\"avicii\\")))) ]) x" "\\n(let [x (zipmap  (map \:city (map \:Place (request-events \\"avicii\\")))  (map \:country (map \:Place (request-events \\"avicii\\")))) ]x)" "mapair" "(defn get-airport-codes-map []\\r\\n  (\\r\\n    (def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count airports))] \\r\\n      (let [elem (nth airports i)]\\r\\n        (swap\! aiportmap assoc (elem 3) [(elem 1) (elem 2)] ) i)\\r\\n      )aiportmap\\r\\n    ;   (def mapair (zipmap (map keyword (keys @aiportmap)) (vals @aiportmap)))\\r\\n    ;  )mapair\\r\\n    ))" "(get-airport-codes-map)" "airports" "(defn get-airport-codes-map []\\r\\n  (\\r\\n    (def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count airports))] \\r\\n      (let [elem (nth airports i)]\\r\\n        (swap\! aiportmap assoc (elem 3) [(elem 1) (elem 2)] ) i)\\r\\n      )aiportmap\\r\\n    ;   (def mapair (zipmap (map keyword (keys @aiportmap)) (vals @aiportmap)))\\r\\n    ;  )mapair\\r\\n    ))" "(get-airport-codes-map)" " (def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count airports))] \\r\\n      (let [elem (nth airports i)]\\r\\n        (swap\! aiportmap assoc (elem 3) [(elem 1) (elem 2)] ) i)\\r\\n      )aiportmap" "\\n(let [x (zipmap  (map \:city (map \:Place (request-events \\"avicii\\")))  (map \:country (map \:Place (request-events \\"avicii\\")))) ]x)" "\\n( get-airport-code (zipmap  (map \:city (map \:Place (request-events \\"avicii\\")))  (map \:country (map \:Place (request-events \\"avicii\\")))) aiportmap)" "(defn get-airport-codes-map []\\r\\n  (let [aiportmap (atom {})]\\r\\n    (for [i (range 0 (count airports))] \\r\\n      (let [elem (nth airports i)]\\r\\n        (swap\! aiportmap assoc (elem 3) [(elem 1) (elem 2)] ) i)\\r\\n      )\\r\\n    )\\r\\n    )" "(get-airport-codes-map)" "(def airport-codes-map \\r\\n  (let [aiportmap (atom {})]\\r\\n    (for [i (range 0 (count airports))] \\r\\n      (let [elem (nth airports i)]\\r\\n        (swap\! aiportmap assoc (elem 3) [(elem 1) (elem 2)] ) i)\\r\\n      )\\r\\n    )\\r\\n    )" "airport-codes-map" "(def airport-codes-map \\r\\n  (let [aiportmap (atom {})]\\r\\n    (for [i (range 0 (count airports))] \\r\\n      (let [elem (nth airports i)]\\r\\n        (swap\! aiportmap assoc (elem 3) [(elem 1) (elem 2)] ) i)\\r\\n      )\\r\\n    )\\r\\n    )" "airport-codes-map" "(def airport-codes-map \\r\\n  (let [airportmap (atom {})]\\r\\n    (for [i (range 0 (count airports))] \\r\\n      (let [elem (nth airports i)]\\r\\n        (swap\! airportmap assoc (elem 3) [(elem 1) (elem 2)] ))\\r\\n      )\\r\\n    airportmap)" "(def airport-codes-map \\r\\n  (let [airportmap (atom {})]\\r\\n    (for [i (range 0 (count airports))] \\r\\n      (let [elem (nth airports i)]\\r\\n        (swap\! airportmap assoc (elem 3) [(elem 1) (elem 2)] ))\\r\\n      )\\r\\n    airportmap)\\r\\n    )" "airport-codes-map" "(def airport-codes-map \\r\\n  (let [airportmap {}]\\r\\n    (for [i (range 0 (count airports))] \\r\\n      (let [elem (nth airports i)]\\r\\n        (assoc airportmap (elem 3) [(elem 1) (elem 2)] ))\\r\\n      )\\r\\n    )\\r\\n    )" "airport-codes-map" "\\n( get-airport-code (zipmap  (map \:city (map \:Place (request-events \\"avicii\\")))  (map \:country (map \:Place (request-events \\"avicii\\")))) airport-codes-map)" "(def airport-codes-map \\r\\n  (let [airportmap []]\\r\\n    (for [i (range 0 (count airports))] \\r\\n      (let [elem (nth airports i)]\\r\\n        (assoc airportmap (elem 3) [(elem 1) (elem 2)] ))\\r\\n      )\\r\\n    )\\r\\n    )" "airport-codes-map" "(def airport-codes-map \\r\\n  (let [airportmap []]\\r\\n    (for [i (range 0 (count airports))] \\r\\n      (let [elem (nth airports i)]\\r\\n        (conj airportmap (elem 3) [(elem 1) (elem 2)] ))\\r\\n      )\\r\\n    )\\r\\n    )" "airport-codes-map" "(def airport-codes-map \\r\\n  (let [airportmap ()]\\r\\n    (for [i (range 0 (count airports))] \\r\\n      (let [elem (nth airports i)]\\r\\n        (conj airportmap (elem 3) [(elem 1) (elem 2)] ))\\r\\n      )\\r\\n    )\\r\\n    )" "airport-codes-map" "(def airport-codes-map \\r\\n  (let [airportmap {}]\\r\\n    (for [i (range 0 (count airports))] \\r\\n      (let [elem (nth airports i)]\\r\\n        (assoc airportmap (elem 3) [(elem 1) (elem 2)] ))\\r\\n      )\\r\\n    )\\r\\n    )" "airport-codes-map" "(zipmap  (map \:city (map \:Place (request-events \\"avicii\\")))  (map \:country (map \:Place (request-events \\"avicii\\"))))" "(into [] (zipmap  (map \:city (map \:Place (request-events \\"avicii\\")))  (map \:country (map \:Place (request-events \\"avicii\\")))))" "(into [] (into [] (zipmap  (map \:city (map \:Place (request-events \\"avicii\\")))  (map \:country (map \:Place (request-events \\"avicii\\"))))))" "(into () (zipmap  (map \:city (map \:Place (request-events \\"avicii\\")))  (map \:country (map \:Place (request-events \\"avicii\\")))))" "airport-codes-map" " (def place (into () (zipmap  (map \:city (map \:Place (request-events \\"avicii\\")))  (map \:country (map \:Place (request-events \\"avicii\\"))))))" "place" "(get-airport-code place airport-codes-map)" " (def place (map  \:Place (request-events \\"avicii\\")))" "place" "(map get-airport-code place airport-codes-map)" "(doseq [i (range 0 (count place))] (get-airport-code (nth place i) airport-codes-map))" "(nth place 0)" "(get-airport-code (nth place 0) airport-codes-map)" "airport-codes-map" "(defn get-airport-code [place airportmap]\\r\\n  (def airportcode (nth airportmap (first (filter \#(and (\= (% 1) (-> place \:country)) (.startsWith (% 0) (-> place \:city))) (keys airportmap)))))\\r\\n  airportcode\\r\\n  )" "(get-airport-code (nth place 0) airport-codes-map)" "(def airport-codes-map \\r\\n  \\r\\n    (for [i (range 0 (count airports))] \\r\\n      (let [elem (nth airports i)]\\r\\n        (assoc airport-codes-map (elem 3) [(elem 1) (elem 2)] ))\\r\\n      )\\r\\n  \\r\\n  )" "airport-codes-map" "(def airport-codes-map \\r\\n  (let [airportmap {}]\\r\\n    (for [i (range 0 (count airports))] \\r\\n      (let [elem (nth airports i)]\\r\\n        (assoc airportmap (elem 3) [(elem 1) (elem 2)] ))\\r\\n      )\\r\\n    )\\r\\n  )" "airport-codes-map" "(keys airport-codes-map)" "(def mapair (zipmap (map keyword (keys airport-codes-map)) (vals airport-codes-map)))" "(def airport-codes-map \\r\\n    (for [i (range 0 (count airports))] \\r\\n      (let [elem (nth airports i)]\\r\\n        ((elem 3) [(elem 1) (elem 2)] ))\\r\\n      )\\r\\n    \\r\\n  )" "airport-codes-map" "(for [i (range 0 (count airports))] \\r\\n      (let [elem (nth airports i)]\\r\\n        ((elem 3) [(elem 1) (elem 2)] ))\\r\\n      )" "airports" "(def airports (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n                (csv/read-csv (slurp file) \:separator \\\\;,)\\r\\n                ))" "airports" "airport-codes-map" "(map merge airport-codes-map)" "(map merge (airport-codes-map 0))" "((map merge (airport-codes-map 0)) \\"ZRH\\")" "airport-codes-map" "(map flatten airport-codes-map)" "(map conj airport-codes-map)" "(map merge airport-codes-map)" "((map merge airport-codes-map) \\"ZRH\\")" "(map merge airport-codes-map)" "(map merge (nth airport-codes-map 0))" "(nth airport-codes-map 0)" "(merge airport-codes-map 0)" "((merge airport-codes-map 0) \\"ZRH\\")" "((merge airport-codes-map) \\"ZRH\\")" "(merge airport-codes-map)" "(into {} airport-codes-map)" "((into {} airport-codes-map) \\"ZRH\\")" "airport-codes-map" "(request-events \\"avicii\\")" " (def place (into () (zipmap  (map \:city (map \:Place (request-events \\"avicii\\")))  (map \:country (map \:Place (request-events \\"avicii\\"))))))" "place" "(zipmap  (map \:city (map \:Place (request-events \\"avicii\\")))  (map \:country (map \:Place (request-events \\"avicii\\"))))" "(def place (into [] (zipmap  (map \:city (map \:Place (request-events \\"avicii\\")))  (map \:country (map \:Place (request-events \\"avicii\\"))))))" "place" "(flatten place)" "(merge place)" "(zipmap  (map \:city (map \:Place (request-events \\"avicii\\")))  (map \:country (map \:Place (request-events \\"avicii\\"))))" "airport-codes-map" "(zipmap  (map \:city (map \:Place (request-events \\"avicii\\")))  (map \:country (map \:Place (request-events \\"avicii\\"))))" "((zipmap  (map \:city (map \:Place (request-events \\"avicii\\")))  (map \:country (map \:Place (request-events \\"avicii\\")))) airport-codes-map)" "(get-airport-code (zipmap  (map \:city (map \:Place (request-events \\"avicii\\")))  (map \:country (map \:Place (request-events \\"avicii\\")))) airport-codes-map)" "(map \:Place (request-events \\"avicii\\"))" "(def pl (map \:Place (request-events \\"avicii\\")))" "(get-airport-code pl airport-codes-map)" "pl" "(def place (pl 0))" "(def place (nth pl 0))" "place" "(filter \#(and (\= (% 1) (-> place \:country)) (.startsWith (% 0) (-> place \:city))) (keys airportmap))" "(filter \#(and (\= (% 1) (-> place \:country)) (.startsWith (% 0) (-> place \:city))) (keys airport-codes-map))" "(keys airport-codes-map)" " (filter \#(and (\= (% 1) (-> place \:country)) (.startsWith (% 0) (-> place \:city))) (keys airportmap))" " (filter \#(and (\= (% 1) (-> place \:country)) (.startsWith (% 0) (-> place \:city))) (keys airport-codes-map))" "place" "(filter \#(and (.startsWith (% 1) (-> place \:country)) (.startsWith (% 0) (-> place \:city))) (keys airportmap))" "(filter \#(and (.startsWith (% 1) (-> place \:country)) (.startsWith (% 0) (-> place \:city))) (keys airport-codes-map))" "\\n(nth airport-codes-map (first (filter \#(and (.startsWith (% 1) (-> place \:country)) (.startsWith (% 0) (-> place \:city))) (keys airport-codes-map))))" "\\n (first (filter \#(and (.startsWith (% 1) (-> place \:country)) (.startsWith (% 0) (-> place \:city))) (keys airport-codes-map)))" "\\n(airport-codes-map (first (filter \#(and (.startsWith (% 1) (-> place \:country)) (.startsWith (% 0) (-> place \:city))) (keys airport-codes-map))))" "(get-airport-code place)" "(map get-airport-code pl)" "(def places (map \:Place (request-events \\"avicii\\")))" "(map get-airport-code pl)" "(request-events \\"avicii\\")" "(map \:date (request-events \\"avicii\\"))" "(map get-date + (map \:date (request-events \\"avicii\\")))" "(map get-date - (map \:date (request-events \\"avicii\\")))" "(map get-date - ((map \:date (request-events \\"avicii\\"))))" "(map get-date + ((map \:date (request-events \\"avicii\\"))))" "(get-date + (map \:date (request-events \\"avicii\\")))" "(get-date + ((map \:date (request-events \\"avicii\\")) 0))" "(get-date + (nth (map \:date (request-events \\"avicii\\")) 0))" "(parse-date \\"yyyy-MM-dd\\" (nth (map \:date (request-events \\"avicii\\")) 0))" "(get-date + (parse-date \\"yyyy-MM-dd\\" (nth (map \:date (request-events \\"avicii\\")) 0)))" " (map parse-date \\"yyyy-MM-dd\\" (map \:date (request-events \\"avicii\\")))" " (apply map parse-date \\"yyyy-MM-dd\\" (map \:date (request-events \\"avicii\\")))" " (amap parse-date (map \:date (request-events \\"avicii\\")) \\"yyyy-MM-dd\\" )" " (map parse-date (map \:date (request-events \\"avicii\\")) \\"yyyy-MM-dd\\" )" "(map \:date (request-events \\"avicii\\")) \\"yyyy-MM-dd\\"" "(map \:date (request-events \\"avicii\\"))" "(def d  (map \:date (request-events \\"avicii\\")))" "d" "(map parse-date \\"yyyy-MM-dd\\" d)" "(map parse-date (\\"yyyy-MM-dd\\" \\"yyyy-MM-dd\\" \\"yyyy-MM-dd\\" \\"yyyy-MM-dd\\" \\"yyyy-MM-dd\\") d)" "(map parse-date (list \\"yyyy-MM-dd\\" \\"yyyy-MM-dd\\" \\"yyyy-MM-dd\\" \\"yyyy-MM-dd\\" \\"yyyy-MM-dd\\") d)" "(count d)" "(list (count d))" "(repeat \\"g\\")" "(.exit 0)" "(System/exit 0)" "(map \:date (request-events \\"avicii\\"))" "(repeat 5 \\"f\\")" "(map parse-date (repeat 5 \\"yyyy-MM-dd\\") (map \:date (request-events \\"avicii\\")))" "(map get-date (repeat 5 +)(map parse-date (repeat 5 \\"yyyy-MM-dd\\") (map \:date (request-events \\"avicii\\"))))" "(map format-date (map get-date (repeat 5 +)(map parse-date (repeat 5 \\"yyyy-MM-dd\\") (map \:date (request-events \\"avicii\\")))))" "(map format-date (repeat 5 \\"yyyy-MM-dd\\") (map get-date (repeat 5 +)(map parse-date (repeat 5 \\"yyyy-MM-dd\\") (map \:date (request-events \\"avicii\\")))))" "\\n(map format-date (repeat 5 \\"yyyy-MM-dd\\") (map get-date (repeat 5 -)(map parse-date (repeat 5 \\"yyyy-MM-dd\\") (map \:date (request-events \\"avicii\\")))))" "(let [response (request-events \\"avicii\\"), \\r\\n        places (map \:Place response), \\r\\n        dates (map \:date response),\\r\\n        destinations (map get-airport-code places),\\r\\n        departure_dates  (map format-date (repeat 5 \\"yyyy-MM-dd\\") (map get-date (repeat 5 -)(map parse-date (repeat 5 \\"yyyy-MM-dd\\") dates))),\\r\\n        arrival_dates  (map format-date (repeat 5 \\"yyyy-MM-dd\\") (map get-date (repeat 5 +)(map parse-date (repeat 5 \\"yyyy-MM-dd\\") dates)))]\\r\\n    (map send-flight-request (repeat 5 \\"BEG\\") destinations departure_dates arrival_dates)\\r\\n    )" "3" "body" "\\r\\n(defrecord Ticket [price url])\\r\\n(defrecord Performer [name genre image_url])\\r\\n(defrecord Place [name city country location])\\r\\n(defrecord Event [name performers date Place Ticket])\\r\\n(defrecord Flight [origin destination departure_date arrival_date carrier])\\r\\n(defrecord Trip [Flights price])\\r\\n(defrecord Result [Event Trip total_price total_distance])" "(def a (->Place \\"aaa\\" \\"belgrade\\" \\"serbia\\" {1.22 3.44}))" "(def b (->Place \\"b\\" \\"belgrade\\" \\"serbia\\" {1.22 3.44}))" "(def c (->Place \\"b\\" \\"belgrade\\" \\"serbia\\" {1.22 3.44}))" "(\= a b)" "(\= c b)" "(def locations (with-open [file (io/reader \\"airports.csv\\")]\\r\\n                (csv/read-csv (slurp file) \:separator \\\\, ,)\\r\\n                ))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(def locations (with-open [file (io/reader \\"airports.csv\\")]\\r\\n                (csv/read-csv (slurp file) \:separator \\\\, ,)\\r\\n                ))" "locations" "(def airports (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n                (csv/read-csv (slurp file) \:separator \\\\;,)\\r\\n                )\\r\\n  )" "airports" "(def airports (with-open [file (io/reader \\"airports.csv\\")]\\r\\n                (csv/read-csv (slurp file) \:separator \\\\,,)\\r\\n                )\\r\\n  )" "airports" "(def airport-codes-map \\r\\n  (into {} (for [i (range 0 (count airports))] \\r\\n             (let [elem (nth airports i), airport {  [(elem 1) (elem 2)] (elem 3)}]\\r\\n               airport\\r\\n               )\\r\\n             )\\r\\n        )\\r\\n  )" "airport-codes-map" "(def airport-codes-map \\r\\n  (into {} (for [i (range 0 (count airports))] \\r\\n             (let [elem (nth airports i), airport {  [(elem 2) (elem 3)] (elem 4)}]\\r\\n               airport\\r\\n               )\\r\\n             )\\r\\n        )\\r\\n  )" "airport-codes-map" "(airport-codes-map [\\"Barcelona\\" \\"Spain\\"])" "(airport-codes-map [\\"Aswan\\" \\"Egypt\\"])" "(def airports (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n                (csv/read-csv (slurp file) \:separator \\\\;,)\\r\\n                )\\r\\n  )" "(defn load-csv [file delimiter]\\r\\n  (with-open [file (io/reader file)]\\r\\n                (csv/read-csv (slurp file) \:separator delimiter ,)\\r\\n                )\\r\\n  )" "(load-csv \\"airports.csv\\" \\",\\")" "(load-csv \\"airports.csv\\" ',')" "(load-csv \\"airports.csv\\" \\\\,)" "(def airports (load-csv \\"IATAairCodes.csv\\" \\\\;))\\r\\n\\r\\n(def locations (load-csv \\"airports.csv\\" \\\\, ))\\r\\n\\r\\n(def airport-codes-map \\r\\n  (into {} (for [i (range 0 (count airports))] \\r\\n             (let [elem (nth airports i), airport {  [(elem 1) (elem 2)] (elem 3)}]\\r\\n               airport\\r\\n               )\\r\\n             )\\r\\n        )\\r\\n  )" "airport-codes-map" "(airport-codes-map [\\"Barcelona\\" \\"Spain\\"])" "airports" "(map (let [x y z d] [%] airports))" "(map [x y z d] airports)" "(map get [x y z d] airports)" "([x y z d] airports)" "(map (let [x y z d]) airports)" "(let [x y z d] (apply airports))" "(apply (let [x y h u]) airports)" "airport-codes-map" "(def location-codes-map \\r\\n  (into {} (for [i (range 0 (count locations))] \\r\\n             (let [elem (nth locations i), location {  [(elem 1) (elem 2)] (elem 3)}]\\r\\n               location\\r\\n               )\\r\\n             )\\r\\n        )\\r\\n  )" "location-codes-map" "(def location-codes-map \\r\\n  (into {} (for [i (range 0 (count locations))] \\r\\n             (let [elem (nth locations i), location { (elem 4) (list (elem 6) (elem 7))}]\\r\\n               location\\r\\n               )\\r\\n             )\\r\\n        )\\r\\n  )" "location-codes-map" "(location-codes-map \\"BCN\\")" "(location-codes-map \\"BEG\\")" "(location-codes-map \\"lax\\")" "(location-codes-map \\"LAX\\")" "(location-codes-map \\"LAS\\")" "airport-codes-map" "(use 'concertescape.core)" "-main" "(-main)" "airport-codes-map" "(into (sorted-map) (for [i (range 0 (count locations))] \\r\\n                (let [elem (nth locations i), location { (elem 4) (list (elem 6) (elem 7))}]\\r\\n                  location\\r\\n                  )))" " (into (sorted-map) (for [i (range 0 (count airports))] \\r\\n             (let [elem (nth airports i), airport {  [(elem 1) (elem 2)] (elem 3)}]\\r\\n               airport\\r\\n               )\\r\\n             )\\r\\n        )" "airport-codes-map" "(rest airport-codes-map\\n      )" "(rest(for [i (range 0 (count airports))] \\r\\n                 (let [elem (nth airports i), airport {  [(elem 1) (elem 2)] (elem 3)}]\\r\\n                   airport\\r\\n                   )\\r\\n                 ))" "airport-codes-map" "1" "2" "3" "airport-codes-map" "(airport-codes-map [\\"Adana\\" \\"Turkey\\"])" "(airport-codes-map \\"[Adana\\" \\"Turkey]\\")" "(into [] \\"['Adda' 'da']\\")" "(clojure.main)" "(-main)" "(use 'concertescape.core)" "(-main)" " (let [response (request-events \\"avicii\\"), \\r\\n        places (map \:Place response), \\r\\n        dates (map \:date response),\\r\\n        destinations (map get-airport-code places),\\r\\n        departure_dates  (map format-date (repeat 5 \\"yyyy-MM-dd\\") (map get-date (repeat 5 -)(map parse-date (repeat 5 \\"yyyy-MM-dd\\") dates))),\\r\\n        arrival_dates  (map format-date (repeat 5 \\"yyyy-MM-dd\\") (map get-date (repeat 5 +)(map parse-date (repeat 5 \\"yyyy-MM-dd\\") dates)))]\\r\\n    (map send-flight-request (repeat 5 location) destinations departure_dates arrival_dates)\\r\\n    )" " (let [response (request-events \\"avicii\\"), \\r\\n        places (map \:Place response), \\r\\n        dates (map \:date response),\\r\\n        destinations (map get-airport-code places),\\r\\n        departure_dates  (map format-date (repeat 5 \\"yyyy-MM-dd\\") (map get-date (repeat 5 -)(map parse-date (repeat 5 \\"yyyy-MM-dd\\") dates))),\\r\\n        arrival_dates  (map format-date (repeat 5 \\"yyyy-MM-dd\\") (map get-date (repeat 5 +)(map parse-date (repeat 5 \\"yyyy-MM-dd\\") dates)))]\\r\\n    (map send-flight-request (repeat 5 \\"beg\\") destinations departure_dates arrival_dates)\\n    \\r\\n    )" " (let [response (request-events \\"avicii\\"), \\r\\n        places (map \:Place response), \\r\\n        dates (map \:date response),\\r\\n        destinations (map get-airport-code places),\\r\\n        departure_dates  (map format-date (repeat 5 \\"yyyy-MM-dd\\") (map get-date (repeat 5 -)(map parse-date (repeat 5 \\"yyyy-MM-dd\\") dates))),\\r\\n        arrival_dates  (map format-date (repeat 5 \\"yyyy-MM-dd\\") (map get-date (repeat 5 +)(map parse-date (repeat 5 \\"yyyy-MM-dd\\") dates)))]\\r\\n   (map process-flight-response (map send-flight-request (repeat 5 \\"beg\\") destinations departure_dates arrival_dates))\\n    \\r\\n    )" " (def response (request-events \\"avicii\\"))" "(def places (map \:Place response))" "(def dates (map \:date response))" "(def  destinations (map get-airport-code places))" "(def departure_dates  (map format-date (repeat 5 \\"yyyy-MM-dd\\") (map get-date (repeat 5 -)(map parse-date (repeat 5 \\"yyyy-MM-dd\\") dates))),)" "(def arrival_dates  (map format-date (repeat 5 \\"yyyy-MM-dd\\") (map get-date (repeat 5 +)(map parse-date (repeat 5 \\"yyyy-MM-dd\\") dates)))]\\r\\n   )" "(def arrival_dates  (map format-date (repeat 5 \\"yyyy-MM-dd\\") (map get-date (repeat 5 +)(map parse-date (repeat 5 \\"yyyy-MM-dd\\") dates)))\\r\\n   )" "(def flights (map send-flight-request (repeat 5 location) destinations departure_dates arrival_dates))" "(def flights (map send-flight-request (repeat 5 \\"BEG\\") destinations departure_dates arrival_dates))" "flights" "(first flights)" "(nth flights 4)" "(map process-flight-response flights)" "(process-flight-response (send-flight-request \\"BEG\\" \\"BCN\\" \\"2012-06-03\\" \\"2015-06-07\\"))" "(process-flight-response (send-flight-request \\"BEG\\" \\"BCN\\" \\"2015-06-03\\" \\"2015-06-07\\"))" "(process-flight-response (send-flight-request \\"BEG\\" \\"LAS\\" \\"2012-06-03\\" \\"2015-06-07\\"))" "(process-flight-response (send-flight-request \\"BEG\\" \\"LAS\\" \\"2015-06-03\\" \\"2015-06-07\\"))" "(send-flight-request \\"BEG\\" \\"LAS\\" \\"2015-06-03\\" \\"2015-06-07\\")" "(def body (send-flight-request \\"BEG\\" \\"LAS\\" \\"2015-06-03\\" \\"2015-06-07\\"))" "(def tripOption  (first (\:tripOption (\:trips body))))" "(def  price (\:saleTotal tripOption))" "(def  fare_carriers  (\:fare (first (\:pricing tripOption))))" "(def  fares (\:slice tripOption))" "(def  data (\:data (\:trips body)))" "(def  carriers (\:carrier data))" "(def citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data))))" "(def  carriermap (zipmap (map \:code carriers) (map \:name carriers)))" "citymap" " (map \:code (\:airport data))" "(map \:name (\:city data))" "body" "(def airs (\:airport data))" "\\n(def cits  (\:city data) \\n  )" "airs" "cits" "(map \:code cits)" "(map \:city airs)" "(defn nadji [grad] (filter \#(\= (\:code grad) (\:city %0)) (map \:code airs)))" " (filter \#(\= \\"BEG\\" (\:city %0)) (map \:code airs))" " (filter (\= \\"BEG\\" (\:city %0)) (map \:code airs))" " (filter \#(\= \\"BEG\\" (\:city % 0)) (map \:code airs))" " (filter \#(\= \\"BEG\\" (\:city airs)) (map \:code airs))" " (filter \#(\= \\"BEG\\" (\:city %1)) (map \:code airs))" " (filter \#(\= \\"BEG\\" (\:city %2)) (map \:code airs))" " (filter \#(\= \\"BEG\\" (\:city %0)) (map \:city airs))" " (filter \#(\= \\"BEG\\" (\:city % 0)) (map \:city airs))" " (filter \#(\= \\"BEG\\" (\:city % 0))  airs)" " (filter \#(\= \\"BEG\\" (\:city % 0)) (\:code airs))" " (filter \#(\= \\"BEG\\" (\:city % 0))  airs)" " (filter \#(\= \\"BEG\\" (\:city % 1))  airs)" "(defn nadji [grad] (filter \#(\= grad (\:city % 1))  airs))" "(map nadji (\:code cits))" " (\:code cits)" "cits" "(map nadji (map \:code cits))" "(defn nadji [grad] (\:code (filter \#(\= grad (\:city % 1))  airs)))" "(map nadji (map \:code cits))" "(defn nadji [grad] (\:code (first (filter \#(\= grad (\:city % 1))  airs))))" "(map nadji (map \:code cits))" "cits" "(map (fn [city] (\:code (first (filter \#(\= city (\:city % 1))  airs)))) (map \:code cits))" "(map \#(\:code (first (filter \#(\= city (\:city % 1))  airs))) (map \:code cits))" "(map \#((\:code (first (filter \#(\= city (\:city % 1))  airs)))) (map \:code cits))" "(map (fn [city] (\:code (first (filter \#(\= city (\:city % 1))  airs)))) (map \:code cits))" "(map \#(\:code (first (filter \#(\= % 0 (\:city % 1))  airs))) (map \:code cits))" "(map (fn [city] (\:code (first (filter \#(\= city (\:city % 1))  airs)))) (map \:code cits))" "cits" "  citymap (zipmap (map (fn [city] (\:code (first (filter \#(\= city (\:city % 1))  (\:airport data))))) (map \:code (\:city data))) (map \:name (\:city data)))" "citymap" "(def   citymap (zipmap (map (fn [city] (\:code (first (filter \#(\= city (\:city % 1))  (\:airport data))))) (map \:code (\:city data))) (map \:name (\:city data)))\\r\\n       )" "citymap" "body" "(process-flight-response body)" "(defn process-flight-response [body]\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption),\\r\\n        data (\:data (\:trips body)),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map (fn [city] (\:code (first (filter \#(\= city (\:city % 1))  (\:airport data))))) (map \:code (\:city data))) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (format-date \\"yyyy-MM-dd 'at' hh\:mm\\" (parse-date \\"yyyy-MM-dd'T'hh\:mm\\" (\:departureTime connection))) (format-date \\"yyyy-MM-dd 'at' hh\:mm\\" (parse-date \\"yyyy-MM-dd'T'hh\:mm\\" (\:arrivalTime connection))) car)\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(defn process-flight-response1 [body]\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption),\\r\\n        data (\:data (\:trips body)),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map (fn [city] (\:code (first (filter \#(\= city (\:city % 1))  (\:airport data))))) (map \:code (\:city data))) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (format-date \\"yyyy-MM-dd 'at' hh\:mm\\" (parse-date \\"yyyy-MM-dd'T'hh\:mm\\" (\:departureTime connection))) (format-date \\"yyyy-MM-dd 'at' hh\:mm\\" (parse-date \\"yyyy-MM-dd'T'hh\:mm\\" (\:arrivalTime connection))) car)\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response1 body)" "citymap" "carriermap" "(def connections (\:segment (nth fares 0)))" "connections" " connection (first (\:leg (nth connections 0)))" "(def connection (first (\:leg (nth connections 0))))" "connection" "(or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection)))" "(def carrier (nth fare_carriers 0))" "(or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection)))" "(citymap (\:origin connection))" "(citymap (\:destination connection))" "(def connection (first (\:leg (nth connections 1))))" "(citymap (\:destination connection))" "(citymap (\:origin connection))" "(use 'concertescape.core)" "(def body (send-flight-request \\"BEG\\" \\"LAS\\" \\"2015-06-03\\" \\"2015-06-07\\"))" "body" "tripOption  (first (\:tripOption (\:trips body)))" " price (\:saleTotal tripOption)" "(def price (\:saleTotal tripOption))" "(def tripOption  (first (\:tripOption (\:trips body))))" "(def price (\:saleTotal tripOption))" "(def fare_carriers  (\:fare (first (\:pricing tripOption))))" "(def fares (\:slice tripOption))" "(def  data (\:data (\:trips body)))" "(def   carriers (\:carrier data))" "(def   citymap (zipmap (map (fn [city] (\:code (first (filter \#(\= city (\:city % 1))  (\:airport data))))) (map \:code (\:city data))) (map \:name (\:city data)))\\r\\n       )" "(def  carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        )" "price" "fare_carriers" "(process-flight-response body)" "(use 'concertescape.core)" "(def body (send-flight-request \\"BEG\\" \\"LAS\\" \\"2015-06-03\\" \\"2015-06-07\\"))" "(process-flight-response body)" "(use 'concertescape.core)" "(process-flight-response (send-flight-request \\"BEG\\" \\"LAS\\" \\"2015-06-03\\" \\"2015-06-07\\"))" "(use 'concertescape.core)" "(-main)" "let [response (request-events \\"avicii\\"), \\r\\n        places (map \:Place response), \\r\\n        dates (map \:date response),\\r\\n        destinations (map get-airport-code places),\\r\\n        departure_dates  (map format-date (repeat 5 \\"yyyy-MM-dd\\") (map get-date (repeat 5 -)(map parse-date (repeat 5 \\"yyyy-MM-dd\\") dates))),\\r\\n        arrival_dates  (map format-date (repeat 5 \\"yyyy-MM-dd\\") (map get-date (repeat 5 +)(map parse-date (repeat 5 \\"yyyy-MM-dd\\") dates)))]\\r\\n    (map process-flight-response (map send-flight-request (repeat 5 \\"BEG\\") destinations departure_dates arrival_dates))" "(let [response (request-events \\"avicii\\"), \\r\\n        places (map \:Place response), \\r\\n        dates (map \:date response),\\r\\n        destinations (map get-airport-code places),\\r\\n        departure_dates  (map format-date (repeat 5 \\"yyyy-MM-dd\\") (map get-date (repeat 5 -)(map parse-date (repeat 5 \\"yyyy-MM-dd\\") dates))),\\r\\n        arrival_dates  (map format-date (repeat 5 \\"yyyy-MM-dd\\") (map get-date (repeat 5 +)(map parse-date (repeat 5 \\"yyyy-MM-dd\\") dates)))]\\r\\n    (map process-flight-response (map send-flight-request (repeat 5 \\"BEG\\") destinations departure_dates arrival_dates))\\r\\n    )" "(send-flight-request \\"BEG\\" \\"LAS\\" \\"2015-04-14\\" \\"2015-04-16\\")" "(send-flight-request \\"BEG\\" \\"LAS\\" \\"2015-05-14\\" \\"2015-05-16\\")" "(def body (send-flight-request \\"BEG\\" \\"LAS\\" \\"2015-05-14\\" \\"2015-05-16\\"))" "body" "(def tripOption  (first (\:tripOption (\:trips body))))" "(def  price (\:saleTotal tripOption))" "(def  fare_carriers  (\:fare (first (\:pricing tripOption))))" "(def    fares (\:slice tripOption))" "(def   data (\:data (\:trips body)))" "(def  carriers (\:carrier data))" "(def   citymap (zipmap (map (fn [city] (\:code (first (filter \#(\= city (\:city % 1))  (\:airport data))))) (map \:code (\:city data))) (map \:name (\:city data)))\\r\\n        )" "(def carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        )" "price" "fare_carriers" "carriers" "citymap" "carriermap" "fares" "(def connections (\:segment (nth fares 0)))" "connections" "fare_carriers" "(first connections)" "(last connections)" "(process-flight-response body)" "(top-level-fun \\"avicii\\" \\"BEG\\")" "(let [map {}]\\n  (comp (conj map {\:A \\"A\\"})\\n  (conj map {\:B \\"B\\"})\\n        )\\n  )" "map" "(let [map {}]\\n  (comp (conj map {\:A \\"A\\"})\\n  (conj map {\:B \\"B\\"})\\n        )map\\n  )" "(let [map (atom {})]\\n  (comp (swap\! map conj {\:A \\"A\\"})\\n  (swap\! map conj {\:B \\"B\\"})\\n        )map\\n  )" "(let [map (atom {})]\\n  (comp (swap\! map conj {\:A \\"A\\"})\\n  (swap\! map conj {\:B \\"B\\"})\\n        )@map\\n  )" "(let [map (atom {\:c \\"c\\"})]\\n  (comp (swap\! map conj {\:A \\"A\\"})\\n  (swap\! map conj {\:B \\"B\\"})\\n        )@map\\n  )" "@map" "map" "\\r\\n(defn process-flight-response [body]\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption),\\r\\n        data (\:data (\:trips body)),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map (fn [city] (\:code (first (filter \#(\= city (\:city % 1))  (\:airport data))))) (map \:code (\:city data))) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        mapa (atom ({\:price price}))] \\r\\n     (swap\! mapa conj {\:flight \\r\\n                       (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n       (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), \\r\\n             connection (first (\:leg (nth connections j)))\\r\\n             first_connection (first (\:leg (first connections)))\\r\\n             last_connection (first (\:leg (last connections)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin first_connection)) (\= (\:destination carrier) (\:destination last_connection))) \\r\\n           (let [car (carriermap (\:carrier carrier))] \\r\\n                (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (format-date \\"yyyy-MM-dd 'at' hh\:mm\\" (parse-date \\"yyyy-MM-dd'T'hh\:mm\\" (\:departureTime connection))) (format-date \\"yyyy-MM-dd 'at' hh\:mm\\" (parse-date \\"yyyy-MM-dd'T'hh\:mm\\" (\:arrivalTime connection))) car)\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n     })                  \\r\\n    ))" "\\r\\n(defn process-flight-response1 [body]\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption),\\r\\n        data (\:data (\:trips body)),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map (fn [city] (\:code (first (filter \#(\= city (\:city % 1))  (\:airport data))))) (map \:code (\:city data))) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        mapa (atom ({\:price price}))] \\r\\n     (swap\! mapa conj {\:flight \\r\\n                       (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n       (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), \\r\\n             connection (first (\:leg (nth connections j)))\\r\\n             first_connection (first (\:leg (first connections)))\\r\\n             last_connection (first (\:leg (last connections)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin first_connection)) (\= (\:destination carrier) (\:destination last_connection))) \\r\\n           (let [car (carriermap (\:carrier carrier))] \\r\\n                (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (format-date \\"yyyy-MM-dd 'at' hh\:mm\\" (parse-date \\"yyyy-MM-dd'T'hh\:mm\\" (\:departureTime connection))) (format-date \\"yyyy-MM-dd 'at' hh\:mm\\" (parse-date \\"yyyy-MM-dd'T'hh\:mm\\" (\:arrivalTime connection))) car)\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n     })                  \\r\\n    ))" "(process-flight-response1 body)" "(process-flight-response body)" "(request-events \\"avicii\\")" "location-codes-map" "(location-codes-map \\"ADA\\")" "(location-codes-map \\"LAS\\")" "((location-codes-map \\"LAS\\") 1)" "(first (location-codes-map \\"LAS\\"))" "(/ 4 2)" "(use 'java.lang.Math)" "(import 'java.lang.Math)" "(require 'java.lang.Math)" "(sqrt 9)" "(java.lang.Math/sqrt 9)" "(import 'java.lang.Math)" "(sqrt 9)" "(Math/sqrt 9)" "(defn calculate-distance [a b]\\r\\n  (let [dlon (- (first a) (first b)),\\r\\n        dlat (- (last a) (last b))\\r\\n        res (+ (Math/pow (Math/sin (/ dlat 2))) (* (Math/sin (last a)) (* (Math/cos  (last b)) (Math/pow (Math/sin (/ dlon 2)) 2))))]\\r\\n    (* (* (Math/atan2 (Math/sqrt res) (Math/sqrt (- 1 res))) 2) 6373)\\r\\n    )\\r\\n  )" "(import 'java.lang.Math)" "(defn calculate-distance [a b]\\r\\n  (let [dlon (- (first a) (first b)),\\r\\n        dlat (- (last a) (last b))\\r\\n        res (+ (Math/pow (Math/sin (/ dlat 2))) (* (Math/sin (last a)) (* (Math/cos  (last b)) (Math/pow (Math/sin (/ dlon 2)) 2))))]\\r\\n    (* (* (Math/atan2 (Math/sqrt res) (Math/sqrt (- 1 res))) 2) 6373)\\r\\n    )\\r\\n  )" "(defn calculate-distance [a b]\\r\\n  (let [dlon (- (first a) (first b)),\\r\\n        dlat (- (last a) (last b))\\r\\n        res (+ (java.lang.Math/pow (Math/sin (/ dlat 2))) (* (Math/sin (last a)) (* (Math/cos  (last b)) (Math/pow (Math/sin (/ dlon 2)) 2))))]\\r\\n    (* (* (Math/atan2 (Math/sqrt res) (Math/sqrt (- 1 res))) 2) 6373)\\r\\n    )\\r\\n  )" "(defn calculate-distance [a b]\\r\\n  (let [dlon (- (first a) (first b)),\\r\\n        dlat (- (last a) (last b))\\r\\n        res (+ (java.lang.Math/pow (java.lang.Math/sin (/ dlat 2))) (* (java.lang.Math/cos (last a)) (* (java.lang.Math/cos  (last b)) (java.lang.Math/pow (java.lang.Math/sin (/ dlon 2)) 2))))]\\r\\n    (* (* (java.lang.Math/atan2 (java.lang.Math/sqrt res) (java.lang.Math/sqrt (- 1 res))) 2) 6373)\\r\\n    )\\r\\n  )" "(java.lang.Math/pow 2 3)" "(defn calculate-distance [a b]\\r\\n  (let [dlon (- (first a) (first b)),\\r\\n        dlat (- (last a) (last b))\\r\\n        res (+ (java.lang.Math/pow (java.lang.Math/sin (/ dlat 2))) (* (java.lang.Math/cos (last a)) (* (java.lang.Math/cos  (last b)) (java.lang.Math/pow (java.lang.Math/sin (/ dlon 2)) 2))))]\\r\\n    (* (* (java.lang.Math/atan2 (java.lang.Math/sqrt res) (java.lang.Math/sqrt (- 1 res))) 2) 6373)\\r\\n    )\\r\\n  )" "(java.lang.Math/atan2 (java.lang.Math/sqrt 2) (java.lang.Math/sqrt (- 1 2)))" "\\n(+ (java.lang.Math/pow (java.lang.Math/sin (/ 1 2))) (* (java.lang.Math/cos 2) (* (java.lang.Math/cos  3) (java.lang.Math/pow (java.lang.Math/sin (/ 1 2)) 2))))" "(defn calculate-distance [a b]\\r\\n  (let [dlon (- (first a) (first b)),\\r\\n        dlat (- (last a) (last b))\\r\\n        res (+ (java.lang.Math/pow (java.lang.Math/sin (/ dlat 2)) 2) (* (java.lang.Math/cos (last a)) (* (java.lang.Math/cos  (last b)) (java.lang.Math/pow (java.lang.Math/sin (/ dlon 2)) 2))))]\\r\\n    (* (* (java.lang.Math/atan2 (java.lang.Math/sqrt res) (java.lang.Math/sqrt (- 1 res))) 2) 6373)\\r\\n    )\\r\\n  )" "(calculate-distance (38.898556 -77.037852) (38.897147 -77.043934))" "(first (location-codes-map \\"LAS\\"))" "(last (2 3))" " (2 3)" "(list (2 3))" "(map java.lang.Double/parseDouble (list \\"2.3\\" \\"3.4\\"))" "(java.lang.Double/parseDouble \\"2.3\\")" "(map java.lang.Double/parseDouble  [\\"2.3\\" \\"3.4\\"])" "(map \#(java.lang.Double/parseDouble %) (list \\"2.3\\" \\"3.4\\"))" "(first (map \#(java.lang.Double/parseDouble %) (list \\"2.3\\" \\"3.4\\")))" "\\n(calculate-distance (map \#(java.lang.Double/parseDouble %) (list \\"38.898556\\" \\"-77.037852\\")) (map \#(java.lang.Double/parseDouble %) (list 38.897147 -77.043934)))" "\\n(calculate-distance (map \#(java.lang.Double/parseDouble %) (list \\"38.898556\\" \\"-77.037852\\")) (map \#(java.lang.Double/parseDouble %) (list \\"38.897147\\" \\"-77.043934\\")))" "(def a (map \#(java.lang.Double/parseDouble %) (list \\"38.898556\\" \\"-77.037852\\")))" "a" "(def b (map \#(java.lang.Double/parseDouble %) (list \\"38.897147\\" \\"-77.043934\\")))" "(let [dlon (- (first a) (first b)),\\r\\n        dlat (- (last a) (last b))\\r\\n        res (+ (java.lang.Math/pow (java.lang.Math/sin (/ dlat 2)) 2) (* (java.lang.Math/cos (last a)) (* (java.lang.Math/cos  (last b)) (java.lang.Math/pow (java.lang.Math/sin (/ dlon 2)) 2))))]\\r\\n    (* (* (java.lang.Math/atan2 (java.lang.Math/sqrt res) (java.lang.Math/sqrt (- 1 res))) 2) 6373)\\r\\n    )" "a" "b" "(java.lang.Math/pow 2 3)" "\\n(calculate-distance (map \#(java.lang.Double/parseDouble %) (list \\"-77.037852\\" \\"38.898556\\")) (map \#(java.lang.Double/parseDouble %) (list \\"-77.043934\\" \\"38.897147\\")))" "\\n(calculate-distance (map \#(java.lang.Double/parseDouble %) (list \\"38.898556\\" \\"-77.037852\\")) (map \#(java.lang.Double/parseDouble %) (list \\"38.897147\\" \\"-77.043934\\")))" "(map \#(java.lang.Double/parseDouble %) (list \\"38.898556\\" \\"-77.037852\\"))" "(defn calculate-distance [a b]\\r\\n  (let [dlon (- (last a) (last b)),\\r\\n        dlat (- (first a) (first b))\\r\\n        res (+ \\r\\n              (java.lang.Math/pow \\r\\n                (java.lang.Math/sin \\r\\n                  (/ dlat 2)\\r\\n                  ) 2\\r\\n                ) \\r\\n              (* \\r\\n                (java.lang.Math/cos (first a)) \\r\\n                (* \\r\\n                  (java.lang.Math/cos  (first b)) \\r\\n                  (java.lang.Math/pow \\r\\n                    (java.lang.Math/sin \\r\\n                      (/ dlon 2)\\r\\n                      ) 2)\\r\\n                  )\\r\\n                )\\r\\n              )]\\r\\n    (* (* (java.lang.Math/atan2 (java.lang.Math/sqrt res) (java.lang.Math/sqrt (- 1 res))) 2) 6373)\\r\\n    )\\r\\n  )" "\\n(calculate-distance (map \#(java.lang.Double/parseDouble %) (list \\"38.898556\\" \\"-77.037852\\")) (map \#(java.lang.Double/parseDouble %) (list \\"38.897147\\" \\"-77.043934\\")))" "(java.lang.Math/sin 2)" "(java.lang.Math/sin 30)" "(java.lang.Math/sin 90)" "(defn calculate-distance [a b]\\r\\n  (defn deg-to-rad [x]\\r\\n    (* (/ Math.PI 180) x)\\r\\n    )\\r\\n  (let [dlon (- (last a) (last b)),\\r\\n        dlat (- (first a) (first b))\\r\\n        res (+ \\r\\n              (java.lang.Math/pow \\r\\n                (java.lang.Math/sin \\r\\n                  (/ dlat 2)\\r\\n                  ) 2\\r\\n                ) \\r\\n              (* \\r\\n                (java.lang.Math/cos (first a)) \\r\\n                (* \\r\\n                  (java.lang.Math/cos  (first b)) \\r\\n                  (java.lang.Math/pow \\r\\n                    (java.lang.Math/sin \\r\\n                      (/ dlon 2)\\r\\n                      ) 2)\\r\\n                  )\\r\\n                )\\r\\n              )]\\r\\n    (* (* (java.lang.Math/atan2 (java.lang.Math/sqrt res) (java.lang.Math/sqrt (- 1 res))) 2) 6373)\\r\\n    )\\r\\n  )" "(defn calculate-distance [a b]\\r\\n  (defn deg-to-rad [x]\\r\\n    (* (/ java.lang.Math/PI 180) x)\\r\\n    )\\r\\n  (let [dlon (- (last a) (last b)),\\r\\n        dlat (- (first a) (first b))\\r\\n        res (+ \\r\\n              (java.lang.Math/pow \\r\\n                (java.lang.Math/sin \\r\\n                  (/ dlat 2)\\r\\n                  ) 2\\r\\n                ) \\r\\n              (* \\r\\n                (java.lang.Math/cos (first a)) \\r\\n                (* \\r\\n                  (java.lang.Math/cos  (first b)) \\r\\n                  (java.lang.Math/pow \\r\\n                    (java.lang.Math/sin \\r\\n                      (/ dlon 2)\\r\\n                      ) 2)\\r\\n                  )\\r\\n                )\\r\\n              )]\\r\\n    (* (* (java.lang.Math/atan2 (java.lang.Math/sqrt res) (java.lang.Math/sqrt (- 1 res))) 2) 6373)\\r\\n    )\\r\\n  )" "(defn calculate-distance [a b]\\r\\n  (defn deg-to-rad [x]\\r\\n    (* (/ java.lang.Math/PI 180) x)\\r\\n    )\\r\\n  (let [dlon (- (deg-to-rad(last a)) (deg-to-rad(last b))),\\r\\n        dlat (- (deg-to-rad(first a)) (deg-to-rad(first b)))\\r\\n        res (+ \\r\\n              (java.lang.Math/pow \\r\\n                (java.lang.Math/sin \\r\\n                  (/ dlat 2)\\r\\n                  ) 2\\r\\n                ) \\r\\n              (* \\r\\n                (java.lang.Math/cos (deg-to-rad(first a))) \\r\\n                (* \\r\\n                  (java.lang.Math/cos (deg-to-rad(first b))) \\r\\n                  (java.lang.Math/pow \\r\\n                    (java.lang.Math/sin \\r\\n                      (/ dlon 2)\\r\\n                      ) 2)\\r\\n                  )\\r\\n                )\\r\\n              )]\\r\\n    (* (* (java.lang.Math/atan2 (java.lang.Math/sqrt res) (java.lang.Math/sqrt (- 1 res))) 2) 6373)\\r\\n    )\\r\\n  )" "\\n(calculate-distance (map \#(java.lang.Double/parseDouble %) (list \\"38.898556\\" \\"-77.037852\\")) (map \#(java.lang.Double/parseDouble %) (list \\"38.897147\\" \\"-77.043934\\")))" "(map list (1 2 3) (3 4 5))" "(map list (list 1 2 3) (list 3 4 5))" "(top-level-fun \\"avicii\\" \\"BEG\\")" "(def result (top-level-fun \\"avicii\\" \\"BEG\\"))" "(map flatten result)" "(flatten result)" "(flatten (flatten result))" "(nth result 0)" "(nth (nth result 0) 0)" "(merge {\:event (nth (nth result 0) 0)} (nth (nth result 0) 1))" "(send-flight-request \\"BEG\\" \\"MUC\\" \\"2015-05-20\\" \\"2015-05-23\\")" "(send-flight-request \\"BEG\\" \\"LAS\\" \\"2015-05-20\\" \\"2015-05-23\\")" "(send-flight-request \\"BEG\\" \\"MUC\\" \\"2015-05-20\\" \\"2015-05-23\\")" "(map merge {\:event (nth (nth result 0) 0)} (nth (nth result 0) 1))" "(map \#(nth result %) (range (count result)))" "(map \#(nth (map \#(nth result %) (range (count result))) %) (range (count result)))" "(map \#(nth (map \#(nth result %1) (range (count result))) %2) (range (count result)))" "(map \#(nth (map (nth result %1) (range (count result))) %2) (range (count result)))" "(map (fn [i] (nth (map (fn [j] (nth result j)) (range (count result))) i)) (range (count result)))" " (map merge {\:event (nth (nth result 0) 0)} (nth (nth result 0) 1))" "(flatten (merge {\:event (nth (nth result 0) 0)} (nth (nth result 0) 1)))" " (map merge {\:event (nth (nth result 0) 0)} (nth (nth result 0) 0))" "(merge {\:event (nth (nth result 0) 0)} (nth (nth result 0) 1))" " (nth result 0)" " (for [i (range (count result))]\\r\\n      (let [res (nth a 0), event (nth res 0), trip (nth res 1)]\\r\\n        (merge {\:event event} trip)\\r\\n        )\\r\\n      )" " (for [i (range (count result))]\\r\\n      (let [res (nth result 0), event (nth res 0), trip (nth res 1)]\\r\\n        (merge {\:event event} trip)\\r\\n        )\\r\\n      )" " (for [i (range (count result))]\\r\\n      (let [res (nth result i), event (nth res 0), trip (nth res 1)]\\r\\n        (merge {\:event event} trip)\\r\\n        )\\r\\n      )" "(subs \\"CLOjure\\" 3)" "(+ (java.lang.Double/parseDouble \\"24\\") (java.lang.Double/parseDouble \\"91326\\"))" "(def rez (merge {\:event (nth (nth result 0) 0)} (nth (nth result 0) 1)))" "rez" "(rez \:price)" "((rez \:event) \:Ticket)" "(-> (rez \:event) \:Ticket)" "(-> (-> (rez \:event) \:Ticket) \:price)" " (for [i (range (count result))]\\r\\n      (let [res (nth result 0), event (nth res 0), trip (nth res 1), rez (merge {\:event event} trip)]\\r\\n        (+ (java.lang.Double/parseDouble (subs (rez \:price) 3)) (java.lang.Double/parseDouble  (-> (-> (rez \:event) \:Ticket) \:price)))\\r\\n       \\r\\n        )\\r\\n      )" " (for [i (range (count result))]\\r\\n      (let [res (nth result 0), event (nth res 0), trip (nth res 1), rez (merge {\:event event} trip)]\\r\\n        (+ (java.lang.Double/parseDouble (subs (rez \:price) 3)) (-> (-> (rez \:event) \:Ticket) \:price))\\r\\n       \\r\\n        )\\r\\n      )" " (for [i (range (count result))]\\r\\n      (let [res (nth result i), event (nth res 0), trip (nth res 1), rez (merge {\:event event} trip)]\\r\\n        (+ (java.lang.Double/parseDouble (subs (rez \:price) 3)) (-> (-> (rez \:event) \:Ticket) \:price))\\r\\n       \\r\\n        )\\r\\n      )" " (for [i (range (count result))]\\r\\n      (let [res (nth result i), event (nth res 0), trip (nth res 1), rez (merge {\:event event} trip)]\\r\\n        (merge {\:total_price (+ (java.lang.Double/parseDouble (subs (rez \:price) 3)) (java.lang.Double/parseDouble  (-> (-> (rez \:event) \:Ticket) \:price)))} rez)\\r\\n       \\r\\n       \\r\\n        )\\r\\n      )" " (for [i (range (count result))]\\r\\n      (let [res (nth result i), event (nth res 0), trip (nth res 1), rez (merge {\:event event} trip)]\\r\\n        (merge {\:total_price (+ (java.lang.Double/parseDouble (subs (rez \:price) 3)) (-> (-> (rez \:event) \:Ticket) \:price))} rez)\\r\\n       \\r\\n       \\r\\n        )\\r\\n      )"]
eclipse.preferences.version=1
