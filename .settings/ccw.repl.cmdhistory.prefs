cmdhistory=["   (def requestFlight (generate-string { \:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:payload requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"}\\r\\n                 ; \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )" "(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "  (def requestFlight (generate-string { \:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body {\:payload requestFlight}\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )" "(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "(def requestFlight (generate-string { \:payload {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )" "(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" " (def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )" "(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "(request-flight \\"\\" \\"\\" \\"\\" \\"\\")" "(request-flights \\"\\" \\"\\" \\"\\" \\"\\")" " (def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )" "(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "(def r (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options))" "r" "(request-flights \\"\\" \\"\\" \\"\\" \\"\\")" "(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                options)" "(def r (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                options))" "(\:body r)" "(request-flights \\"\\" \\"\\" \\"\\" \\"\\")" "(def r (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                options))" "(def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  )" "(def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )" "    (let [response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                options)\\r\\n          ]\\r\\n      \\r\\n      \:body response)" "(def r response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                options))" "(def r (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                options))" "(\:body r)" "(parse-string (\:body r))" "(def i (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0,fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                options))" "(def i (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                options))" " (parse-string (\:body i))" "(def body (parse-string (\:body i)))" "(def relevantInfo {\:price (\\"tripOption\\" (\\"trips\\" body))})" "(def relevantInfo {\:price (\\"trips\\" body)})" "(def relevantInfo {\:price (\:trips body)})" "relevantInfo" "body" "(def relevantInfo {\:price (\\"trips\\" body)})" "(def body (parse-string (\:body i) true))" "body" "(def relevantInfo {\:price (\:trips body)})" "relevantInfo" "(def relevantInfo {\:price (\:tripOption (\:trips body))})" "relevantInfo" "(def relevantInfo {\:price (first (\:tripOption (\:trips body)))})" "relevantInfo" "(def relevantInfo {\:price (first (\:saleTotal (\:price (\:tripOption (\:trips body)))))})" "relevantInfo" "(def relevantInfo {\:price  (\:saleTotal (\:price (first(\:tripOption (\:trips body)))))})" "relevantInfo" "(def relevantInfo {\:price (first (\:tripOption (\:trips body)))})" "relevantInfo" "(def relevantInfo {\:price  (\:saleTotal (\:price (first(\:tripOption (\:trips body)))))})" "relevantInfo" "(def relevantInfo {\:price (first (\:tripOption (\:trips body)))})" "relevantInfo" "(def relevantInfo {\:price (\:price (first (\:tripOption (\:trips body))))})" "relevantInfo" "(def relevantInfo {\:pricee (\:price (first (\:tripOption (\:trips body))))})" "relevantInfo" "(def relevantInfo {\:price (first (\:tripOption (\:trips body)))})" "relevantInfo" "(def relevantInfo {\:price (\:saleTotal (first (\:tripOption (\:trips body))))})" "relevantInfo" "body" " (def fare (\:slice (second (\:tripOption (\:trips body)))))" "fare" " (def fare (second (\:tripOption (\:trips body))))" "fare" "(def fare (\:slice (first (\:tripOption (\:trips body)))))" "fare" "    (def fare (\:segment (first (\:slice (first (\:tripOption (\:trips body)))))))" "fare" " (map (\:leg) fare)" " (map (\:leg fare))" "(import 'jml.clustering.NMF)" "(import jml.clustering.NMF)" "(require jml.clustering.NMF)" "(jml.clustering.NMF/runNMF)" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  )" "(import jml.clustering.JML)" "(import 'jml.clustering.JML)" "(import 'jml.clustering.NMF)" "(import jml.clustering.NMF)" "(import jml.clustering.NMF.)" "(import 'jml.clustering.NMF.)" "(import 'jml.clustering.NMF)" "(import 'jml.clustering.*)" "(import 'jml.clustering)" "(import jml.clustering)" "(import jml.clustering.NMF)" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  )" "(defn send-flight-request [origin destination departure_date arrival_date]\\r\\n  (\\r\\n    (def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )   \\r\\n    \\r\\n    (let [response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                options)\\r\\n          ]\\r\\n      \\r\\n       (parse-string (\:body response) true))\\r\\n     \\r\\n    ))" "(def r (send-flight-request \\"\\" \\"\\" \\"\\" \\"\\"))" "(def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )   \\r\\n    \\r\\n    (let [response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                options)\\r\\n          ]\\r\\n      \\r\\n       (parse-string (\:body response) true))" "(send-flight-request \\"\\" \\"\\" \\"\\" \\"\\")" "send-flight-request" "(send-flight-request \\"\\" \\"\\" \\"\\" \\"\\")" "(def r (send-flight-request 1 2 3 4))" "(defn dd [x] (+ 2 x))" "(dd 2)" "(send-flight-request \\"\\" \\"\\" \\"\\" \\"\\")" "send-flight-request" "(defn send-flight-request [origin destination departure_date arrival_date]\\r\\n  (\\r\\n    (def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )   \\r\\n    (def bodyres)\\r\\n    (let [response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                options)\\r\\n          ]\\r\\n      \\r\\n       (bodyres (parse-string (\:body response) true)))\\r\\n     \\r\\n    ))" "(send-flight-request \\"\\" \\"\\" \\"\\" \\"\\")" "(defn send-flight-request [origin destination departure_date arrival_date]\\r\\n  (\\r\\n    (def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )   \\r\\n    (def bodyres)\\r\\n    (let [response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                options)\\r\\n          ]\\r\\n      \\r\\n       (bodyres (parse-string (\:body response) true)))\\r\\n    bodyres\\r\\n     \\r\\n    ))" "(send-flight-request \\"\\" \\"\\" \\"\\" \\"\\")" "(defn send-flight-request [origin destination departure_date arrival_date]\\r\\n  (\\r\\n    (def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )   \\r\\n    (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                options))\\r\\n         \\r\\n      \\r\\n    (parse-string (\:body response) true)\\r\\n   \\r\\n     \\r\\n    ))" "(send-flight-request \\"\\" \\"\\" \\"\\" \\"\\")" "  (def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )   \\r\\n    (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                options))\\r\\n         \\r\\n      \\r\\n    (parse-string (\:body response) true)" "(send-flight-request [\\"\\" \\"\\" \\"\\" \\"\\"])" "(send-flight-request \= \= \= \=)" "\\r\\n    (def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )   \\r\\n    (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                options))\\r\\n         \\r\\n      \\r\\n    (def body (parse-string (\:body response) true))" "body" " (def price {\:price (\:saleTotal (first (\:tripOption (\:trips body))))})\\r\\n      (def fare (\:segment (first (\:slice (first (\:tripOption (\:trips body)))))))" "fare" "price" "(for [i (range 0 (count fare))] (\:leg (fare i)))" "(for [i (range 0 (count fare))] (first(\:leg (fare i))))" "(fare (for [i (range 0 (count fare))] (first(\:leg (fare i)))))" "(def fareInformation (for [i (range 0 (count fare))] (first(\:leg (fare i)))))" "fareInformation" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(defn load-airport-codes [] \\r\\n  (\\r\\n    (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file))\\r\\n    )\\r\\n    )\\r\\n  )" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "\\r\\n(defn load-airport-codes [] \\r\\n  (\\r\\n    (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file))\\r\\n    )\\r\\n    )\\r\\n  )" "load-airport-codes" "(def a load-airport-codes)" "a" "@a" "a" "(list a)" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "\\r\\n(defn load-airport-codes [] \\r\\n  (\\r\\n    (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (take-csv (slurp file))\\r\\n    )\\r\\n    )\\r\\n  )" "\\r\\n(defn load-airport-codes [] \\r\\n  (\\r\\n    (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/take-csv (slurp file))\\r\\n    )\\r\\n    )\\r\\n  )" "\\r\\n(defn load-airport-codes [] \\r\\n  (\\r\\n    (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file))\\r\\n    )\\r\\n    )\\r\\n  )" "load-airport-codes" "(def a load-airport-codes)" "a" "@a" "(a 1)" "(1 a)" "(deref a)" "(defn load-airport-codes [] \\r\\n  (\\r\\n   (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (take-csv (slurp file))\\r\\n          ))\\r\\n    )\\r\\n  )" "(defn load-airport-codes [] \\r\\n  (\\r\\n   (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file))\\r\\n          ))\\r\\n    )\\r\\n  )" "a" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n       (csv/read-csv (slurp file))\\r\\n             ))" "a" "(into {} a)" " (def options {\:separator \\";\\"})" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (take-csv (slurp file) & options)\\r\\n          ))" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file) & options)\\r\\n          ))" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file) options)\\r\\n          ))" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file)&options)\\r\\n          ))" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file) options)\\r\\n          ))" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file) \:separator \\";\\")\\r\\n          ))" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n          ))" "a" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file) \:separator \\\\; \:quote \\\\\\")\\r\\n          ))" "a" "(defn load-airport-codes [] \\r\\n  (\\r\\n   (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (take-csv (slurp file) & \:separator \\\\;)\\r\\n          ))\\r\\n    a)\\r\\n  )" "(defn load-airport-codes [] \\r\\n  (\\r\\n   (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (take-csv (slurp file) & \:separator \\\\;)\\r\\n          ))\\r\\n    )a\\r\\n  )" "(defn load-airport-codes [] \\r\\n  (\\r\\n   (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file) & \:separator \\\\;)\\r\\n          ))\\r\\n    a)\\r\\n  )" "(defn load-airport-codes [] \\r\\n  (\\r\\n   (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n          ))\\r\\n    a)\\r\\n  )" "load-airport-codes" "(def a load-airport-codes)" "a" "(a load-airport-codes)" "(def b load-airport-codes)" "(def abb load-airport-codes)" "(abb load-airport-codes)" "(def g)" "(load-airport-codes g)" "(defn load-airport-codes [] \\r\\n  \\r\\n   (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n          ))\\r\\n  a  \\r\\n  )" "a" "\\r\\n(defn load-airport-codes [] \\r\\n  \\r\\n   (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n          ))\\r\\n  a  \\r\\n  )" "(load-airport-codes)" "(def ga load-airport-codes)" "ga" "(def ga (load-airport-codes))" "ga" "(defn get-airport-codes-map [list]\\r\\n  (\\r\\n    (def map {})\\r\\n    (for i (range 0 (count list)) \\r\\n      (let [element (nth list i)]\\r\\n        (assoc map (nth 3 element) (nth 1 element)))\\r\\n      )\\r\\n    )map\\r\\n  )" "(defn get-airport-codes-map [list]\\r\\n  (\\r\\n    (def mapica {})\\r\\n    (for i (range 0 (count list)) \\r\\n      (let [element (nth list i)]\\r\\n        (assoc mapica (nth 3 element) (nth 1 element)))\\r\\n      )\\r\\n    )mapica\\r\\n  )" "(defn get-airport-codes-map [list]\\r\\n  (\\r\\n    (def mapica {})\\r\\n    (for [i (range 0 (count list))] \\r\\n      (let [element (nth list i)]\\r\\n        (assoc mapica (nth 3 element) (nth 1 element)))\\r\\n      )\\r\\n    )mapica\\r\\n  )" "(get-airport-codes-map)" "(get-airport-codes-map ga)" "ga" "(for [i (range 0 (count ga))] \\r\\n      (let [element (nth ga i)]\\r\\n        ((nth 3 element) (nth 1 element)))\\r\\n      )" "(for [i (range 0 (count ga))] \\r\\n      (let [elementic (nth ga i)]\\r\\n        ((elementic 3) (elementic 3)))\\r\\n      )" "[1 2 3]" "(0 [1 2 3 4])" "([1 2 3 4] 0)" "(for [i (range 0 (count ga))] \\r\\n      (let [elementic (nth ga i)]\\r\\n        ((elementic 3)))\\r\\n      )" "(nth ga 1)" "(nth ga 10)" "(def r (nth ga 10))" "r" "{(r 1)}" "{(r 1) (r 3)}" "(def ra {})" "(assoc ra (r 1) (r 3))" "(assoc ra (r 0) (r 2))" "ra" "(def ra (atom {}))" "(assoc ra (r 0) (r 2))" "(assoc @ra (r 0) (r 2))" "(assoc @ra (r 1) (r 3))" "@ra" "(swap\! ra assoc (r 1) (r 3))" "ra" "(swap\! ra assoc (r 0) (r 2))" "ra" "(defn get-airport-codes-map [list]\\r\\n  (\\r\\n    (def mapica (atom {}))\\r\\n    (for [i (range 0 (count list))] \\r\\n      (let [elem (nth list i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n      )\\r\\n    )@mapica\\r\\n  )" "(get-airport-codes-map ga)" "(def mapica (atom {}))\\r\\n    (for [i (range 0 (count list))] \\r\\n      (let [elem (nth list i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n      )\\r\\n    @mapica" " (def mapica (atom {}))\\r\\n    (for [i (range 0 (count ga))] \\r\\n      (let [elem (nth ga i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n      )\\r\\n    @mapica" "mapica" "@mapica" "mapica" " (def mapica (atom {}))\\r\\n    (for [i (range 0 (count list))] \\r\\n      (let [elem (nth list i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n      )" "mapica" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" "a" "(def mapica (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n      )" "mapica" "(count a)" " (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" " (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" "(count a)" "(def mapica (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n      )" "mapica" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" "a" "(a (take 10 a))" "(def aaa a)" "aaa" "(aaa (take 10 aaa))" "(take 10 aaa)" "(def prvi (take 10 aaa))" "prvi" "(def mapica (atom {}))\\r\\n    (for [i (range 0 (count prvi))] \\r\\n      (let [elem (nth prvi i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n      )" "mapica" "@mapica" "(for [i (range 0 (count prvi))] \\r\\n         (let [elem (nth prvi i)]\\r\\n           (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n         )" "(for [i (range 0 (count prvi))] \\r\\n         (let [elem (nth prvi i)]\\r\\n           (swap\! mapica (assoc (elem 3) (elem 1))))\\r\\n         )" "(for [i (range 0 (count prvi))] \\r\\n         (let [elem (nth prvi i)]\\r\\n           (swap\! mapica (assoc mapica (elem 3) (elem 1))))\\r\\n         )" "(for [i (range 0 (count prvi))] \\r\\n         (let [elem (nth prvi i)]\\r\\n           (swap\! mapica (assoc @mapica (elem 3) (elem 1))))\\r\\n         )" "@mapica" "(for [i (range 0 (count prvi))] \\r\\n         (let [elem (nth prvi i)]\\r\\n           (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n         )" "(swap\! mapica assoc \\"a\\" \\"b\\")" "(swap\! mapica assoc \\"a\\" \\"b\\");" " (for [i (range 0 (count list))] \\r\\n      (let [elem (nth list i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n      )" "(def mapica (atom {}))\\r\\n    (for [i (range 0 (count aaa))] \\r\\n      (let [elem (nth aaa i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n      )" "mapica" "  (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" " (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" "(def aa (take 10 a))" "aa" "(def mapica (atom {}))\\r\\n    (for [i (range 0 (count aa))] \\r\\n      (let [elem (nth aa i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n      ) @mapica" "@mapica" "(def mapica (atom {}))\\r\\n       (for [i (range 0 (count aa))] \\r\\n         (let [elem (nth aa i)]\\r\\n           (swap\! mapica assoc (elem 3) (elem 1)))\\n         i\\r\\n         ) @mapica" "(def mapica (atom {}))\\r\\n       (for [i (range 0 (count aa))] \\r\\n         (let [elem (nth aa i)]\\r\\n           (swap\! mapica assoc (elem 3) (elem 1)) i)\\n         \\r\\n         ) @mapica" "(def mapica (atom {}))\\r\\n          (for [i (range 0 (count a))] \\r\\n            (let [elem (nth a i)]\\r\\n              (swap\! mapica assoc (elem 3) (elem 1)) i)\\r\\n            \\r\\n            ) @mapica" "(keywordize-keys mapica)" "(defn modify-keys [f m] (zipmap (map f (keys mapica)) (vals mapica)))" "modify-keys" "@modify-keys" "(def modif ((zipmap (map keyword (keys @mapica)) (vals @mapica))))" "(def modif ((zipmap (map keyword (keys mapica)) (vals mapica))))" "(zipmap (map keyword (keys mapica)) (vals mapica))" "(zipmap (map keyword (keys @mapica)) (vals @mapica))" "(def aar (zipmap (map keyword (keys @mapica)) (vals @mapica)))" "aar" "(def mapica (atom {}))\\r\\n    (for [i (range 0 (count list))] \\r\\n      (let [elem (nth list i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)) i)\\r\\n      )\\r\\n    \\r\\n  (def mapa (zipmap (map keyword (keys @mapica)) (vals @mapica)))\\r\\n  mapa" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" " (def mapica (atom {}))\\r\\n    (for [i (range 0 (count list))] \\r\\n      (let [elem (nth list i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)) i)\\r\\n      )\\r\\n   \\r\\n  (def mapa (zipmap (map keyword (keys @mapica)) (vals @mapica)))\\r\\n   mapa" " (def mapica (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)) i)\\r\\n      )\\r\\n   \\r\\n  (def mapa (zipmap (map keyword (keys @mapica)) (vals @mapica)))\\r\\n   mapa" "mapa" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" " (def a (with-open [file (io/reader \\"airports.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" "a" " (def a (with-open [file (io/reader \\"airports.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\,)\\r\\n           ))" "a" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(defn request-artist [artist]\\r\\n  ((let [response (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=\\" artist))]\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (@response)\\r\\n     ))\\r\\n  )" "(request-artist \\"avicii\\")" " (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=\\" artist))" " (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=avicii\\"))" "(let [res (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=\\" artist))]\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     res\\r\\n     )" "(let [res (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=avicii\\"))]\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     res\\r\\n     )" "(let [res (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=\\" artist))]\\r\\n        ;; Handle responses one-by-one, blocking as necessary\\r\\n        ;; Other keys \:headers \:body \:error \:opts\\r\\n        (parse-string res)\\r\\n        )" "(let [res (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=avicii\\"))]\\r\\n        ;; Handle responses one-by-one, blocking as necessary\\r\\n        ;; Other keys \:headers \:body \:error \:opts\\r\\n        (parse-string res)\\r\\n        )" "(let [response (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=\\" artist))]\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (parse-string (\:body response))\\r\\n     )" "(let [response (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=avicii\\"))]\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (parse-string (\:body response))\\r\\n     )" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=avicii\\")))\\r\\n        ;; Handle responses one-by-one, blocking as necessary\\r\\n        ;; Other keys \:headers \:body \:error \:opts\\r\\n        (parse-string (\:body response))" "response" "2" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=\\" artist)))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n    ;; Other keys \:headers \:body \:error \:opts\\r\\n (def mapa  (parse-string (\:body response)))" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=avicii\\")))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n    ;; Other keys \:headers \:body \:error \:opts\\r\\n (def mapa  (parse-string (\:body response)))" "mapa" "(def mapevents (zipmap (map keyword (keys mapa)) (vals mapa)))" "mapevents" "(def mapevents (zipmap (map keyword (keys (\:events mapa))) (vals (\:events mapa))))" "mapevents" "mapa" "(def mapevents (zipmap (map keyword (keys (\\"events\\" mapa))) (vals (\\"events\\" mapa))))" "(\\"events\\" mapa)" "(mapa  \\"events\\" )" "(def mapevents (zipmap (map keyword (keys (mapa \\"events\\"))) (vals (mapa \\"events\\"))))" "(keys (mapa \\"events\\"))" " (mapa \\"events\\")" "(\\"events\\" mapa)" "(def mapevents (zipmap (map keyword (keys (first (mapa \\"events\\")))) (vals (first (mapa \\"events\\")))))" "mapevents" "(def mapevents (zipmap (map keyword (keys ((mapa \\"events\\") 0))) (vals ((mapa \\"events\\") 0))))" "mapevents" "(def mapevents (zipmap (map keyword (keys (mapa \\"events\\"))) (vals (mapa \\"events\\"))))" "(keys (mapa \\"events\\"))" "(keys (\\"events\\" mapa))" "(keys ((mapa \\"events\\") 0))" "(keys ((mapa \\"events\\") 1))" "(keys ((mapa \\"events\\") 2))" "(vals ((mapa \\"events\\") 2))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "((let [response (client/get (str \\"http\://api.seatgeek.com/2/events?sort\=lowest_price.asc&performers.slug\=\\" artist))]\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (parse-string (\:body response))\\r\\n     ))" "((let [response (client/get (str \\"http\://api.seatgeek.com/2/events?sort\=lowest_price.asc&performers.slug\=avicii\\"))]\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (parse-string (\:body response))\\r\\n     ))" "(defrecord Ticket [price url])\\r\\n(defrecord Event [name performer place date Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])" "(->Ticket 123 www.ticket.com)" "(->Ticket [123 www.ticket.com])" "(->Ticket [123] [www.ticket.com])" "(->Ticket [123] [1])" "(defrecord Ticket price url)\\r\\n(defrecord Event [name performer place date Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])" "(defrecord Ticket [^Long price ^String url])\\r\\n(defrecord Event [name performer place date Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])" "(->Ticket 123 www.ticket.com)" "(->Ticket 123 \\"www.ticket.com\\")" "(defrecord Ticket [price url])\\r\\n   (defrecord Event [name performer place date Ticket])\\r\\n   (defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n   (defrecord Result [Event Flight total_price total_distance])" "(->Ticket 123 \\"www.ticket.com\\")" "(def df (java.text.SimpleDateFormat. \\"dd-MM-yyyy\\"))\\r\\n(def dat (.parse df (str date)))\\n(->Event [\\"exit\\" \\"avicii\\" \\"novi sad\\" dat (->Ticket [123 \\"www.ticket.com\\"])])" "(def df (java.text.SimpleDateFormat. \\"dd-MM-yyyy\\"))\\r\\n(def dat (.parse df))\\n\\n(->Event [\\"exit\\" \\"avicii\\" \\"novi sad\\" dat (->Ticket [123 \\"www.ticket.com\\"])])" "(def df (java.text.SimpleDateFormat. \\"dd-MM-yyyy\\"))\\r\\n(def dat (.parse df \\"23-01-1991\\"))\\n\\n(->Event [\\"exit\\" \\"avicii\\" \\"novi sad\\" dat (->Ticket [123 \\"www.ticket.com\\"])])" "dat" "(def df (java.text.SimpleDateFormat. \\"dd-MM-yyyy\\"))\\r\\n(def dat (.parse df \\"23-01-1991\\"))\\n(def tick (->Ticket [123 \\"www.ticket.com\\"]))\\n(->Event [\\"exit\\" \\"avicii\\" \\"novi sad\\" dat tick\\n          ])" "(->Ticket 123 \\"www.ticket.com\\")" "(def tick (->Ticket 123 \\"www.ticket.com\\"))" "(def df (java.text.SimpleDateFormat. \\"dd-MM-yyyy\\"))\\r\\n(def dat (.parse df \\"23-01-1991\\"))\\n(def tick (->Ticket [123 \\"www.ticket.com\\"]))\\n(->Event \\"exit\\" \\"avicii\\" \\"novi sad\\" dat tick\\n          )" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?sort\=lowest_price.asc&performers.slug\=\\" artist)))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (parse-string (\:body response))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?sort\=lowest_price.asc&performers.slug\=\\" artist)))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (parse-string (\:body response))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?sort\=lowest_price.asc&performers.slug\=\\" artist)))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (parse-string (\:body response))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )\\r\\n(defrecord Ticket [price url])\\r\\n(defrecord Event [name performer place date Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?sort\=lowest_price.asc&performers.slug\=\\" artist)))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (parse-string (\:body response))" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?sort\=lowest_price.asc&performers.slug\=avicii\\" )))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (parse-string (\:body response))" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n    ;; Other keys \:headers \:body \:error \:opts\\r\\n    (parse-string (\:body response))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n    ;; Other keys \:headers \:body \:error \:opts\\r\\n    (parse-string (\:body response))" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n    ;; Other keys \:headers \:body \:error \:opts\\r\\n   (def res (parse-string (\:body response)))" "res" "(\\"events\\" res)" "(res \\"events\\")" "( (parse-string (\:body response)) \\"events\\")" "(def events ( (parse-string (\:body response)) \\"events\\"))" "(count events)" "(defrecord Ticket [price url])\\r\\n(defrecord Event [name performer place date Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])\\n(def eventmap (atom{}))\\n(for [i (range (0 (count events)))] \\n  ( (swap\! eventmap assoc i (->Event ((nth events i) \\"title\\"))) i)\\n    )" "(defrecord Ticket [price url])\\r\\n(defrecord Event [name performer place date Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])\\n(def eventmap (atom{}))\\n(for [i (range (0 (count events)))] \\n  ( (swap\! eventmap assoc (i) (->Event ((nth events i) \\"title\\"))) i)\\n    )" "(->Event ((nth events i) \\"title\\"))" "(def eventmap (atom{}))\\r\\n   (for [i (range (0 (count events)))] \\r\\n     ( (->Event ((nth events i) \\"title\\")))\\r\\n       )" "(def eventmap (atom{}))\\r\\n   (for [i (range (0 (count events)))] \\r\\n     ( ((nth events i) \\"title\\")))" "(def eventmap (atom{}))\\r\\n   (for [i (range (0 (count events)))] \\r\\n      ((nth events i) \\"title\\"))" "(nth 1 events)" "(nth events 1)" "((nth 1 events) \\"title\\")" "((nth 1 events) \\"name\\")" "((nth 1 events) \\"score\\")" "(\\"score\\" (nth 1 events))" "(def el (nth events 1))" "el" "(el \\"score\\")" "((nth 1 events) \\"score\\")" "((nth events 1) \\"score\\")" "((nth events 1) \\"title\\")" " (for [i (range (0 (count events)))] \\r\\n        ( ((nth events i) \\"title\\")))" " (for [i (range (0 (count events)))] \\r\\n         ((nth events i) \\"title\\"))" " (for [i (range 0 (count events))] \\r\\n         ((nth events i) \\"title\\"))" "(def eventmap (atom{}))\\r\\n   (for [i (range 0 (count events))] \\r\\n     ( (->Event ((nth events i) \\"title\\")))\\r\\n       )" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )\\r\\n(defrecord Ticket [price url])\\r\\n(defrecord Event [name performer place date Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (def events (parse-string (\:body response)))" "events" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (def events ((parse-string (\:body response)) \\"events\\"))" "events" "(for [i (range 0 (count events))] \\r\\n     (let [el (nth events i)]\\r\\n       (->Event (el \\"title\\") (el \\"performers\\") (el \\"venue\\") (el \\"stats\\")))\\r\\n       )" "(defrecord Ticket [price url])\\r\\n(defrecord Performer [name genre image_url])\\r\\n(defrecord Location [longitude latitude])\\r\\n(defrecord Place [name city country Location])\\r\\n(defrecord Event [name performer Place Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])" "(for [i (range 0 (count events))] \\r\\n     (let [el (nth events i)]\\r\\n       (->Event (el \\"title\\") (el \\"performers\\") (el \\"venue\\") (el \\"stats\\")))\\r\\n       )" "(def eventsmap (atom {}))" "(for [i (range 0 (count events))] \\r\\n     (let [el (nth events i)]\\r\\n      (def event (->Event (el \\"title\\") (el \\"performers\\") (el \\"venue\\") (el \\"stats\\")))\\n       (swap\! eventsmap assoc i event) i\\n      )\\r\\n       )" "eventsmap" "(\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))" "   (def events (parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))))\\r\\n   (def eventmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n     (let [el (nth events i)]\\r\\n      (def event (->Event (el \\"title\\") (el \\"performers\\") (el \\"venue\\") (el \\"stats\\")))\\r\\n       (swap\! eventsmap assoc i event) i\\r\\n      )\\r\\n       )" "   (def events (parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))))\\r\\n   (def eventmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n     (let [el (nth events i)]\\r\\n      (def event (->Event (el \\"title\\") (el \\"performers\\") (el \\"venue\\") (el \\"stats\\")))\\r\\n       (swap\! eventsmap assoc i event) i\\r\\n      )\\r\\n       )" "(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avucuu\\")))) \\"events\\"))\\r\\n   (def eventmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n     (let [el (nth events i)]\\r\\n      (def event (->Event (el \\"title\\") (el \\"performers\\") (el \\"venue\\") (el \\"stats\\")))\\r\\n       (swap\! eventsmap assoc i event) i\\r\\n      )\\r\\n       )" "eventmap" "events" "(\\n def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))" "\\n(def eventmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n     (let [el (nth events i)]\\r\\n      (def event (->Event (el \\"title\\") (el \\"performers\\") (el \\"venue\\") (el \\"stats\\")))\\r\\n       (swap\! eventsmap assoc i event) i\\r\\n      )\\r\\n       )" "eventmap" "events" "\\n(def eventmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n     (let [el (nth events i)]\\r\\n      (def event (->Event (el \\"title\\") (el \\"performers\\") (el \\"venue\\") (el \\"stats\\")))\\r\\n       (swap\! eventsmap assoc i event) i\\r\\n      )\\r\\n       )" "eventmap" "@eventmap" "(def eventmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n     (let [el (nth events i)]\\r\\n      (def event (->Event (el \\"title\\") (el \\"performers\\") (el \\"venue\\") (el \\"stats\\")))\\r\\n       (swap\! eventsmap assoc i event) i\\r\\n      )\\r\\n       )" "eventmap" " (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n     (let [el (nth events i)]\\r\\n      (def event (->Event (el \\"title\\") (el \\"performers\\") (el \\"venue\\") (el \\"stats\\")))\\r\\n       (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n       )" "events" "(map \\"stats\\" events)" "(map events \\"title\\")" "(map \\"title \\"events)" "(map (\\"title\\" events) events)" "(def performers (events \\"perfomers\\"))" "(def performers (\\"perfomers\\" events))" "(def performers ((nth events 0) \\"performers\\"))" "performers" "(map \\"slug\\" (iterate inc 0) performers)" "(map key (iterate inc 0) performers)" "(performers 1)" "(performers 0)" "((performers 0) \\"slug\\")" "(map nth (iterate performers ))" " (take (count performers) (iterate inc 0))" "performers" "(map nth (take (count performers) (iterate inc 0)) performers)" "(map nth performers (take (count performers) (iterate inc 0)))" "( nth performers (take (count performers) (iterate inc 0)))" "(iterate nth performers)" "[0..10]" "[0 10]" "(range 10)" "(nth performers (range 10))" "(let [i (range 10)])" "(let [i (range 10)] i)" "(for [i (range 10) inc])" "(for [i (range (count performers))]\\n  (nth performers i))" "(for [i (range (count performers))]\\n  ((nth performers i) \\"image\\"))" "performers" " (def artists [])\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (conj artists (->Performer (per \\"image\\") (per \\"genre\\") (per \\"image\\"))))\\r\\n        )" "artists" "(def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"image\\") (per \\"genre\\") (per \\"image\\"))))\\r\\n        )" "artists" "(for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (per \\"genre\\") (per \\"image\\"))))\\r\\n        )" "(for [i (range (count performers))]\\n  ((nth performers i) \\"image\\"))" "(for [i (range (count performers))]\\n  ((nth performers i) \\"genres\\"))" "(for [i (range (count performers))]\\n  ((((nth performers i) \\"genres\\") 0) \\"name\\"))" " (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )" "(def a)" "a" "(def a (atom))" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def venue (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"contry\\") (->Location (vals ((el \\"venue\\") \\"location\\")))))\\r\\n      (def event (->Event (el \\"title\\") artists (el \\"venue\\") (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "(def event (first events))" "event" "((event \\"venue\\") \\"location\\")" " ( vals (event \\"venue\\") \\"location\\")" " (vals ((event \\"venue\\") \\"location\\"))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )\\r\\n(defrecord Ticket [price url])\\r\\n(defrecord Performer [name genre image_url])\\r\\n(defrecord Place [name city country location])\\r\\n(defrecord Event [name performer Place Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def venue (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"contry\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") artists (el \\"venue\\") (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "(clojure.pprint eventsmap)" "(clojure.pprint @eventsmap)" "(require clojure.pprint)" "(use 'clojure.pprint)" "(write eventsmap)" "(write @eventsmap)" "(use 'clojure.pprint \:as fja)" "(use 'clojure.pprint)" " \\n (def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def venue (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"contry\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") artists venue (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"contry\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") artists ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "performers" "(def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )" "artists" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists [])\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (conj artists (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") artists ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "(def artists [])\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (conj artists (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )" "artists" "(def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (def artists (atom []))\\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      \\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") artists ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] (\\r\\n    (def artists (atom []))\\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      \\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") artists ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    ))" "event" "events" "(let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom [])))" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom [])))" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (performers))" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      performers)" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      venue)" "(let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        ))" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        ))" "artists" "(reset\! artists [])" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        ))" "artists" "(for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") artists ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" " (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def art (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! art conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") art ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") @artists @ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") @artists ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        ))" "artists" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") @artists ven (el \\"stats\\"))))" "artists" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        ) artists)" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))\\n          artists)\\r\\n        ) artists)" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))\\n          ) artists\\r\\n        ) artists)" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))\\n          ) \\r\\n        ) artists)" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))\\n          )         ) )" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), per (nth performers j), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))        \\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") @artists ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" " (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )" "artists" "(for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )))" "artists" "(for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )artists))" "(def artists [])\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (conj artists (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )" "a" "  \\n  (def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists [])\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (conj artists (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") a ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") a ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "eventsmap" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (def event (->Event (el \\"title\\") a ven tick))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "eventsmap" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(defrecord Ticket [price url])\\r\\n(defrecord Performer [name genre image_url])\\r\\n(defrecord Place [name city country location])\\r\\n(defrecord Event [name performer Place Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])" " (def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (def event (->Event (el \\"title\\") (subs (el \\"datetime_local\\") 0 9) a ven tick))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )\\r\\n  eventsmap" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (def event (->Event (el \\"title\\") (subs (el \\"datetime_local\\") 0 9) a ven tick))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )\\r\\n  eventsmap" "(defrecord Ticket [price url])\\r\\n(defrecord Performer [name genre image_url])\\r\\n(defrecord Place [name city country location])\\r\\n(defrecord Event [name performer date Place Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (def event (->Event (el \\"title\\") (subs (el \\"datetime_local\\") 0 9) a ven tick))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )\\r\\n  eventsmap" "@eventsmap" "a" "\\r\\n  \\r\\n  (def a (with-open [file (io/reader \\"airports.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\,)\\r\\n           ))\\r\\n  a" "a" "(def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! aiportmap assoc (elem 3) (elem 1)) i)\\r\\n      )\\r\\n    (def mapair (zipmap (map keyword (keys @aiportmap)) (vals @aiportmap)))\\r\\n    mapair" " (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;,)\\r\\n           ))\\r\\n  a" "\\r\\n    (def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count list))] \\r\\n      (let [elem (nth list i)]\\r\\n        (swap\! aiportmap assoc (elem 3) (elem 1)) i)\\r\\n      )\\r\\n    (def mapair (zipmap (map keyword (keys @aiportmap)) (vals @aiportmap)))\\r\\n    mapair" "\\r\\n    (def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! aiportmap assoc (elem 3) (elem 1)) i)\\r\\n      )\\r\\n    (def mapair (zipmap (map keyword (keys @aiportmap)) (vals @aiportmap)))\\r\\n    mapair" "(@mapair \:BCN)" "(mapair \:BCN)" "(key (mapair \\"Barcelona\\"))" "(mapair \\"Barcelona\\")" "\\r\\n    (def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! aiportmap assoc (elem 1) (elem 3)) i)\\r\\n      )\\r\\n    (def mapair (zipmap (map keyword (keys @aiportmap)) (vals @aiportmap)))\\r\\n    mapair" "(aiportmap \:Barcelona)" "(mapair \:Barcelona)" "\\r\\n    (def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! aiportmap assoc (elem 3) (elem 1)) i)\\r\\n      )\\r\\n    (def mapair (zipmap (map keyword (keys @aiportmap)) (vals @aiportmap)))\\r\\n    mapair" " (def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! aiportmap assoc (elem 3) [(elem 1) (elem 2)]) i)\\r\\n      )\\r\\n    (def mapair (zipmap (map keyword (keys @aiportmap)) (vals @aiportmap)))\\r\\n    mapair" "(mapair \:BCN)" "(mapair \:LAS)" "(.startsWith \\"fff\\" \\"f\\")" "(.startsWith \\"Las Vegas, NV\\" \\"Las Vegas\\")" "(filter (comp \#{\\"barcelona\\"} mapair) (keys mapair))" "(filter (comp \#{\\"Barcelona\\"} mapair) (keys mapair))" "(filter (comp \\"Barcelona\\" mapair) (keys mapair))" "(vals mapair)" "(filter \#(comp (.startsWith (% 0) \\"Barcelona\\") (\= (% 1) \\"Spain\\") ) (vals mapair))" "(filter \#(\= (% 1) \\"Spain\\") (vals mapair))" "(filter \#(.startsWith (% 0) \\"Barcelona\\")  (vals mapair))" "(filter \#(comp (\= (% 1) \\"Spain\\") (.startsWith (% 0) \\"Barcelona\\")) (vals mapair))" "(filter \#(&& (\= (% 1) \\"Spain\\") (.startsWith (% 0) \\"Barcelona\\")) (vals mapair))" "(filter \#((\= (% 1) \\"Spain\\") (.startsWith (% 0) \\"Barcelona\\")) (vals mapair))" "(filter \#(& (\= (% 1) \\"Spain\\") (.startsWith (% 0) \\"Barcelona\\")) (vals mapair))" "(filter \#(+ (\= (% 1) \\"Spain\\") (.startsWith (% 0) \\"Barcelona\\")) (vals mapair))" "(filter \#(and (\= (% 1) \\"Spain\\") (.startsWith (% 0) \\"Barcelona\\")) (vals mapair))" "(filter \#(and (\= (% 1) \\"USA\\") (.startsWith (% 0) \\"Las Vegas\\")) (vals mapair))" "(key (filter \#(and (\= (% 1) \\"USA\\") (.startsWith (% 0) \\"Las Vegas\\")) (vals mapair)))" "(key (first (filter \#(and (\= (% 1) \\"USA\\") (.startsWith (% 0) \\"Las Vegas\\")) (vals mapair))))" "(mapair (filter \#(and (\= (% 1) \\"USA\\") (.startsWith (% 0) \\"Las Vegas\\")) (vals mapair)))" "(def value (first (filter \#(and (\= (% 1) \\"USA\\") (.startsWith (% 0) \\"Las Vegas\\")) (vals mapair))))" "(filter (comp \#{value} mapair) (keys mapair))" "\#{value}" "(def mapica {\:a \\"A\\" \:b \\"B\\" \:c \\"C\\"})" "(comp \#{\\"A\\"} mapica)" "(def a (comp \#{\\"A\\"} mapica))" "a" "(\#{\\"A\\"} mapica)" "(filter (comp \#{\\"A\\"} mapica) (keys mapica))" "(keys mapica)" "(def value (first (filter \#(and (\= (% 1) \\"USA\\") (.startsWith (% 0) \\"Las Vegas\\")) (vals mapair))))" "value" "  (def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count list))] \\r\\n      (let [elem (nth list i)]\\r\\n        (swap\! aiportmap assoc [(elem 1) (elem 2)] (elem 3)) i)\\r\\n      )\\r\\n    (def mapair (zipmap (map keyword (keys @aiportmap)) (vals @aiportmap)))\\r\\n    mapair" "  (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;,)\\r\\n           ))\\r\\n  a" "  (def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! aiportmap assoc [(elem 1) (elem 2)] (elem 3)) i)\\r\\n      )\\r\\n    (def mapair (zipmap (map keyword (keys @aiportmap)) (vals @aiportmap)))\\r\\n    mapair" "a" "mapair" "a" "  (def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! aiportmap assoc [(elem 1) (elem 2)] (elem 3)) i)\\r\\n      )\\r\\n    (def mapair (zipmap (map keyword (keys @aiportmap)) (vals @aiportmap)))\\r\\n    mapair" "(def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! aiportmap assoc (elem 3) [(elem 1) (elem 2)] ) i)\\r\\n      )\\r\\n    (def mapair (zipmap (map keyword (keys @aiportmap)) (vals @aiportmap)))\\r\\n    mapair" "(def rr {[\\"aa\\" \\"bb\\"] a})" "rr" "(def rr {[\\"aa\\" \\"bb\\"] \\"qqqq\\"})" "rr" "\\r\\n    (def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! aiportmap assoc (elem 3) [(elem 1) (elem 2)] ) i)\\r\\n      )\\r\\n    (def mapair (zipmap (map keyword (keys @aiportmap)) (vals @aiportmap)))\\r\\n   mapair" "\\r\\n    (def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! aiportmap assoc [(elem 1) (elem 2)] (elem 3)  ) i)\\r\\n      )\\r\\n    (def mapair (zipmap (map keyword (keys @aiportmap)) (vals @aiportmap)))\\r\\n   mapair" "\\r\\n    (def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! aiportmap assoc ([(elem 1) (elem 2)]) (elem 3)  ) i)\\r\\n      )\\r\\n    (def mapair (zipmap (map keyword (keys @aiportmap)) (vals @aiportmap)))\\r\\n   mapair" "\\r\\n    (def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! aiportmap assoc [(elem 1) (elem 2)] (elem 3)  ) i)\\r\\n      )\\r\\n    (def mapair (zipmap (map keyword (keys @aiportmap)) (vals @aiportmap)))\\r\\n   mapair" "rr" "(def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count list))] \\r\\n      (let [elem (nth list i)]\\r\\n        (swap\! aiportmap assoc [(elem 1) (elem 2)] (elem 3)) i)\\r\\n      )" "(def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! aiportmap assoc [(elem 1) (elem 2)] (elem 3)) i)\\r\\n      )" "aiportmap" "(def value (first (filter \#(and (\= (% 1) \\"USA\\") (.startsWith (% 0) \\"Las Vegas\\")) (keys mapair))))" "(filter \#(and (\= (% 1) \\"USA\\") (.startsWith (% 0) \\"Las Vegas\\")) (keys mapair))" "(filter \#(and (\= (% 1) \\"USA\\") (.startsWith (% 0) \\"Las Vegas\\")) (keys airportmap))" "(def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! aiportmap assoc [(elem 1) (elem 2)] (elem 3)) i)\\r\\n      )airportmap" "(def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! aiportmap assoc [(elem 1) (elem 2)] (elem 3)) i)\\r\\n      )\\n    airportmap" "(def aiportmap (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! aiportmap assoc [(elem 1) (elem 2)] (elem 3)) i)\\r\\n      )\\n     aiportmap" " aiportmap" "(filter \#(and (\= (% 1) \\"USA\\") (.startsWith (% 0) \\"Las Vegas\\")) (keys aiportmap))" "(keys aiportmap)" "(keys @aiportmap)" "(filter \#(and (\= (% 1) \\"USA\\") (.startsWith (% 0) \\"Las Vegas\\")) (keys @aiportmap))" "(val\\n  (filter \#(and (\= (% 1) \\"USA\\") (.startsWith (% 0) \\"Las Vegas\\")) (keys @aiportmap)))" "(@aiportmap(first\\n        (filter \#(and (\= (% 1) \\"USA\\") (.startsWith (% 0) \\"Las Vegas\\")) (keys @aiportmap))))" "(def place (->Place \\"Stadium\\" \\"Las Vegas\\" \\"USA\\" (-11.22 2.22)))" "(def place (->Place \\"Stadium\\" \\"Las Vegas\\" \\"USA\\" (list -11.22 2.22)))" "place" "(place \:name)" "(-> place \:name)" "(@aiportmap(first\\n        (filter \#(and (\= (% 1) (-> place \:country)) (.startsWith (% 0) (-> place \:city))) (keys @aiportmap))))" "(parse-int \\"1\\")" "(java.lang.Integer/parseInt \\"1\\")" "(take \\"1daadadada\\")" "(take 5 \\"1daadadada\\")" "(join (take 5 \\"1daadadada\\"))" "(.indexOf \\"1daadadada\\" \\"a\\")" "(- \\"dat\\" \\"da\\")" "(join \\"dat\\" \\"da\\")" "(str \\"dat\\" \\"da\\")" "(str \\"dat\\" 1)" "(defn get-date [date sign] \\r\\n    (def result-date (subs date 0 ((count date)-2)))\\r\\n    (str result-date (sign 1 (java.lang.Integer/parseInt (subs date ((count date)-2)))))    \\r\\n    )" "(get-date \\"2012-02-10\\" +)" "(def result-date (subs \\"2012-02-10\\" 0 ((count \\"2012-02-10\\")-2)))" "(def result-date (subs \\"2012-02-10\\" 0 (- (count \\"2012-02-10\\") 2)))" " (defn get-date [date sign] \\r\\n    (def result-date (subs date 0 (- (count date) 2)))\\r\\n    (str result-date (sign 1 (java.lang.Integer/parseInt (subs date ((count date)-2)))))    \\r\\n    )" "(get-date \\"2012-02-10\\" +)" " (def result-date (subs \\"2012-02-10\\" 0 (- (count \\"2012-02-10\\") 2)))" "result-date" " (def result-date (subs \\"2012-02-10\\" 0 (- (count \\"2012-02-10\\") 1)))" "result-date" "(subs \\"2012-02-10\\" ((count \\"2012-02-10\\")-1))" "(subs \\"2012-02-10\\" (- (count \\"2012-02-10\\") 1))" "(str result-date (+ 1 (java.lang.Integer/parseInt (subs date (- (count date) 1)))))" "(str result-date (+ 1 (java.lang.Integer/parseInt (subs \\"2012-02-10\\" (- (count \\"2012-02-10\\") 1)))))" " (defn get-date [date sign] \\r\\n    (def result-date (subs date 0 (- (count date) 1)))\\r\\n    (str result-date (sign 1 (java.lang.Integer/parseInt (subs date (- (count date) 1)))))    \\r\\n    )" "(get-date \\"2012-02-10\\" +)" "(get-date \\"2012-02-10\\" -)" "(defn get-date [date choice] \\r\\n    (def result-date (subs date 0 (- (count date) 1)))\\r\\n    (str result-date (choice 1 (java.lang.Integer/parseInt (subs date (- (count date) 1)))))    \\r\\n    )" "(defn get-date [date choice] \\r\\n    (def result-date (subs date 0 (- (count date) 1)))\\r\\n    (str result-date (choice 1 (java.lang.Integer/parseInt (subs date (- (count date) 2)))))    \\r\\n    )" " (defn get-date [date choice] \\r\\n    (def result-date (subs date 0 (- (count date) 2)))\\r\\n    (str result-date (choice 1 (java.lang.Integer/parseInt (subs date (- (count date) 2)))))    \\r\\n    )" "(get-date \\"2012-02-10\\" -)" "(get-date \\"2012-02-10\\" +)" "(defn days-later [n]\\r\\n        (let [today (Calendar/getInstance)]\\r\\n          (doto today\\r\\n            (.add Calendar/DATE n)\\r\\n            .toString)))" "(import '[java.util Calendar])" "(defn days-later [n]\\r\\n        (let [today (Calendar/getInstance)]\\r\\n          (doto today\\r\\n            (.add Calendar/DATE n)\\r\\n            .toString)))" "(days-later 1)" "(.parse (java.text.SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\")" "(defn days-later [date n]\\r\\n           (let [today (Calendar/getInstance)]\\r\\n             (doto today\\r\\n               (.add date n)\\r\\n               .toString)))" "(def d (.parse (java.text.SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\"))" "(days-later d 1)" "(.add d 1)" "(.parse (java.text.SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\")" "(+ (* 1000 60 60 24) (.parse (java.text.SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\"))" "(+ (* 1000 60 60 24) (.getTime (.parse (java.text.SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\")))" "(.Date (+ (* 1000 60 60 24) (.getTime (.parse (java.text.SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\"))))" "(Date (+ (* 1000 60 60 24) (.getTime (.parse (java.text.SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\"))))" "(Date. (+ (* 1000 60 60 24) (.getTime (.parse (java.text.SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\"))))" "(import '[java.util Date])" "(Date. (+ (* 1000 60 60 24) (.getTime (.parse (java.text.SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\"))))" "(import '[java.text SimpleDateFormat])" "(.format (SimpleDateFormat. (Date. (+ (* 1000 60 60 24) (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\"))))))" "(.parse (SimpleDateFormat. (Date. (+ (* 1000 60 60 24) (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\"))))))" "(SimpleDateFormat. \\"yyyy-MM-dd\\")" "(.format (SimpleDateFormat. \\"yyyy-MM-dd\\") (Date. (+ (* 1000 60 60 24) (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\")))))" "(.format (SimpleDateFormat. \\"yyyy-MM-dd\\") (Date. (- (* 1000 60 60 24) (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\")))))" "(.format (SimpleDateFormat. \\"yyyy-MM-dd\\") (Date. (+ (* 1000 60 60 24) (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\")))))" "(.format (SimpleDateFormat. \\"yyyy-MM-dd\\") (Date. (- (* 1000 60 60 24) (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\")))))" "\\n(.format (SimpleDateFormat. \\"yyyy-MM-dd\\") (Date. (- (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\")) (* 1000 60 60 24))))" "\\n(.format (SimpleDateFormat. \\"yyyy-MM-dd\\") (Date. (+ (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\")) (* 1000 60 60 24))))" "  (defn get-date [date choice] \\r\\n    (.format (SimpleDateFormat. \\"yyyy-MM-dd\\") (Date. (choice (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") date)) (* 1000 60 60 24))))\\r\\n    )" "(get-date \\"2012-01-12\\" +)" "(get-date \\"2012-01-12\\" -)" "(get-date \\"2012-01-31\\" -)" "(get-date \\"2012-01-31\\" +)" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )\\r\\n(defrecord Ticket [price url])\\r\\n(defrecord Performer [name genre image_url])\\r\\n(defrecord Place [name city country location])\\r\\n(defrecord Event [name performer date Place Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])" " (defn send-flight-request [origincode destinationcode departure_date arrival_date]\\r\\n    (\\r\\n      (def requestFlight (generate-string  {\:request{\\r\\n                                                     \:slice [\\r\\n                                                             {\\r\\n                                                              \:origin origincode,\\r\\n                                                              \:destination destinationcode,\\r\\n                                                              \:date departure_date\\r\\n                                                              },\\r\\n                                                             {\\r\\n                                                              \:origin destinationcode,\\r\\n                                                              \:destination origincode,\\r\\n                                                              \:date arrival_date\\r\\n                                                              }\\r\\n                                                             ],\\r\\n                                                     \:passengers {\\r\\n                                                                  \:adultCount 1,\\r\\n                                                                  \:infantInLapCount 0,\\r\\n                                                                  \:infantInSeatCount 0,\\r\\n                                                                  \:childCount 0,\\r\\n                                                                  \:seniorCount 0\\r\\n                                                                  },\\r\\n                                                     \:solutions 1,\\r\\n                                                     \:refundable false\\r\\n                                                     }}))\\r\\n      (def options {\\r\\n                    \:body  requestFlight\\r\\n                    \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                              \\"Content-Type\\" \\"application/json\\"}\\r\\n                    \:content-type \:json\\r\\n                    \:accept \:json\\r\\n                    \:throw-entire-message? true}\\r\\n        )   \\r\\n      (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                 options))\\r\\n      \\r\\n      \\r\\n      (def body (parse-string (\:body response) true))\\r\\n      \\r\\n      \\r\\n      ))" "(send-flight-request \\"BCN\\" \\"BEG\\" \\"2015-04-30\\" \\"2015-05-02\\")" "(defn send-flight-request [origin_code destination_code departure_date arrival_date]\\r\\n    (\\r\\n      (def requestFlight (generate-string  {\:request{\\r\\n                                                     \:slice [\\r\\n                                                             {\\r\\n                                                              \:origin origin_code,\\r\\n                                                              \:destination destination_code,\\r\\n                                                              \:date departure_date\\r\\n                                                              },\\r\\n                                                             {\\r\\n                                                              \:origin destination_code,\\r\\n                                                              \:destination origin_code,\\r\\n                                                              \:date arrival_date\\r\\n                                                              }\\r\\n                                                             ],\\r\\n                                                     \:passengers {\\r\\n                                                                  \:adultCount 1,\\r\\n                                                                  \:infantInLapCount 0,\\r\\n                                                                  \:infantInSeatCount 0,\\r\\n                                                                  \:childCount 0,\\r\\n                                                                  \:seniorCount 0\\r\\n                                                                  },\\r\\n                                                     \:solutions 1,\\r\\n                                                     \:refundable false\\r\\n                                                     }}))\\r\\n      (def options {\\r\\n                    \:body  requestFlight\\r\\n                    \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                              \\"Content-Type\\" \\"application/json\\"}\\r\\n                    \:content-type \:json\\r\\n                    \:accept \:json\\r\\n                    \:throw-entire-message? true}\\r\\n        )   \\r\\n      (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                 options))\\r\\n      \\r\\n      \\r\\n      (def body (parse-string (\:body response) true))\\r\\n      \\r\\n      \\r\\n      ))" "(send-flight-request \\"BCN\\" \\"BEG\\" \\"2015-04-30\\" \\"2015-05-02\\")" " (def requestFlight (generate-string  {\:request{\\r\\n                                                     \:slice [\\r\\n                                                             {\\r\\n                                                              \:origin \\"BCN\\",\\r\\n                                                              \:destination \\"BEG\\",\\r\\n                                                              \:date \\"2015-04-30\\"\\r\\n                                                              },\\r\\n                                                             {\\r\\n                                                              \:origin \\"BEG\\",\\r\\n                                                              \:destination \\"BCN\\",\\r\\n                                                              \:date \\"2015-05-02\\"\\r\\n                                                              }\\r\\n                                                             ],\\r\\n                                                     \:passengers {\\r\\n                                                                  \:adultCount 1,\\r\\n                                                                  \:infantInLapCount 0,\\r\\n                                                                  \:infantInSeatCount 0,\\r\\n                                                                  \:childCount 0,\\r\\n                                                                  \:seniorCount 0\\r\\n                                                                  },\\r\\n                                                     \:solutions 1,\\r\\n                                                     \:refundable false\\r\\n                                                     }}))" " (def options {\\r\\n                    \:body  requestFlight\\r\\n                    \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                              \\"Content-Type\\" \\"application/json\\"}\\r\\n                    \:content-type \:json\\r\\n                    \:accept \:json\\r\\n                    \:throw-entire-message? true}\\r\\n        )" "  (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                 options))" "(def body (parse-string (\:body response) true))" "body" "  (defn send-flight-request [origin_code destination_code departure_date arrival_date]\\r\\n    \\r\\n      (def requestFlight (generate-string  {\:request{\\r\\n                                                     \:slice [\\r\\n                                                             {\\r\\n                                                              \:origin origin_code,\\r\\n                                                              \:destination destination_code,\\r\\n                                                              \:date departure_date\\r\\n                                                              },\\r\\n                                                             {\\r\\n                                                              \:origin destination_code,\\r\\n                                                              \:destination origin_code,\\r\\n                                                              \:date arrival_date\\r\\n                                                              }\\r\\n                                                             ],\\r\\n                                                     \:passengers {\\r\\n                                                                  \:adultCount 1,\\r\\n                                                                  \:infantInLapCount 0,\\r\\n                                                                  \:infantInSeatCount 0,\\r\\n                                                                  \:childCount 0,\\r\\n                                                                  \:seniorCount 0\\r\\n                                                                  },\\r\\n                                                     \:solutions 1,\\r\\n                                                     \:refundable false\\r\\n                                                     }}))\\r\\n      (def options {\\r\\n                    \:body  requestFlight\\r\\n                    \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                              \\"Content-Type\\" \\"application/json\\"}\\r\\n                    \:content-type \:json\\r\\n                    \:accept \:json\\r\\n                    \:throw-entire-message? true}\\r\\n        )   \\r\\n      (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                 options))\\r\\n      \\r\\n      \\r\\n      (def body (parse-string (\:body response) true))\\r\\n      \\r\\n      \\r\\n      )" "(send-flight-request \\"BCN\\" \\"BEG\\" \\"2015-04-30\\" \\"2015-05-02\\")" "body" "(def price {\:price (\:saleTotal (first (\:tripOption (\:trips body))))})" "price" "(def fare (\:segment (first (\:slice (first (\:tripOption (\:trips body)))))))" "fare" "(def fareInformation (for [i (range 0 (count fare))] (first(\:leg (fare i)))))" "fareInformation" "fare" "  (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=carrier(name),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))" " (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=aircraft/carrier(name),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))" "  (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=data/carrier(name),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))" "\\n(def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=data/carrier,trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))" "\\n(def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=carrier,trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))" "(def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/data/carrier(name),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))" "response" " (def body (parse-string (\:body response) true))" "body" "\\n(def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/data/carrier(code,name),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))" "response" "\\r\\n  (def body (parse-string (\:body response) true))" "body" "(def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/city(code,name),trips/data/carrier(code,name),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))\\r\\n  \\r\\n  \\r\\n  (def body (parse-string (\:body response) true))" "(def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/data/airport/city(code,name),trips/data/carrier(code,name),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))\\r\\n  \\r\\n  \\r\\n  (def body (parse-string (\:body response) true))" "(def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/data/airport/city,trips/data/carrier(code,name),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))" "response" "\\r\\n  \\r\\n  \\r\\n  (def body (parse-string (\:body response) true))" "body" " (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/data/city(code,name),trips/data/carrier(code,name),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))\\r\\n  \\r\\n  \\r\\n  (def body (parse-string (\:body response) true))" "body" "(def price {\:price (\:saleTotal (first (\:tripOption (\:trips body))))})" "PRICE" "price" "(\:tripOption (\:trips body))" "(first (\:tripOption (\:trips body)))" "(def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))]\\r\\n    (def connections (\:segment (nth i fares)))\\r\\n    (for [j (range 0 (count connections))]\\r\\n      \\r\\n      )\\r\\n    )" "faRES" "fares" " (for [i (range 0 (count fares))]\\r\\n    (def connections (\:segment (nth i fares))))" "(for [i (range 0 (count fares))]\\r\\n    (def connections (\:segment (nth fares i)))\\r\\n    (for [j (range 0 (count connections))]\\r\\n      \\r\\n      )\\r\\n    )" "(for [i (range 0 (count fares))]\\r\\n    (def connections (\:segment (nt)h fares i)))" "(for [i (range 0 (count fares))]\\r\\n    (def connections (\:segment (nth fares i))))" "connections" " (def price {\:price (\:saleTotal (first (\:tripOption (\:trips body))))})" "price" " (def cities (first (\:city (\:data (\:trips body)))))" "cities" " (def cities (\:city (\:data (\:trips body))))" "cities" "(map \:code cities)" "(keyword (map \:code cities))" "(map keyword (map \:code cities))" "(map \:name cities)" "(def kljucevi (map keyword (map \:code cities)))" "kljucevi" "(def vrednosti (map \:name cities))" "vrednosti" "(def mapa (zipmap kljucevi vrednosti))" "mapa" "(def kljucevi (map \:code cities))" "kljucevi" "(def mapa (zipmap kljucevi vrednosti))" "mapa" "\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))" "citymap" "\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))" "carriermap" "(\:pricing (\:tripOption (\:trips body)))" "(\:pricing (first (\:tripOption (\:trips body))))" "\\r\\n  (def fares (\:fare (first (\:slice (first (\:tripOption (\:trips body)))))))" "fares" "  (def fares (first (\:slice (first (\:tripOption (\:trips body))))))" "fares" "\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))" "fares" "(def carrs (first (\:tripOption (\:trips body))))" "carrs" "\\r\\n  (def carrs (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))" "carrs" "(def a)" "a" " (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))]\\r\\n    (def connections (\:segment (nth fares i)))\\r\\n    (for [j (range 0 (count connections))] \\r\\n      (def carrier (nth carriermap i))\\r\\n      (def car)\\r\\n       (def connection (first (\:leg (nth connections j))))\\r\\n       (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )\\r\\n       (->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n      )\\r\\n    )" " (for [j (range 0 (count connections))] \\r\\n      (def carrier (nth carriermap 0))\\r\\n      (def car)\\r\\n       (def connection (first (\:leg (nth connections j))))\\r\\n       (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )\\r\\n       (->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n      )" "    (for [j (range 0 (count connections))] \\r\\n      \\r\\n      (def car)\\n      )" " (for [j (range 0 (count connections))] \\r\\n      (def carrier (nth carriermap 0))\\r\\n      (def car)\\r\\n       (def connection (first (\:leg (nth connections j))))\\r\\n       (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )\\r\\n     )" " (for [j (range 0 (count connections))] \\r\\n      (def carrier (nth carriermap 0))\\r\\n      (def car)\\r\\n       (def connection (first (\:leg (nth connections j))))\\r\\n    )" " (for [j (range 0 (count connections))] \\r\\n     ( (def carrier (nth carriermap 0))\\r\\n      (def car)\\r\\n       (def connection (first (\:leg (nth connections j)))))\\r\\n    )" "connections" " (for [j (range 0 (count connections))] \\r\\n     ( (def carrier (nth carriermap 0))\\r\\n      (def car)\\r\\n       (def connection (first (\:leg (connections j)))))\\r\\n    )" "carriermap" "fare_carriers" " (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))]\\r\\n    (def connections (\:segment (nth fares i)))\\r\\n    (for [j (range 0 (count connections))] \\r\\n      (def carrier (nth fare_carriers i))\\r\\n      (def car)\\r\\n       (def connection (first (\:leg (connections j))))\\r\\n       (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )\\r\\n       (->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n      )\\r\\n    )" "(def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n    (\\r\\n    (def connections (\:segment (nth fares i)))\\r\\n    (for [j (range 0 (count connections))] \\r\\n      (\\r\\n      (def carrier (nth fare_carriers i))\\r\\n      (def car)\\r\\n       (def connection (first (\:leg (connections j))))\\r\\n       (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )\\r\\n       (->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n      ))\\r\\n    )" " (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n    \\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def car)\\r\\n          (def connection (first (\:leg (connections j))))\\r\\n          (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )\\r\\n          (->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n          ))\\r\\n      \\r\\n    )" "(for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def car)\\r\\n          (def connection (first (\:leg (connections j))))\\r\\n          (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )\\r\\n          (->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" " (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def car)\\r\\n          (def connection (first (\:leg (connections j))))\\r\\n          (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )\\r\\n          (->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n          )\\r\\n        )\\r\\n      )" "(count fares)" "(for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def car)\\r\\n          (def connection (first (\:leg (connections j))))\\r\\n          (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )\\r\\n          (->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" "(for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def car)\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )\\r\\n          (->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" " (def connections (\:segment (nth fares 0)))" "connections" "(def carrier (nth fare_carriers 0))" "carrier" "(def connection (first (\:leg (nth connections 0))))" "connection" " (if (or (.equals (\:origin carrier) (\:origin connection)) (.equals (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )" "\\n(if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (car ((\:carrier connection) carriermap))  )" "carriermap" "(\:carrier connection)" "connection" "carrier" "fare_carriers" "((\:carrier fare_carriers) carriermap)" "(\:carrier fare_carriers)" "(\:carrier carrier)" "((\:carrier carrier) carriermap)" "carriermap" "(\\"OS\\" carriermap)" "(carriermap \\"OS\\")" " (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (car (carriermap (\:carrier carrier)))  )" "\\n(if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )" "car" " (def car \\"\\")" "\\n(if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )" " (def car \\"\\")" "\\n(if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (car (carriermap (\:carrier carrier)))  )" "(def a)" "(a 3)" "(def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n         \\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" " (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )" "car" "(->Flight ((\:origin connection) citymap) ((\:destination connection) citymap) (\:departureTime connection) (\:arrivalTime connection) car)" " (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car)" "(defrecord Ticket [price url])\\r\\n(defrecord Performer [name genre image_url])\\r\\n(defrecord Place [name city country location])\\r\\n(defrecord Event [name performer date Place Ticket])\\r\\n(defrecord Flight [origin destination departure_date arrival_date carrier])\\r\\n(defrecord Trip [Flights price])\\r\\n(defrecord Result [Event Flight total_price total_distance])" " (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car)" " (def flights (atom []))" "(swap\! flights 1)" "(swap\! flights conj 1)" " (def flights (atom []))\\r\\n  (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n         \\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" "(for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n         \\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" "(for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n         \\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          \\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" " (def connections (\:segment (nth fares 0)))" " (def carrier (nth fare_carriers 0))" "\\r\\n          (def connection (first (\:leg (nth connections j))))" "\\r\\n          (def connection (first (\:leg (nth connections 0))))" " (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )" "(swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))" "flights" "  (for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" " (count connections)" "(count fares)" "(def flights (atom []))\\r\\n  (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))" "(for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" "(for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) \\"\\"))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" "(def e (atom []))" "(for [i (range 10)] (swap\! e conj i))" "(for [i (range 10)] (for [j (range 10)] (swap\! e conj j)))" "(for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares 0)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers 0))\\r\\n          (def connection (first (\:leg (nth connections 0))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" "(def connections (\:segment (nth fares 0)))" "(def carrier (nth fare_carriers 0))" "\\r\\n          (def connection (first (\:leg (nth connections 0))))" "   (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )" "(swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))" " (def connection (first (\:leg (nth connections 1))))" " (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )" "(swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))" "  (def connections (\:segment (nth fares 1)))" "  (def carrier (nth fare_carriers 1))" "  (def connection (first (\:leg (nth connections 0))))" "  (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )" "(swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))" " (def connection (first (\:leg (nth connections 1))))" "    (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )" " (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))" " (for [i (range 0 (count fares))] \\r\\n    \\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        \\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          \\r\\n        )\\r\\n       \\r\\n    )" " (for [i (range 0 (count fares))] \\r\\n    (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        \\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          \\r\\n        )\\r\\n       )\\r\\n    )" "(for [i (range 0 (count fares))] \\r\\n   (comp\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (comp\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" " (def flights (atom []))\\r\\n  (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n   (comp\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (comp\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" "flights" " (def flights (atom []))\\r\\n  (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n   (comp\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (comp\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )flights\\r\\n        )\\r\\n      ) \\r\\n    )" "(defn process-flight-response [body] \\r\\n  (def flights (atom []))\\r\\n  (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n   (comp\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (comp\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )\\r\\n  )" "(process-flight-response body)" " (def flights (atom []))\\r\\n  (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n   (\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )" "(def flights (atom []))\\r\\n  (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n   (comp\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (comp\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )flights" "(defn process-flight-response [body] \\r\\n  (def flights (atom []))\\r\\n  (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n   (comp\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (comp\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )flights\\r\\n  )" "(process-flight-response body)" "body" "(def flights (atom []))\\r\\n(defn process-flight-response [body] \\r\\n  \\r\\n  (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n   (comp\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (comp\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          )\\r\\n        )\\r\\n      ) \\r\\n    )flights\\r\\n  )" "(process-flight-response body)" "(defn process-flight-response [body] \\r\\n  \\r\\n  (def price (\:saleTotal (first (\:tripOption (\:trips body)))))\\r\\n  (def fare_carriers (\:fare (first (\:pricing (first (\:tripOption (\:trips body)))))))\\r\\n  (def cities  (\:city (\:data (\:trips body))))\\r\\n  (def citymap (zipmap (map \:code cities) (map \:name cities)))\\r\\n  (def carriers (\:carrier (\:data (\:trips body))))\\r\\n  (def carriermap (zipmap (map \:code carriers) (map \:name carriers)))\\r\\n  (def fares (\:slice (first (\:tripOption (\:trips body)))))\\r\\n  (for [i (range 0 (count fares))] \\r\\n   (comp\\r\\n      (def connections (\:segment (nth fares i)))\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (comp\\r\\n          (def carrier (nth fare_carriers i))\\r\\n          (def connection (first (\:leg (nth connections j))))\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) (def car (carriermap (\:carrier carrier)))  )\\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          flights)\\r\\n        )\\r\\n      ) \\r\\n    )flights\\r\\n  )" "(process-flight-response body)" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )\\r\\n(defrecord Ticket [price url])\\r\\n(defrecord Performer [name genre image_url])\\r\\n(defrecord Place [name city country location])\\r\\n(defrecord Event [name performer date Place Ticket])\\r\\n(defrecord Flight [origin destination departure_date arrival_date carrier])\\r\\n(defrecord Trip [Flights price])\\r\\n(defrecord Result [Event Flight total_price total_distance])" "(defn send-flight-request [origin_code destination_code departure_date arrival_date]\\r\\n  \\r\\n  (def requestFlight (generate-string  {\:request{\\r\\n                                                 \:slice [\\r\\n                                                         {\\r\\n                                                          \:origin origin_code,\\r\\n                                                          \:destination destination_code,\\r\\n                                                          \:date departure_date\\r\\n                                                          },\\r\\n                                                         {\\r\\n                                                          \:origin destination_code,\\r\\n                                                          \:destination origin_code,\\r\\n                                                          \:date arrival_date\\r\\n                                                          }\\r\\n                                                         ],\\r\\n                                                 \:passengers {\\r\\n                                                              \:adultCount 1,\\r\\n                                                              \:infantInLapCount 0,\\r\\n                                                              \:infantInSeatCount 0,\\r\\n                                                              \:childCount 0,\\r\\n                                                              \:seniorCount 0\\r\\n                                                              },\\r\\n                                                 \:solutions 1,\\r\\n                                                 \:refundable false\\r\\n                                                 }}))\\r\\n  (def options {\\r\\n                \:body  requestFlight\\r\\n                \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                          \\"Content-Type\\" \\"application/json\\"}\\r\\n                \:content-type \:json\\r\\n                \:accept \:json\\r\\n                \:throw-entire-message? true}\\r\\n    )   \\r\\n  (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/data/city(code,name),trips/data/carrier(code,name),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))\\r\\n  \\r\\n  \\r\\n  (def body (parse-string (\:body response) true))\\r\\n  \\r\\n  \\r\\n  )" "(send-flight-request \\"BEG\\" \\"BCN\\" \\"2015-20-05\\" \\"2015-23-05\\")" "(send-flight-request \\"BEG\\" \\"BCN\\" \\"2015-05-20\\" \\"2015-05-21\\")" "body" "(def flights (atom []))" "(defn process-flight-response [body]   \\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fare (\:slice tripOption)\\r\\n        data ((\:data (\:trips body))),\\r\\n        cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code cities) (map \:name cities))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n  (for [i (range 0 (count fares))] \\r\\n   (let [connections (\:segment (nth fares i))]\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n            (let [car (carriermap (\:carrier carrier))] \\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          flights))\\r\\n        )\\r\\n      ) \\r\\n    )flights)\\r\\n  ))" "(defn process-flight-response [body]   \\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fare (\:slice tripOption)\\r\\n        data ((\:data (\:trips body))),\\r\\n        cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code cities) (map \:name cities))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n  (for [i (range 0 (count fares))] \\r\\n   (let [connections (\:segment (nth fares i))]\\r\\n      (for [j (range 0 (count connections))] \\r\\n        (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n          (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n            (let [car (carriermap (\:carrier carrier))] \\r\\n          (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n          flights))\\r\\n        )\\r\\n      ) \\r\\n    ))\\r\\n  ))" "(defn process-flight-response [body]   \\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fare (\:slice tripOption)\\r\\n        data ((\:data (\:trips body))),\\r\\n        cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code cities) (map \:name cities))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(defn process-flight-response [body]   \\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data ((\:data (\:trips body))),\\r\\n        cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code cities) (map \:name cities))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(defn process-flight-response [body]   \\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data ((\:data (\:trips body))),\\r\\n        cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code cities) (map \:name cities))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (swap\! flights (conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car)))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(def \\n  tripOption  (first (\:tripOption (\:trips body))))" "(def  price (\:saleTotal tripOption))" "(def  fare_carriers  (\:fare (first (\:pricing tripOption)))\\r\\n        )" "(def  fares (\:slice tripOption))" "(def  data ((\:data (\:trips body))))" "(def  data (\:data (\:trips body)))" "(defn process-flight-response [body]   \\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n        cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code cities) (map \:name cities))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(defn process-flight-response [body]\\r\\n  (def flights [])\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n        cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code cities) (map \:name cities))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (conj flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(defn get-date [date choice] \\r\\n  (.format (SimpleDateFormat. \\"yyyy-MM-dd\\") (Date. (+ (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\")) (* 1000 60 60 24))))\\r\\n  )" "(import 'java.util.Date)" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n   (import 'java.util.Date)\\r\\n  )" "(defn get-date [date choice] \\r\\n  (.format (SimpleDateFormat. \\"yyyy-MM-dd\\") (Date. (+ (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\")) (* 1000 60 60 24))))\\r\\n  )" "(import 'java.text.SimpleDateFormat)" "(defn get-date [date choice] \\r\\n  (.format (SimpleDateFormat. \\"yyyy-MM-dd\\") (Date. (+ (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2012-02-10\\")) (* 1000 60 60 24))))\\r\\n  )" "(get-date \\"2000-02-02\\")" "(get-date \\"2000-02-02\\" +)" "(defn get-date [date choice] \\r\\n  (.format (SimpleDateFormat. \\"yyyy-MM-dd\\") (Date. (choice (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") date)) (* 1000 60 60 24))))\\r\\n  )" "(get-date \\"2000-02-02\\" +)" "(defn get-date [date choice] \\r\\n  (Date. (choice (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") date)) (* 1000 60 60 24)))\\r\\n  )" "(get-date \\"2000-02-02\\" +)" "(defn format-date [date]\\r\\n  (.format (SimpleDateFormat. \\"yyyy-MM-dd\\") date)\\r\\n  )" "(format-date (get-date \\"2010-01-01\\" +))" "data" "cities" " cities  (\:city data)" "citymap (zipmap (map \:code cities) (map \:name cities))" "(def citymap (zipmap (map \:code cities) (map \:name cities)))" "(def cities  (\:city data))" "(def citymap (zipmap (map \:code cities) (map \:name cities)))" "citymap" "(defn process-flight-response [body]\\r\\n  (def flights [])\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n        cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code cities) (map \:name cities))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (conj flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "body" "(defn send-flight-request [origin_code destination_code departure_date arrival_date]\\r\\n  \\r\\n  (def requestFlight (generate-string  {\:request{\\r\\n                                                 \:slice [\\r\\n                                                         {\\r\\n                                                          \:origin origin_code,\\r\\n                                                          \:destination destination_code,\\r\\n                                                          \:date departure_date\\r\\n                                                          },\\r\\n                                                         {\\r\\n                                                          \:origin destination_code,\\r\\n                                                          \:destination origin_code,\\r\\n                                                          \:date arrival_date\\r\\n                                                          }\\r\\n                                                         ],\\r\\n                                                 \:passengers {\\r\\n                                                              \:adultCount 1,\\r\\n                                                              \:infantInLapCount 0,\\r\\n                                                              \:infantInSeatCount 0,\\r\\n                                                              \:childCount 0,\\r\\n                                                              \:seniorCount 0\\r\\n                                                              },\\r\\n                                                 \:solutions 1,\\r\\n                                                 \:refundable false\\r\\n                                                 }}))\\r\\n  (def options {\\r\\n                \:body  requestFlight\\r\\n                \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                          \\"Content-Type\\" \\"application/json\\"}\\r\\n                \:content-type \:json\\r\\n                \:accept \:json\\r\\n                \:throw-entire-message? true}\\r\\n    )   \\r\\n  (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/data(city(code,name),carrier(code,name),airport(code,name)),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))\\r\\n  \\r\\n  \\r\\n  (def body (parse-string (\:body response) true))\\r\\n  \\r\\n  \\r\\n  )" "(send-flight-request \\"BEG\\" \\"BCN\\" \\"2015-05-20\\" \\"2015-05-21\\")" "body" "(defn send-flight-request [origin_code destination_code departure_date arrival_date]\\r\\n  \\r\\n  (def requestFlight (generate-string  {\:request{\\r\\n                                                 \:slice [\\r\\n                                                         {\\r\\n                                                          \:origin origin_code,\\r\\n                                                          \:destination destination_code,\\r\\n                                                          \:date departure_date\\r\\n                                                          },\\r\\n                                                         {\\r\\n                                                          \:origin destination_code,\\r\\n                                                          \:destination origin_code,\\r\\n                                                          \:date arrival_date\\r\\n                                                          }\\r\\n                                                         ],\\r\\n                                                 \:passengers {\\r\\n                                                              \:adultCount 1,\\r\\n                                                              \:infantInLapCount 0,\\r\\n                                                              \:infantInSeatCount 0,\\r\\n                                                              \:childCount 0,\\r\\n                                                              \:seniorCount 0\\r\\n                                                              },\\r\\n                                                 \:solutions 1,\\r\\n                                                 \:refundable false\\r\\n                                                 }}))\\r\\n  (def options {\\r\\n                \:body  requestFlight\\r\\n                \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                          \\"Content-Type\\" \\"application/json\\"}\\r\\n                \:content-type \:json\\r\\n                \:accept \:json\\r\\n                \:throw-entire-message? true}\\r\\n    )   \\r\\n  (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/data(city(code,name),carrier(code,name),airport),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))\\r\\n  \\r\\n  \\r\\n  (def body (parse-string (\:body response) true))\\r\\n  \\r\\n  \\r\\n  )" "(send-flight-request \\"BEG\\" \\"BCN\\" \\"2015-05-20\\" \\"2015-05-21\\")" "body" "\\r\\n(defn send-flight-request [origin_code destination_code departure_date arrival_date]\\r\\n  \\r\\n  (def requestFlight (generate-string  {\:request{\\r\\n                                                 \:slice [\\r\\n                                                         {\\r\\n                                                          \:origin origin_code,\\r\\n                                                          \:destination destination_code,\\r\\n                                                          \:date departure_date\\r\\n                                                          },\\r\\n                                                         {\\r\\n                                                          \:origin destination_code,\\r\\n                                                          \:destination origin_code,\\r\\n                                                          \:date arrival_date\\r\\n                                                          }\\r\\n                                                         ],\\r\\n                                                 \:passengers {\\r\\n                                                              \:adultCount 1,\\r\\n                                                              \:infantInLapCount 0,\\r\\n                                                              \:infantInSeatCount 0,\\r\\n                                                              \:childCount 0,\\r\\n                                                              \:seniorCount 0\\r\\n                                                              },\\r\\n                                                 \:solutions 1,\\r\\n                                                 \:refundable false\\r\\n                                                 }}))\\r\\n  (def options {\\r\\n                \:body  requestFlight\\r\\n                \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                          \\"Content-Type\\" \\"application/json\\"}\\r\\n                \:content-type \:json\\r\\n                \:accept \:json\\r\\n                \:throw-entire-message? true}\\r\\n    )   \\r\\n  (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/data(city(code,name),carrier(code,name),airport(code,city)),trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                             options))\\r\\n  \\r\\n  \\r\\n  (def body (parse-string (\:body response) true))\\r\\n  \\r\\n  \\r\\n  )" "(send-flight-request \\"BEG\\" \\"BCN\\" \\"2015-05-20\\" \\"2015-05-21\\")" "body" "(defn process-flight-response [body]\\r\\n  (def flights [])\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n      ;  cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (conj flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(def flights (list ()))" "flights" "\\r\\n(defn process-flight-response [body]\\r\\n  (def flights (list ()))\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n      ;  cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (conj flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(defn process-flight-response [body]\\r\\n  (def flights )\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n      ;  cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (conj flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(defn process-flight-response [body]\\r\\n  (def flights (atom (list ())))\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n      ;  cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (conj flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "\\r\\n(defn process-flight-response [body]\\r\\n  (def flights (atom (list ())))\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n      ;  cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (swap\! flights conj (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(defn process-flight-response [body]\\r\\n  (def flights [])\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n      ;  cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (concat flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "\\r\\n(defn process-flight-response [body]\\r\\n  (def flights [])\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n      ;  cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (cons flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "\\r\\n(defn process-flight-response [body]\\r\\n  (def flights [])\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n      ;  cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (conj flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(defn process-flight-response [body]\\r\\n  (def flights [])\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n      ;  cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (conj\! flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(defn process-flight-response [body]\\r\\n  (def flights (list ()))\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n      ;  cities  (\:city data),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (conj\! flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(defn process-flight-response [body]\\r\\n  (def flights [])\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (conj flights (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car))\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(def proc (process-flight-response body))" "(proc 0)" "(nth proc 0)" "((nth proc 0)0)" "((nth proc 0) 0)" "(nth (nth proc 0) 0)" "(nth (nth proc 0) 1)" "((nth (nth proc 0) 1)0)" "(defn process-flight-response [body]\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (\:departureTime connection) (\:arrivalTime connection) car)\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(defn process-flight-response [body]\\r\\n  (let [tripOption  (first (\:tripOption (\:trips body))), \\r\\n        price (\:saleTotal tripOption), \\r\\n        fare_carriers  (\:fare (first (\:pricing tripOption))),\\r\\n        fares (\:slice tripOption)\\r\\n        data (\:data (\:trips body)),\\r\\n        carriers (\:carrier data),\\r\\n        citymap (zipmap (map \:code (\:airport data)) (map \:name (\:city data)))\\r\\n        carriermap (zipmap (map \:code carriers) (map \:name carriers))\\r\\n        ] \\r\\n    (for [i (range 0 (count fares))] \\r\\n      (let [connections (\:segment (nth fares i))]\\r\\n        (for [j (range 0 (count connections))] \\r\\n          (let [carrier (nth fare_carriers i), connection (first (\:leg (nth connections j)))]\\r\\n            (if (or (\= (\:origin carrier) (\:origin connection)) (\= (\:destination carrier) (\:destination connection))) \\r\\n              (let [car (carriermap (\:carrier carrier))] \\r\\n                (->Flight (citymap (\:origin connection)) (citymap (\:destination connection)) (format-date (\:departureTime connection)) (format-date (\:arrivalTime connection)) car)\\r\\n                ))\\r\\n            )\\r\\n          ) \\r\\n        ))\\r\\n    ))" "(process-flight-response body)" "(get-date \\"2013-02-14\\")" "(get-date \\"2013-02-14\\" +)" "(Date. \\"2015-05-21T12\:35+02\:00\\")" "(Date. (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") \\"2015-05-21T12\:35+02\:00\\")))" "(defn parse-date [date]\\r\\n   (Date. (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") date)))\\r\\n  )" "(parse-date \\"2015-05-21T12\:35+02\:00\\")" "(defn crease-date [choice date]\\r\\n  (choice date  (* 1000 60 60 24) )\\r\\n  )" "(crease-date + (parse-date \\"2015-05-21T12\:35+02\:00\\"))" "(defn crease-date [choice date]\\r\\n  (choice (.getTime date)  (* 1000 60 60 24) )\\r\\n  )" "(crease-date + (parse-date \\"2015-05-21T12\:35+02\:00\\"))" "(defn crease-date [choice date]\\r\\n  (Date.(choice (.getTime date)  (* 1000 60 60 24) ))\\r\\n  )" "(crease-date + (parse-date \\"2015-05-21T12\:35+02\:00\\"))" "(defn parse-date [date]\\r\\n   (Date. (.getTime (.parse (SimpleDateFormat. \\"yyyy-MM-dd\\") date)))\\r\\n  )" "(parse-date \\"2015-05-21T12\:35+02\:00\\")" "(format-date (parse-date \\"2015-05-21T12\:35+02\:00\\"))"]
eclipse.preferences.version=1
