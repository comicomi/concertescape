cmdhistory=["(jetty/run-jetty \#'app {\:port 8080 \:join? false})" " (jetty/run-jetty \#'app {\:port 8080 \:join? false})" " (jetty/run-jetty \#'app* {\:port 8080 \:join? false})" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "clojure.main" "-main" "(-main)" "(\\"ads\\")" "-main" "clojure.main" "(jetty/run-jetty app {\:port 3000})" "run app" "(jetty/run-jetty app {\:port 3000})" "script/cljs-repl" "(script/cljs-repl)" "(ring server)" "(jetty/run-jetty app {\:port 3000})" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(ns concertescape.app)" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(ns concertescape.app)" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(ns concertescape.app)" "(jetty/run-jetty \#'app {\:port 8080 \:join? false})" "(ns concertescape.core)" " (jetty/run-jetty \#'app {\:port 3000 \:join? false})" "(ns concertescape.core)" "(run-server \#'app {\:port 3000 \:join? false})" "(run-server \#'app {\:port 8080})" "(ns concertescape.core)" "(server/run-server \#'app {\:port 3000 \:join? false})" "(httpserver/run-server \#'app {\:port 3000 \:join? false})" "(httpserver/run-server \#'app {\:port 8080 \:ip localhost \:join? false})" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(request-artist \\"avicii\\")" "(ns concertescape.core)" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(ns concertescape.core)" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(ns concertescape.core)" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [org.httpkit.client \:as client])\\r\\n  )" "(in-ns concertescape.core)" "(in-ns  concertescape.core)" "(ns  concertescape.core)" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(ns  concertescape.core)" "*ns*" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [org.httpkit.client \:as client])\\r\\n  )" "(httpserver/run-server \#'app {\:port 8080 \:ip \\"localhost\\" \:join? false})" "(request-flights \\"BEG\\" \\"BCN\\" \\"2015-04-23\\")" "(request-flights [\\"BEG\\" \\"BCN\\" \\"2015-04-23\\"])" "request-flights [\\"BEG\\" \\"BCN\\" \\"2015-04-23\\"]" "(request-flights [\\"BEG\\" \\"BCN\\" \\"2015-04-23\\"])" "(request-flights \\"BEG\\" \\"BCN\\" \\"2015-04-23\\")" "(request-flights \\"BEG\\" \\"BCN\\" \\"2015-04-23\\" \\"2015-04-30\\")" "(request-flights [\\"BEG\\" \\"BCN\\" \\"2015-04-23\\" \\"2015-04-30\\"])" "(request-flights \\"BEG\\" \\"BCN\\" \\"2015-04-23\\" \\"2015-04-30\\")" "(request-flights [\\"BEG\\" \\"BCN\\" \\"2015-04-23\\" \\"2015-04-30\\"])" "(request-flights \\"BEG\\" \\"BCN\\" \\"2015-04-23\\" \\"2015-04-30\\")" "(ns concertescape.core)" "(request-flights \\"BEG\\" \\"BCN\\" \\"2015-04-23\\" \\"2015-04-30\\")" "(def options {\:form-params {\:key \\"AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 }\\r\\n                  })" "options" "(let [response @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search\\"\\r\\n                                     options)            ;\\r\\n                            ;  \:form-params {\:key \\"AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                             ;               \:request {\:slice \\r\\n                              ;                        [{\:origin origin \\r\\n                               ;                         \:destination destination \\r\\n                                ;                        \:date departure_date}]\\r\\n                                 ;                     }} ; just like query-params, except sent in the body\\r\\n                              \\r\\n                                      ]\\r\\n      options)" " (let [response @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search\\"\\r\\n                                     options)            ;\\r\\n                            ;  \:form-params {\:key \\"AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                             ;               \:request {\:slice \\r\\n                              ;                        [{\:origin origin \\r\\n                               ;                         \:destination destination \\r\\n                                ;                        \:date departure_date}]\\r\\n                                 ;                     }} ; just like query-params, except sent in the body\\r\\n                              \\r\\n                                      ]\\r\\n      response)" "(request-flights \\"\\" \\"\\" \\"\\" \\"\\")" "(ns concertescape.core)" "(request-flights \\"\\" \\"\\" \\"\\" \\"\\")" "(def a 2)" "a" "(def b (+ a 2))" "b" "(request-flights \\"\\" \\"\\" \\"\\" \\"\\")" "(generate-string \:request {\\r\\n                                                            \:slice [\\r\\n                                                                    {\\r\\n                                                                     \:origin \\"BEG\\",\\r\\n                                                                     \:destination \\"BCN\\",\\r\\n                                                                     \:date \\"2015-04-21\\"\\r\\n                                                                     },\\r\\n                                                                    {\\r\\n                                                                     \:origin \\"BCN\\",\\r\\n                                                                     \:destination \\"BEG\\",\\r\\n                                                                     \:date \\"2015-04-28\\"\\r\\n                                                                     }\\r\\n                                                                    ],\\r\\n                                                            \:passengers {\\r\\n                                                                         \:adultCount 1,\\r\\n                                                                         \:infantInLapCount 0,\\r\\n                                                                         \:infantInSeatCount 0,\\r\\n                                                                         \:childCount 0,\\r\\n                                                                         \:seniorCount 0\\r\\n                                                                         },\\r\\n                                                            \:solutions 1,\\r\\n                                                            \:refundable false\\r\\n                                                            })" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [org.httpkit.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  )" "(generate-string \:request {\\r\\n                                                            \:slice [\\r\\n                                                                    {\\r\\n                                                                     \:origin \\"BEG\\",\\r\\n                                                                     \:destination \\"BCN\\",\\r\\n                                                                     \:date \\"2015-04-21\\"\\r\\n                                                                     },\\r\\n                                                                    {\\r\\n                                                                     \:origin \\"BCN\\",\\r\\n                                                                     \:destination \\"BEG\\",\\r\\n                                                                     \:date \\"2015-04-28\\"\\r\\n                                                                     }\\r\\n                                                                    ],\\r\\n                                                            \:passengers {\\r\\n                                                                         \:adultCount 1,\\r\\n                                                                         \:infantInLapCount 0,\\r\\n                                                                         \:infantInSeatCount 0,\\r\\n                                                                         \:childCount 0,\\r\\n                                                                         \:seniorCount 0\\r\\n                                                                         },\\r\\n                                                            \:solutions 1,\\r\\n                                                            \:refundable false\\r\\n                                                            })" "(generate-string { \:request {\\r\\n                                                            \:slice [\\r\\n                                                                    {\\r\\n                                                                     \:origin \\"BEG\\",\\r\\n                                                                     \:destination \\"BCN\\",\\r\\n                                                                     \:date \\"2015-04-21\\"\\r\\n                                                                     },\\r\\n                                                                    {\\r\\n                                                                     \:origin \\"BCN\\",\\r\\n                                                                     \:destination \\"BEG\\",\\r\\n                                                                     \:date \\"2015-04-28\\"\\r\\n                                                                     }\\r\\n                                                                    ],\\r\\n                                                            \:passengers {\\r\\n                                                                         \:adultCount 1,\\r\\n                                                                         \:infantInLapCount 0,\\r\\n                                                                         \:infantInSeatCount 0,\\r\\n                                                                         \:childCount 0,\\r\\n                                                                         \:seniorCount 0\\r\\n                                                                         },\\r\\n                                                            \:solutions 1,\\r\\n                                                            \:refundable false\\r\\n                                                            }})" "(generate-string {\:request {\\r\\n                                                             \:slice [\\r\\n                                                                     {\\r\\n                                                                      \:origin \\"BEG\\",\\r\\n                                                                      \:destination \\"BCN\\",\\r\\n                                                                      \:date \\"2015-04-21\\"\\r\\n                                                                      },\\r\\n                                                                     {\\r\\n                                                                      \:origin \\"BCN\\",\\r\\n                                                                      \:destination \\"BEG\\",\\r\\n                                                                      \:date \\"2015-04-28\\"\\r\\n                                                                      }\\r\\n                                                                     ],\\r\\n                                                             \:passengers {\\r\\n                                                                          \:adultCount 1,\\r\\n                                                                          \:infantInLapCount 0,\\r\\n                                                                          \:infantInSeatCount 0,\\r\\n                                                                          \:childCount 0,\\r\\n                                                                          \:seniorCount 0\\r\\n                                                                          },\\r\\n                                                             \:solutions 1,\\r\\n                                                             \:refundable false\\r\\n                                                             }})" "{\\r\\n                  \:headers {\\"content-type\\" \\"application/json; charset\=UTF-8\\"\\r\\n                           }}" "(generate-string {\:request {\\r\\n                                                             \:slice [\\r\\n                                                                     {\\r\\n                                                                      \:origin \\"BEG\\",\\r\\n                                                                      \:destination \\"BCN\\",\\r\\n                                                                      \:date \\"2015-04-21\\"\\r\\n                                                                      },\\r\\n                                                                     {\\r\\n                                                                      \:origin \\"BCN\\",\\r\\n                                                                      \:destination \\"BEG\\",\\r\\n                                                                      \:date \\"2015-04-28\\"\\r\\n                                                                      }\\r\\n                                                                     ],\\r\\n                                                             \:passengers {\\r\\n                                                                          \:adultCount 1,\\r\\n                                                                          \:infantInLapCount 0,\\r\\n                                                                          \:infantInSeatCount 0,\\r\\n                                                                          \:childCount 0,\\r\\n                                                                          \:seniorCount 0\\r\\n                                                                          },\\r\\n                                                             \:solutions 1,\\r\\n                                                             \:refundable false\\r\\n                                                             }})" "(request-flights \\"\\" \\"\\" \\"\\" \\"\\")" " (def requestFlight (generate-string {\\r\\n                                                             \:slice [\\r\\n                                                                     {\\r\\n                                                                      \:origin \\"BEG\\",\\r\\n                                                                      \:destination \\"BCN\\",\\r\\n                                                                      \:date \\"2015-04-21\\"\\r\\n                                                                      },\\r\\n                                                                     {\\r\\n                                                                      \:origin \\"BCN\\",\\r\\n                                                                      \:destination \\"BEG\\",\\r\\n                                                                      \:date \\"2015-04-28\\"\\r\\n                                                                      }\\r\\n                                                                     ],\\r\\n                                                             \:passengers {\\r\\n                                                                          \:adultCount 1,\\r\\n                                                                          \:infantInLapCount 0,\\r\\n                                                                          \:infantInSeatCount 0,\\r\\n                                                                          \:childCount 0,\\r\\n                                                                          \:seniorCount 0\\r\\n                                                                          },\\r\\n                                                             \:solutions 1,\\r\\n                                                             \:refundable false\\r\\n                                                             }))\\r\\n    (def options {\\r\\n                  \:headers {\\"content-type\\" \\"application/json; charset\=UTF-8\\"\\r\\n                           },                  \\r\\n                  \:form-params {\:request requestFlight\\r\\n                                }\\r\\n                  }\\r\\n      )" "(def response @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options\\n                                 )" "(def response @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options) )" "response" "(def response @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options) )" " (def requestFlight (generate-string {\\r\\n                                                             \:slice [\\r\\n                                                                     {\\r\\n                                                                      \:origin \\"BEG\\",\\r\\n                                                                      \:destination \\"BCN\\",\\r\\n                                                                      \:date \\"2015-04-21\\"\\r\\n                                                                      },\\r\\n                                                                     {\\r\\n                                                                      \:origin \\"BCN\\",\\r\\n                                                                      \:destination \\"BEG\\",\\r\\n                                                                      \:date \\"2015-04-28\\"\\r\\n                                                                      }\\r\\n                                                                     ],\\r\\n                                                             \:passengers {\\r\\n                                                                          \:adultCount 1,\\r\\n                                                                          \:infantInLapCount 0,\\r\\n                                                                          \:infantInSeatCount 0,\\r\\n                                                                          \:childCount 0,\\r\\n                                                                          \:seniorCount 0\\r\\n                                                                          },\\r\\n                                                             \:solutions 1,\\r\\n                                                             \:refundable false\\r\\n                                                             }))\\r\\n    (def options {\\r\\n                  \:headers {\\"content-type\\" \\"application/json; charset\=UTF-8\\"\\r\\n                           },                  \\r\\n                  \:request requestFlight\\r\\n                                \\r\\n                  }\\r\\n      )    \\r\\n    (str options)\\r\\n    (let [response @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "(def response @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                    options))" "response" " (def res\\r\\n      (client/request {\:url \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n               \:method \:post           \\r\\n               \:headers {\\"Content-Type\\" \\"application/json\\"}\\r\\n               \:form-params {\:request requestFlight} \\r\\n               })\\r\\n      )" "(client/request {\:url \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n               \:method \:post           \\r\\n               \:headers {\\"Content-Type\\" \\"application/json\\"}\\r\\n               \:form-params {\:request requestFlight} \\r\\n               })" "(client/request {\:url \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n               \:method \:post           \\r\\n               \:headers {\\"Content-Type\\" \\"application/json\\"}\\r\\n               \:form-params {\:request requestFlight} \\r\\n               } {})" "(def res\\r\\n      (client/request {\:url \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n               \:method \:post           \\r\\n               \:headers {\\"Content-Type\\" \\"application/json\\"}\\r\\n               \:form-params {\:request requestFlight} \\r\\n               } [res])" "(client/request {\:url \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n               \:method \:post           \\r\\n               \:headers {\\"Content-Type\\" \\"application/json\\"}\\r\\n               \:form-params {\:request requestFlight} \\r\\n               } {res})" "(def res\\r\\n      (client/request {\:url \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n               \:method \:post           \\r\\n               \:headers {\\"Content-Type\\" \\"application/json\\"}\\r\\n               \:form-params {\:request requestFlight} \\r\\n               } {res})\\r\\n      )" " (client/request {\:url \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n               \:method \:post           \\r\\n               \:headers {\\"Content-Type\\" \\"application/json\\"}\\r\\n               \:form-params {\:request requestFlight} \\r\\n               } {})" "(def res\\r\\n      (client/request {\:url \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n               \:method \:post           \\r\\n               \:headers {\\"Content-Type\\" \\"application/json\\"}\\r\\n               \:form-params {\:request requestFlight} \\r\\n               } {})\\r\\n      )" "res" "requestFlight" "(def requestFlight (generate-string {\:request{\\r\\n                                                             \:slice [\\r\\n                                                                     {\\r\\n                                                                      \:origin \\"BEG\\",\\r\\n                                                                      \:destination \\"BCN\\",\\r\\n                                                                      \:date \\"2015-04-21\\"\\r\\n                                                                      },\\r\\n                                                                     {\\r\\n                                                                      \:origin \\"BCN\\",\\r\\n                                                                      \:destination \\"BEG\\",\\r\\n                                                                      \:date \\"2015-04-28\\"\\r\\n                                                                      }\\r\\n                                                                     ],\\r\\n                                                             \:passengers {\\r\\n                                                                          \:adultCount 1,\\r\\n                                                                          \:infantInLapCount 0,\\r\\n                                                                          \:infantInSeatCount 0,\\r\\n                                                                          \:childCount 0,\\r\\n                                                                          \:seniorCount 0\\r\\n                                                                          },\\r\\n                                                             \:solutions 1,\\r\\n                                                             \:refundable false\\r\\n                                                             }}))" "requestFlight" "(request-flights \\"\\" \\"\\" \\"\\" \\"\\")" "  (def requestFlight (generate-string {\:request{\\r\\n                                                             \:slice [\\r\\n                                                                     {\\r\\n                                                                      \:origin \\"BEG\\",\\r\\n                                                                      \:destination \\"BCN\\",\\r\\n                                                                      \:date \\"2015-04-21\\"\\r\\n                                                                      },\\r\\n                                                                     {\\r\\n                                                                      \:origin \\"BCN\\",\\r\\n                                                                      \:destination \\"BEG\\",\\r\\n                                                                      \:date \\"2015-04-28\\"\\r\\n                                                                      }\\r\\n                                                                     ],\\r\\n                                                             \:passengers {\\r\\n                                                                          \:adultCount 1,\\r\\n                                                                          \:infantInLapCount 0,\\r\\n                                                                          \:infantInSeatCount 0,\\r\\n                                                                          \:childCount 0,\\r\\n                                                                          \:seniorCount 0\\r\\n                                                                          },\\r\\n                                                             \:solutions 1,\\r\\n                                                             \:refundable false\\r\\n                                                             }}))\\r\\n    (def options {\\r\\n                  \:body requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"} \\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json \\r\\n                  }\\r\\n      )" "options" "(def res @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)\\r\\n         )" "res" "(def requestFlight (generate-string {\\r\\n                                                             \:slice [\\r\\n                                                                     {\\r\\n                                                                      \:origin \\"BEG\\",\\r\\n                                                                      \:destination \\"BCN\\",\\r\\n                                                                      \:date \\"2015-04-21\\"\\r\\n                                                                      },\\r\\n                                                                     {\\r\\n                                                                      \:origin \\"BCN\\",\\r\\n                                                                      \:destination \\"BEG\\",\\r\\n                                                                      \:date \\"2015-04-28\\"\\r\\n                                                                      }\\r\\n                                                                     ],\\r\\n                                                             \:passengers {\\r\\n                                                                          \:adultCount 1,\\r\\n                                                                          \:infantInLapCount 0,\\r\\n                                                                          \:infantInSeatCount 0,\\r\\n                                                                          \:childCount 0,\\r\\n                                                                          \:seniorCount 0\\r\\n                                                                          },\\r\\n                                                             \:solutions 1,\\r\\n                                                             \:refundable false\\r\\n                                                             }))\\r\\n    (def options {\\r\\n                  \:request requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"} \\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json \\r\\n                  }\\r\\n      )" "(def response @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options))" "response" " (def requestFlight (generate-string {\\r\\n                                                             \:slice [\\r\\n                                                                     {\\r\\n                                                                      \:origin \\"BEG\\",\\r\\n                                                                      \:destination \\"BCN\\",\\r\\n                                                                      \:date \\"2015-04-21\\"\\r\\n                                                                      },\\r\\n                                                                     {\\r\\n                                                                      \:origin \\"BCN\\",\\r\\n                                                                      \:destination \\"BEG\\",\\r\\n                                                                      \:date \\"2015-04-28\\"\\r\\n                                                                      }\\r\\n                                                                     ],\\r\\n                                                             \:passengers {\\r\\n                                                                          \:adultCount 1,\\r\\n                                                                          \:infantInLapCount 0,\\r\\n                                                                          \:infantInSeatCount 0,\\r\\n                                                                          \:childCount 0,\\r\\n                                                                          \:seniorCount 0\\r\\n                                                                          },\\r\\n                                                             \:solutions 1,\\r\\n                                                             \:refundable false\\r\\n                                                             }))\\r\\n    (def options {\\r\\n                  \:request requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\",\\r\\n                            \\"content-type\\" \\"application/json\\"} \\r\\n                  \:accept \:json \\r\\n                  }\\r\\n      )" "(def response @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options))" "response" " (def requestFlight (generate-string {\:payload{\\r\\n                                                             \:slice [\\r\\n                                                                     {\\r\\n                                                                      \:origin \\"BEG\\",\\r\\n                                                                      \:destination \\"BCN\\",\\r\\n                                                                      \:date \\"2015-04-21\\"\\r\\n                                                                      },\\r\\n                                                                     {\\r\\n                                                                      \:origin \\"BCN\\",\\r\\n                                                                      \:destination \\"BEG\\",\\r\\n                                                                      \:date \\"2015-04-28\\"\\r\\n                                                                      }\\r\\n                                                                     ],\\r\\n                                                             \:passengers {\\r\\n                                                                          \:adultCount 1,\\r\\n                                                                          \:infantInLapCount 0,\\r\\n                                                                          \:infantInSeatCount 0,\\r\\n                                                                          \:childCount 0,\\r\\n                                                                          \:seniorCount 0\\r\\n                                                                          },\\r\\n                                                             \:solutions 1,\\r\\n                                                             \:refundable false\\r\\n                                                             }}))\\r\\n    (def options {\\r\\n                  \:form-params requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\",\\r\\n                            \\"content-type\\" \\"application/json\\"} \\r\\n                  \:accept \:json \\r\\n                  }\\r\\n      )" "(def response @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options))" "options" "(def re @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options))" "@(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                    options)" "options" "requestFlight" " (def requestFlight (generate-string {\:payload{\\r\\n                                                  \:slice [\\r\\n                                                          {\\r\\n                                                           \:origin \\"BEG\\",\\r\\n                                                           \:destination \\"BCN\\",\\r\\n                                                           \:date \\"2015-04-21\\"\\r\\n                                                           },\\r\\n                                                          {\\r\\n                                                           \:origin \\"BCN\\",\\r\\n                                                           \:destination \\"BEG\\",\\r\\n                                                           \:date \\"2015-04-28\\"\\r\\n                                                           }\\r\\n                                                          ],\\r\\n                                                  \:passengers {\\r\\n                                                               \:adultCount 1,\\r\\n                                                               \:infantInLapCount 0,\\r\\n                                                               \:infantInSeatCount 0,\\r\\n                                                               \:childCount 0,\\r\\n                                                               \:seniorCount 0\\r\\n                                                               },\\r\\n                                                  \:solutions 1,\\r\\n                                                  \:refundable false\\r\\n                                                  }}))\\r\\n    (def options {\\r\\n                  \:form-params {requestFlight}\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\",\\r\\n                            \\"content-type\\" \\"application/json\\"}  \\r\\n                  }\\r\\n      )" "(def requestFlight (generate-string {\:payload{\\r\\n                                                  \:slice [\\r\\n                                                          {\\r\\n                                                           \:origin \\"BEG\\",\\r\\n                                                           \:destination \\"BCN\\",\\r\\n                                                           \:date \\"2015-04-21\\"\\r\\n                                                           },\\r\\n                                                          {\\r\\n                                                           \:origin \\"BCN\\",\\r\\n                                                           \:destination \\"BEG\\",\\r\\n                                                           \:date \\"2015-04-28\\"\\r\\n                                                           }\\r\\n                                                          ],\\r\\n                                                  \:passengers {\\r\\n                                                               \:adultCount 1,\\r\\n                                                               \:infantInLapCount 0,\\r\\n                                                               \:infantInSeatCount 0,\\r\\n                                                               \:childCount 0,\\r\\n                                                               \:seniorCount 0\\r\\n                                                               },\\r\\n                                                  \:solutions 1,\\r\\n                                                  \:refundable false\\r\\n                                                  }}))" "requestFlight" "  (def options {\\r\\n                  \:form-params requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\",\\r\\n                            \\"content-type\\" \\"application/json\\"}  \\r\\n                  }\\r\\n      )" "@(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" " (def options {\\r\\n                  \:form-params requestFlight\\r\\n                  \:headers {\\r\\n                            \\"content-type\\" \\"application/json\\"}  \\r\\n                  }\\r\\n      )" "@(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "options" "  (def requestFlight (generate-string {\:payload{\\r\\n                                                  \:slice [\\r\\n                                                          {\\r\\n                                                           \:origin \\"BEG\\",\\r\\n                                                           \:destination \\"BCN\\",\\r\\n                                                           \:date \\"2015-04-21\\"\\r\\n                                                           },\\r\\n                                                          {\\r\\n                                                           \:origin \\"BCN\\",\\r\\n                                                           \:destination \\"BEG\\",\\r\\n                                                           \:date \\"2015-04-28\\"\\r\\n                                                           }\\r\\n                                                          ],\\r\\n                                                  \:passengers {\\r\\n                                                               \:adultCount 1,\\r\\n                                                               \:infantInLapCount 0,\\r\\n                                                               \:infantInSeatCount 0,\\r\\n                                                               \:childCount 0,\\r\\n                                                               \:seniorCount 0\\r\\n                                                               },\\r\\n                                                  \:solutions 1,\\r\\n                                                  \:refundable false\\r\\n                                                  }}))\\r\\n    (def options {\\r\\n                  \:form-params requestFlight\\r\\n                  \:headers {\\r\\n                            \\"contentType\\" \\"application/json\\"}  \\r\\n                  }\\r\\n      )" "(def response @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)\\r\\n          )" "(def requestFlight (generate-string {\\r\\n                                                  \:slice [\\r\\n                                                          {\\r\\n                                                           \:origin \\"BEG\\",\\r\\n                                                           \:destination \\"BCN\\",\\r\\n                                                           \:date \\"2015-04-21\\"\\r\\n                                                           },\\r\\n                                                          {\\r\\n                                                           \:origin \\"BCN\\",\\r\\n                                                           \:destination \\"BEG\\",\\r\\n                                                           \:date \\"2015-04-28\\"\\r\\n                                                           }\\r\\n                                                          ],\\r\\n                                                  \:passengers {\\r\\n                                                               \:adultCount 1,\\r\\n                                                               \:infantInLapCount 0,\\r\\n                                                               \:infantInSeatCount 0,\\r\\n                                                               \:childCount 0,\\r\\n                                                               \:seniorCount 0\\r\\n                                                               },\\r\\n                                                  \:solutions 1,\\r\\n                                                  \:refundable false\\r\\n                                                  }))\\r\\n    (def options {\\r\\n                  \:form-params {\:payload requestFlight}\\r\\n                  \:headers {\\r\\n                            \\"contentType\\" \\"application/json\\"}  \\r\\n                  }\\r\\n      )" " @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "   (def requestFlight (generate-string {\\r\\n                                                  \:slice [\\r\\n                                                          {\\r\\n                                                           \:origin \\"BEG\\",\\r\\n                                                           \:destination \\"BCN\\",\\r\\n                                                           \:date \\"2015-04-21\\"\\r\\n                                                           },\\r\\n                                                          {\\r\\n                                                           \:origin \\"BCN\\",\\r\\n                                                           \:destination \\"BEG\\",\\r\\n                                                           \:date \\"2015-04-28\\"\\r\\n                                                           }\\r\\n                                                          ],\\r\\n                                                  \:passengers {\\r\\n                                                               \:adultCount 1,\\r\\n                                                               \:infantInLapCount 0,\\r\\n                                                               \:infantInSeatCount 0,\\r\\n                                                               \:childCount 0,\\r\\n                                                               \:seniorCount 0\\r\\n                                                               },\\r\\n                                                  \:solutions 1,\\r\\n                                                  \:refundable false\\r\\n                                                  }))\\r\\n    (def options {\\r\\n                  \:payload requestFlight\\r\\n                  \:headers {\\r\\n                            \\"contentType\\" \\"application/json\\"}  \\r\\n                  }\\r\\n      )" " @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "  (def requestFlight (generate-string {\\r\\n                                                  \:slice [\\r\\n                                                          {\\r\\n                                                           \:origin \\"BEG\\",\\r\\n                                                           \:destination \\"BCN\\",\\r\\n                                                           \:date \\"2015-04-21\\"\\r\\n                                                           },\\r\\n                                                          {\\r\\n                                                           \:origin \\"BCN\\",\\r\\n                                                           \:destination \\"BEG\\",\\r\\n                                                           \:date \\"2015-04-28\\"\\r\\n                                                           }\\r\\n                                                          ],\\r\\n                                                  \:passengers {\\r\\n                                                               \:adultCount 1,\\r\\n                                                               \:infantInLapCount 0,\\r\\n                                                               \:infantInSeatCount 0,\\r\\n                                                               \:childCount 0,\\r\\n                                                               \:seniorCount 0\\r\\n                                                               },\\r\\n                                                  \:solutions 1,\\r\\n                                                  \:refundable false\\r\\n                                                  }))\\r\\n    (def options {\\r\\n                  \:body {\:payload requestFlight}\\r\\n                  \:headers {\\r\\n                            \\"contentType\\" \\"application/json\\"}  \\r\\n                  }\\r\\n      )" "@(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" " (def requestFlight (generate-string {\\r\\n                                                  \:slice [\\r\\n                                                          {\\r\\n                                                           \:origin \\"BEG\\",\\r\\n                                                           \:destination \\"BCN\\",\\r\\n                                                           \:date \\"2015-04-21\\"\\r\\n                                                           },\\r\\n                                                          {\\r\\n                                                           \:origin \\"BCN\\",\\r\\n                                                           \:destination \\"BEG\\",\\r\\n                                                           \:date \\"2015-04-28\\"\\r\\n                                                           }\\r\\n                                                          ],\\r\\n                                                  \:passengers {\\r\\n                                                               \:adultCount 1,\\r\\n                                                               \:infantInLapCount 0,\\r\\n                                                               \:infantInSeatCount 0,\\r\\n                                                               \:childCount 0,\\r\\n                                                               \:seniorCount 0\\r\\n                                                               },\\r\\n                                                  \:solutions 1,\\r\\n                                                  \:refundable false\\r\\n                                                  }))\\r\\n    (def options {\\r\\n                  \:body {\:payload requestFlight}\\r\\n                  \:headers {\:content-type \\"application/json\\"}  \\r\\n                  }\\r\\n      )" " @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "   (def requestFlight (generate-string { \:payload{\\r\\n                                                  \:slice [\\r\\n                                                          {\\r\\n                                                           \:origin \\"BEG\\",\\r\\n                                                           \:destination \\"BCN\\",\\r\\n                                                           \:date \\"2015-04-21\\"\\r\\n                                                           },\\r\\n                                                          {\\r\\n                                                           \:origin \\"BCN\\",\\r\\n                                                           \:destination \\"BEG\\",\\r\\n                                                           \:date \\"2015-04-28\\"\\r\\n                                                           }\\r\\n                                                          ],\\r\\n                                                  \:passengers {\\r\\n                                                               \:adultCount 1,\\r\\n                                                               \:infantInLapCount 0,\\r\\n                                                               \:infantInSeatCount 0,\\r\\n                                                               \:childCount 0,\\r\\n                                                               \:seniorCount 0\\r\\n                                                               },\\r\\n                                                  \:solutions 1,\\r\\n                                                  \:refundable false\\r\\n                                                  }}))" "  (def options {\\r\\n                  \:body requestFlight\\r\\n                  \:headers {\\"content-type\\" \\"application/json\\"}  \\r\\n                  }\\r\\n      )" " @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "(def options {\\r\\n                  \:request requestFlight\\r\\n                  \:headers {\\"content-type\\" \\"application/json\\"}  \\r\\n                  }\\r\\n      )   \\r\\n    \\r\\n    \\r\\n @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "  (def options {\\r\\n                  \:payload requestFlight\\r\\n                  \:headers {\\"content-type\\" \\"application/json\\"}  \\r\\n                  }\\r\\n      )   \\r\\n    \\r\\n    \\r\\n   @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "  (def requestFlight (generate-string { \:request{\\r\\n                                                  \:slice [\\r\\n                                                          {\\r\\n                                                           \:origin \\"BEG\\",\\r\\n                                                           \:destination \\"BCN\\",\\r\\n                                                           \:date \\"2015-04-21\\"\\r\\n                                                           },\\r\\n                                                          {\\r\\n                                                           \:origin \\"BCN\\",\\r\\n                                                           \:destination \\"BEG\\",\\r\\n                                                           \:date \\"2015-04-28\\"\\r\\n                                                           }\\r\\n                                                          ],\\r\\n                                                  \:passengers {\\r\\n                                                               \:adultCount 1,\\r\\n                                                               \:infantInLapCount 0,\\r\\n                                                               \:infantInSeatCount 0,\\r\\n                                                               \:childCount 0,\\r\\n                                                               \:seniorCount 0\\r\\n                                                               },\\r\\n                                                  \:solutions 1,\\r\\n                                                  \:refundable false\\r\\n                                                  }}))\\r\\n    (def options {\\r\\n                  \:payload requestFlight\\r\\n                  \:headers {\\"content-type\\" \\"application/json\\"}  \\r\\n                  }\\r\\n      )" "options" "@(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "  (def requestFlight (generate-string { \:request{\\r\\n                                                  \:slice [\\r\\n                                                          {\\r\\n                                                           \:origin \\"BEG\\",\\r\\n                                                           \:destination \\"BCN\\",\\r\\n                                                           \:date \\"2015-04-21\\"\\r\\n                                                           },\\r\\n                                                          {\\r\\n                                                           \:origin \\"BCN\\",\\r\\n                                                           \:destination \\"BEG\\",\\r\\n                                                           \:date \\"2015-04-28\\"\\r\\n                                                           }\\r\\n                                                          ],\\r\\n                                                  \:passengers {\\r\\n                                                               \:adultCount 1,\\r\\n                                                               \:infantInLapCount 0,\\r\\n                                                               \:infantInSeatCount 0,\\r\\n                                                               \:childCount 0,\\r\\n                                                               \:seniorCount 0\\r\\n                                                               },\\r\\n                                                  \:solutions 1,\\r\\n                                                  \:refundable false\\r\\n                                                  }}))\\r\\n    (def options {\\r\\n                  \:payload requestFlight\\r\\n                  \:headers {\\"contentType\\" \\"application/json\\"}  \\r\\n                  }\\r\\n      )" "@(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  )" " (def requestFlight (generate-string { \:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body {\:payload requestFlight}\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json}\\r\\n      )" "options" "(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "    (def requestFlight (generate-string { \:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:payload requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json}\\r\\n      )" "(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "(def response @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options))" "    (def requestFlight (generate-string { \:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:payload requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )" "(def response @(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options))" "   (def requestFlight (generate-string { \:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:payload requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"}\\r\\n                 ; \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )" "(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "  (def requestFlight (generate-string { \:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body {\:payload requestFlight}\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )" "(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "(def requestFlight (generate-string { \:payload {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )" "(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" " (def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )" "(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "(request-flight \\"\\" \\"\\" \\"\\" \\"\\")" "(request-flights \\"\\" \\"\\" \\"\\" \\"\\")" " (def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )" "(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options)" "(def r (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                 options))" "r" "(request-flights \\"\\" \\"\\" \\"\\" \\"\\")" "(client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                options)" "(def r (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                options))" "(\:body r)" "(request-flights \\"\\" \\"\\" \\"\\" \\"\\")" "(def r (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                options))" "(def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  )" "(def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )" "    (let [response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                options)\\r\\n          ]\\r\\n      \\r\\n      \:body response)" "(def r response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                options))" "(def r (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0\\"\\r\\n                                options))" "(\:body r)" "(parse-string (\:body r))" "(def i (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0,fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                options))" "(def i (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                options))" " (parse-string (\:body i))" "(def body (parse-string (\:body i)))" "(def relevantInfo {\:price (\\"tripOption\\" (\\"trips\\" body))})" "(def relevantInfo {\:price (\\"trips\\" body)})" "(def relevantInfo {\:price (\:trips body)})" "relevantInfo" "body" "(def relevantInfo {\:price (\\"trips\\" body)})" "(def body (parse-string (\:body i) true))" "body" "(def relevantInfo {\:price (\:trips body)})" "relevantInfo" "(def relevantInfo {\:price (\:tripOption (\:trips body))})" "relevantInfo" "(def relevantInfo {\:price (first (\:tripOption (\:trips body)))})" "relevantInfo" "(def relevantInfo {\:price (first (\:saleTotal (\:price (\:tripOption (\:trips body)))))})" "relevantInfo" "(def relevantInfo {\:price  (\:saleTotal (\:price (first(\:tripOption (\:trips body)))))})" "relevantInfo" "(def relevantInfo {\:price (first (\:tripOption (\:trips body)))})" "relevantInfo" "(def relevantInfo {\:price  (\:saleTotal (\:price (first(\:tripOption (\:trips body)))))})" "relevantInfo" "(def relevantInfo {\:price (first (\:tripOption (\:trips body)))})" "relevantInfo" "(def relevantInfo {\:price (\:price (first (\:tripOption (\:trips body))))})" "relevantInfo" "(def relevantInfo {\:pricee (\:price (first (\:tripOption (\:trips body))))})" "relevantInfo" "(def relevantInfo {\:price (first (\:tripOption (\:trips body)))})" "relevantInfo" "(def relevantInfo {\:price (\:saleTotal (first (\:tripOption (\:trips body))))})" "relevantInfo" "body" " (def fare (\:slice (second (\:tripOption (\:trips body)))))" "fare" " (def fare (second (\:tripOption (\:trips body))))" "fare" "(def fare (\:slice (first (\:tripOption (\:trips body)))))" "fare" "    (def fare (\:segment (first (\:slice (first (\:tripOption (\:trips body)))))))" "fare" " (map (\:leg) fare)" " (map (\:leg fare))" "(import 'jml.clustering.NMF)" "(import jml.clustering.NMF)" "(require jml.clustering.NMF)" "(jml.clustering.NMF/runNMF)" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  )" "(import jml.clustering.JML)" "(import 'jml.clustering.JML)" "(import 'jml.clustering.NMF)" "(import jml.clustering.NMF)" "(import jml.clustering.NMF.)" "(import 'jml.clustering.NMF.)" "(import 'jml.clustering.NMF)" "(import 'jml.clustering.*)" "(import 'jml.clustering)" "(import jml.clustering)" "(import jml.clustering.NMF)" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  )" "(defn send-flight-request [origin destination departure_date arrival_date]\\r\\n  (\\r\\n    (def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )   \\r\\n    \\r\\n    (let [response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                options)\\r\\n          ]\\r\\n      \\r\\n       (parse-string (\:body response) true))\\r\\n     \\r\\n    ))" "(def r (send-flight-request \\"\\" \\"\\" \\"\\" \\"\\"))" "(def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )   \\r\\n    \\r\\n    (let [response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                options)\\r\\n          ]\\r\\n      \\r\\n       (parse-string (\:body response) true))" "(send-flight-request \\"\\" \\"\\" \\"\\" \\"\\")" "send-flight-request" "(send-flight-request \\"\\" \\"\\" \\"\\" \\"\\")" "(def r (send-flight-request 1 2 3 4))" "(defn dd [x] (+ 2 x))" "(dd 2)" "(send-flight-request \\"\\" \\"\\" \\"\\" \\"\\")" "send-flight-request" "(defn send-flight-request [origin destination departure_date arrival_date]\\r\\n  (\\r\\n    (def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )   \\r\\n    (def bodyres)\\r\\n    (let [response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                options)\\r\\n          ]\\r\\n      \\r\\n       (bodyres (parse-string (\:body response) true)))\\r\\n     \\r\\n    ))" "(send-flight-request \\"\\" \\"\\" \\"\\" \\"\\")" "(defn send-flight-request [origin destination departure_date arrival_date]\\r\\n  (\\r\\n    (def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )   \\r\\n    (def bodyres)\\r\\n    (let [response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                options)\\r\\n          ]\\r\\n      \\r\\n       (bodyres (parse-string (\:body response) true)))\\r\\n    bodyres\\r\\n     \\r\\n    ))" "(send-flight-request \\"\\" \\"\\" \\"\\" \\"\\")" "(defn send-flight-request [origin destination departure_date arrival_date]\\r\\n  (\\r\\n    (def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )   \\r\\n    (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                options))\\r\\n         \\r\\n      \\r\\n    (parse-string (\:body response) true)\\r\\n   \\r\\n     \\r\\n    ))" "(send-flight-request \\"\\" \\"\\" \\"\\" \\"\\")" "  (def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )   \\r\\n    (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                options))\\r\\n         \\r\\n      \\r\\n    (parse-string (\:body response) true)" "(send-flight-request [\\"\\" \\"\\" \\"\\" \\"\\"])" "(send-flight-request \= \= \= \=)" "\\r\\n    (def requestFlight (generate-string  {\:request{\\r\\n                                                   \:slice [\\r\\n                                                           {\\r\\n                                                            \:origin \\"BEG\\",\\r\\n                                                            \:destination \\"BCN\\",\\r\\n                                                            \:date \\"2015-04-21\\"\\r\\n                                                            },\\r\\n                                                           {\\r\\n                                                            \:origin \\"BCN\\",\\r\\n                                                            \:destination \\"BEG\\",\\r\\n                                                            \:date \\"2015-04-28\\"\\r\\n                                                            }\\r\\n                                                           ],\\r\\n                                                   \:passengers {\\r\\n                                                                \:adultCount 1,\\r\\n                                                                \:infantInLapCount 0,\\r\\n                                                                \:infantInSeatCount 0,\\r\\n                                                                \:childCount 0,\\r\\n                                                                \:seniorCount 0\\r\\n                                                                },\\r\\n                                                   \:solutions 1,\\r\\n                                                   \:refundable false\\r\\n                                                   }}))\\r\\n    (def options {\\r\\n                  \:body  requestFlight\\r\\n                  \:headers {\\"X-Api-Version\\" \\"2\\"\\r\\n                            \\"Content-Type\\" \\"application/json\\"}\\r\\n                  \:content-type \:json\\r\\n                  \:accept \:json\\r\\n                  \:throw-entire-message? true}\\r\\n      )   \\r\\n    (def response (client/post \\"https\://www.googleapis.com/qpxExpress/v1/trips/search?key\=AIzaSyDYM93xp8iYFCxfTdvfk2z3BpLBfXqDxB0&fields\=trips/tripOption(saleTotal,slice/segment/leg(origin,destination,arrivalTime,departureTime),pricing/fare(origin,destination,carrier))\\"\\r\\n                                options))\\r\\n         \\r\\n      \\r\\n    (def body (parse-string (\:body response) true))" "body" " (def price {\:price (\:saleTotal (first (\:tripOption (\:trips body))))})\\r\\n      (def fare (\:segment (first (\:slice (first (\:tripOption (\:trips body)))))))" "fare" "price" "(for [i (range 0 (count fare))] (\:leg (fare i)))" "(for [i (range 0 (count fare))] (first(\:leg (fare i))))" "(fare (for [i (range 0 (count fare))] (first(\:leg (fare i)))))" "(def fareInformation (for [i (range 0 (count fare))] (first(\:leg (fare i)))))" "fareInformation" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(defn load-airport-codes [] \\r\\n  (\\r\\n    (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file))\\r\\n    )\\r\\n    )\\r\\n  )" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "\\r\\n(defn load-airport-codes [] \\r\\n  (\\r\\n    (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file))\\r\\n    )\\r\\n    )\\r\\n  )" "load-airport-codes" "(def a load-airport-codes)" "a" "@a" "a" "(list a)" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "\\r\\n(defn load-airport-codes [] \\r\\n  (\\r\\n    (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (take-csv (slurp file))\\r\\n    )\\r\\n    )\\r\\n  )" "\\r\\n(defn load-airport-codes [] \\r\\n  (\\r\\n    (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/take-csv (slurp file))\\r\\n    )\\r\\n    )\\r\\n  )" "\\r\\n(defn load-airport-codes [] \\r\\n  (\\r\\n    (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file))\\r\\n    )\\r\\n    )\\r\\n  )" "load-airport-codes" "(def a load-airport-codes)" "a" "@a" "(a 1)" "(1 a)" "(deref a)" "(defn load-airport-codes [] \\r\\n  (\\r\\n   (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (take-csv (slurp file))\\r\\n          ))\\r\\n    )\\r\\n  )" "(defn load-airport-codes [] \\r\\n  (\\r\\n   (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file))\\r\\n          ))\\r\\n    )\\r\\n  )" "a" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n       (csv/read-csv (slurp file))\\r\\n             ))" "a" "(into {} a)" " (def options {\:separator \\";\\"})" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (take-csv (slurp file) & options)\\r\\n          ))" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file) & options)\\r\\n          ))" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file) options)\\r\\n          ))" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file)&options)\\r\\n          ))" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file) options)\\r\\n          ))" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file) \:separator \\";\\")\\r\\n          ))" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n          ))" "a" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file) \:separator \\\\; \:quote \\\\\\")\\r\\n          ))" "a" "(defn load-airport-codes [] \\r\\n  (\\r\\n   (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (take-csv (slurp file) & \:separator \\\\;)\\r\\n          ))\\r\\n    a)\\r\\n  )" "(defn load-airport-codes [] \\r\\n  (\\r\\n   (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (take-csv (slurp file) & \:separator \\\\;)\\r\\n          ))\\r\\n    )a\\r\\n  )" "(defn load-airport-codes [] \\r\\n  (\\r\\n   (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file) & \:separator \\\\;)\\r\\n          ))\\r\\n    a)\\r\\n  )" "(defn load-airport-codes [] \\r\\n  (\\r\\n   (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n          ))\\r\\n    a)\\r\\n  )" "load-airport-codes" "(def a load-airport-codes)" "a" "(a load-airport-codes)" "(def b load-airport-codes)" "(def abb load-airport-codes)" "(abb load-airport-codes)" "(def g)" "(load-airport-codes g)" "(defn load-airport-codes [] \\r\\n  \\r\\n   (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n          ))\\r\\n  a  \\r\\n  )" "a" "\\r\\n(defn load-airport-codes [] \\r\\n  \\r\\n   (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n    (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n          ))\\r\\n  a  \\r\\n  )" "(load-airport-codes)" "(def ga load-airport-codes)" "ga" "(def ga (load-airport-codes))" "ga" "(defn get-airport-codes-map [list]\\r\\n  (\\r\\n    (def map {})\\r\\n    (for i (range 0 (count list)) \\r\\n      (let [element (nth list i)]\\r\\n        (assoc map (nth 3 element) (nth 1 element)))\\r\\n      )\\r\\n    )map\\r\\n  )" "(defn get-airport-codes-map [list]\\r\\n  (\\r\\n    (def mapica {})\\r\\n    (for i (range 0 (count list)) \\r\\n      (let [element (nth list i)]\\r\\n        (assoc mapica (nth 3 element) (nth 1 element)))\\r\\n      )\\r\\n    )mapica\\r\\n  )" "(defn get-airport-codes-map [list]\\r\\n  (\\r\\n    (def mapica {})\\r\\n    (for [i (range 0 (count list))] \\r\\n      (let [element (nth list i)]\\r\\n        (assoc mapica (nth 3 element) (nth 1 element)))\\r\\n      )\\r\\n    )mapica\\r\\n  )" "(get-airport-codes-map)" "(get-airport-codes-map ga)" "ga" "(for [i (range 0 (count ga))] \\r\\n      (let [element (nth ga i)]\\r\\n        ((nth 3 element) (nth 1 element)))\\r\\n      )" "(for [i (range 0 (count ga))] \\r\\n      (let [elementic (nth ga i)]\\r\\n        ((elementic 3) (elementic 3)))\\r\\n      )" "[1 2 3]" "(0 [1 2 3 4])" "([1 2 3 4] 0)" "(for [i (range 0 (count ga))] \\r\\n      (let [elementic (nth ga i)]\\r\\n        ((elementic 3)))\\r\\n      )" "(nth ga 1)" "(nth ga 10)" "(def r (nth ga 10))" "r" "{(r 1)}" "{(r 1) (r 3)}" "(def ra {})" "(assoc ra (r 1) (r 3))" "(assoc ra (r 0) (r 2))" "ra" "(def ra (atom {}))" "(assoc ra (r 0) (r 2))" "(assoc @ra (r 0) (r 2))" "(assoc @ra (r 1) (r 3))" "@ra" "(swap\! ra assoc (r 1) (r 3))" "ra" "(swap\! ra assoc (r 0) (r 2))" "ra" "(defn get-airport-codes-map [list]\\r\\n  (\\r\\n    (def mapica (atom {}))\\r\\n    (for [i (range 0 (count list))] \\r\\n      (let [elem (nth list i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n      )\\r\\n    )@mapica\\r\\n  )" "(get-airport-codes-map ga)" "(def mapica (atom {}))\\r\\n    (for [i (range 0 (count list))] \\r\\n      (let [elem (nth list i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n      )\\r\\n    @mapica" " (def mapica (atom {}))\\r\\n    (for [i (range 0 (count ga))] \\r\\n      (let [elem (nth ga i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n      )\\r\\n    @mapica" "mapica" "@mapica" "mapica" " (def mapica (atom {}))\\r\\n    (for [i (range 0 (count list))] \\r\\n      (let [elem (nth list i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n      )" "mapica" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" "a" "(def mapica (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n      )" "mapica" "(count a)" " (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" " (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" "(count a)" "(def mapica (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n      )" "mapica" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" "a" "(a (take 10 a))" "(def aaa a)" "aaa" "(aaa (take 10 aaa))" "(take 10 aaa)" "(def prvi (take 10 aaa))" "prvi" "(def mapica (atom {}))\\r\\n    (for [i (range 0 (count prvi))] \\r\\n      (let [elem (nth prvi i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n      )" "mapica" "@mapica" "(for [i (range 0 (count prvi))] \\r\\n         (let [elem (nth prvi i)]\\r\\n           (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n         )" "(for [i (range 0 (count prvi))] \\r\\n         (let [elem (nth prvi i)]\\r\\n           (swap\! mapica (assoc (elem 3) (elem 1))))\\r\\n         )" "(for [i (range 0 (count prvi))] \\r\\n         (let [elem (nth prvi i)]\\r\\n           (swap\! mapica (assoc mapica (elem 3) (elem 1))))\\r\\n         )" "(for [i (range 0 (count prvi))] \\r\\n         (let [elem (nth prvi i)]\\r\\n           (swap\! mapica (assoc @mapica (elem 3) (elem 1))))\\r\\n         )" "@mapica" "(for [i (range 0 (count prvi))] \\r\\n         (let [elem (nth prvi i)]\\r\\n           (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n         )" "(swap\! mapica assoc \\"a\\" \\"b\\")" "(swap\! mapica assoc \\"a\\" \\"b\\");" " (for [i (range 0 (count list))] \\r\\n      (let [elem (nth list i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n      )" "(def mapica (atom {}))\\r\\n    (for [i (range 0 (count aaa))] \\r\\n      (let [elem (nth aaa i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n      )" "mapica" "  (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" " (def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" "(def aa (take 10 a))" "aa" "(def mapica (atom {}))\\r\\n    (for [i (range 0 (count aa))] \\r\\n      (let [elem (nth aa i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)))\\r\\n      ) @mapica" "@mapica" "(def mapica (atom {}))\\r\\n       (for [i (range 0 (count aa))] \\r\\n         (let [elem (nth aa i)]\\r\\n           (swap\! mapica assoc (elem 3) (elem 1)))\\n         i\\r\\n         ) @mapica" "(def mapica (atom {}))\\r\\n       (for [i (range 0 (count aa))] \\r\\n         (let [elem (nth aa i)]\\r\\n           (swap\! mapica assoc (elem 3) (elem 1)) i)\\n         \\r\\n         ) @mapica" "(def mapica (atom {}))\\r\\n          (for [i (range 0 (count a))] \\r\\n            (let [elem (nth a i)]\\r\\n              (swap\! mapica assoc (elem 3) (elem 1)) i)\\r\\n            \\r\\n            ) @mapica" "(keywordize-keys mapica)" "(defn modify-keys [f m] (zipmap (map f (keys mapica)) (vals mapica)))" "modify-keys" "@modify-keys" "(def modif ((zipmap (map keyword (keys @mapica)) (vals @mapica))))" "(def modif ((zipmap (map keyword (keys mapica)) (vals mapica))))" "(zipmap (map keyword (keys mapica)) (vals mapica))" "(zipmap (map keyword (keys @mapica)) (vals @mapica))" "(def aar (zipmap (map keyword (keys @mapica)) (vals @mapica)))" "aar" "(def mapica (atom {}))\\r\\n    (for [i (range 0 (count list))] \\r\\n      (let [elem (nth list i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)) i)\\r\\n      )\\r\\n    \\r\\n  (def mapa (zipmap (map keyword (keys @mapica)) (vals @mapica)))\\r\\n  mapa" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(def a (with-open [file (io/reader \\"IATAairCodes.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" " (def mapica (atom {}))\\r\\n    (for [i (range 0 (count list))] \\r\\n      (let [elem (nth list i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)) i)\\r\\n      )\\r\\n   \\r\\n  (def mapa (zipmap (map keyword (keys @mapica)) (vals @mapica)))\\r\\n   mapa" " (def mapica (atom {}))\\r\\n    (for [i (range 0 (count a))] \\r\\n      (let [elem (nth a i)]\\r\\n        (swap\! mapica assoc (elem 3) (elem 1)) i)\\r\\n      )\\r\\n   \\r\\n  (def mapa (zipmap (map keyword (keys @mapica)) (vals @mapica)))\\r\\n   mapa" "mapa" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" " (def a (with-open [file (io/reader \\"airports.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\;)\\r\\n           ))" "a" " (def a (with-open [file (io/reader \\"airports.csv\\")]\\r\\n           (csv/read-csv (slurp file) \:separator \\\\,)\\r\\n           ))" "a" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(defn request-artist [artist]\\r\\n  ((let [response (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=\\" artist))]\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (@response)\\r\\n     ))\\r\\n  )" "(request-artist \\"avicii\\")" " (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=\\" artist))" " (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=avicii\\"))" "(let [res (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=\\" artist))]\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     res\\r\\n     )" "(let [res (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=avicii\\"))]\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     res\\r\\n     )" "(let [res (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=\\" artist))]\\r\\n        ;; Handle responses one-by-one, blocking as necessary\\r\\n        ;; Other keys \:headers \:body \:error \:opts\\r\\n        (parse-string res)\\r\\n        )" "(let [res (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=avicii\\"))]\\r\\n        ;; Handle responses one-by-one, blocking as necessary\\r\\n        ;; Other keys \:headers \:body \:error \:opts\\r\\n        (parse-string res)\\r\\n        )" "(let [response (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=\\" artist))]\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (parse-string (\:body response))\\r\\n     )" "(let [response (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=avicii\\"))]\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (parse-string (\:body response))\\r\\n     )" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=avicii\\")))\\r\\n        ;; Handle responses one-by-one, blocking as necessary\\r\\n        ;; Other keys \:headers \:body \:error \:opts\\r\\n        (parse-string (\:body response))" "response" "2" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=\\" artist)))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n    ;; Other keys \:headers \:body \:error \:opts\\r\\n (def mapa  (parse-string (\:body response)))" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?performers.slug\=avicii\\")))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n    ;; Other keys \:headers \:body \:error \:opts\\r\\n (def mapa  (parse-string (\:body response)))" "mapa" "(def mapevents (zipmap (map keyword (keys mapa)) (vals mapa)))" "mapevents" "(def mapevents (zipmap (map keyword (keys (\:events mapa))) (vals (\:events mapa))))" "mapevents" "mapa" "(def mapevents (zipmap (map keyword (keys (\\"events\\" mapa))) (vals (\\"events\\" mapa))))" "(\\"events\\" mapa)" "(mapa  \\"events\\" )" "(def mapevents (zipmap (map keyword (keys (mapa \\"events\\"))) (vals (mapa \\"events\\"))))" "(keys (mapa \\"events\\"))" " (mapa \\"events\\")" "(\\"events\\" mapa)" "(def mapevents (zipmap (map keyword (keys (first (mapa \\"events\\")))) (vals (first (mapa \\"events\\")))))" "mapevents" "(def mapevents (zipmap (map keyword (keys ((mapa \\"events\\") 0))) (vals ((mapa \\"events\\") 0))))" "mapevents" "(def mapevents (zipmap (map keyword (keys (mapa \\"events\\"))) (vals (mapa \\"events\\"))))" "(keys (mapa \\"events\\"))" "(keys (\\"events\\" mapa))" "(keys ((mapa \\"events\\") 0))" "(keys ((mapa \\"events\\") 1))" "(keys ((mapa \\"events\\") 2))" "(vals ((mapa \\"events\\") 2))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "((let [response (client/get (str \\"http\://api.seatgeek.com/2/events?sort\=lowest_price.asc&performers.slug\=\\" artist))]\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (parse-string (\:body response))\\r\\n     ))" "((let [response (client/get (str \\"http\://api.seatgeek.com/2/events?sort\=lowest_price.asc&performers.slug\=avicii\\"))]\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (parse-string (\:body response))\\r\\n     ))" "(defrecord Ticket [price url])\\r\\n(defrecord Event [name performer place date Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])" "(->Ticket 123 www.ticket.com)" "(->Ticket [123 www.ticket.com])" "(->Ticket [123] [www.ticket.com])" "(->Ticket [123] [1])" "(defrecord Ticket price url)\\r\\n(defrecord Event [name performer place date Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])" "(defrecord Ticket [^Long price ^String url])\\r\\n(defrecord Event [name performer place date Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])" "(->Ticket 123 www.ticket.com)" "(->Ticket 123 \\"www.ticket.com\\")" "(defrecord Ticket [price url])\\r\\n   (defrecord Event [name performer place date Ticket])\\r\\n   (defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n   (defrecord Result [Event Flight total_price total_distance])" "(->Ticket 123 \\"www.ticket.com\\")" "(def df (java.text.SimpleDateFormat. \\"dd-MM-yyyy\\"))\\r\\n(def dat (.parse df (str date)))\\n(->Event [\\"exit\\" \\"avicii\\" \\"novi sad\\" dat (->Ticket [123 \\"www.ticket.com\\"])])" "(def df (java.text.SimpleDateFormat. \\"dd-MM-yyyy\\"))\\r\\n(def dat (.parse df))\\n\\n(->Event [\\"exit\\" \\"avicii\\" \\"novi sad\\" dat (->Ticket [123 \\"www.ticket.com\\"])])" "(def df (java.text.SimpleDateFormat. \\"dd-MM-yyyy\\"))\\r\\n(def dat (.parse df \\"23-01-1991\\"))\\n\\n(->Event [\\"exit\\" \\"avicii\\" \\"novi sad\\" dat (->Ticket [123 \\"www.ticket.com\\"])])" "dat" "(def df (java.text.SimpleDateFormat. \\"dd-MM-yyyy\\"))\\r\\n(def dat (.parse df \\"23-01-1991\\"))\\n(def tick (->Ticket [123 \\"www.ticket.com\\"]))\\n(->Event [\\"exit\\" \\"avicii\\" \\"novi sad\\" dat tick\\n          ])" "(->Ticket 123 \\"www.ticket.com\\")" "(def tick (->Ticket 123 \\"www.ticket.com\\"))" "(def df (java.text.SimpleDateFormat. \\"dd-MM-yyyy\\"))\\r\\n(def dat (.parse df \\"23-01-1991\\"))\\n(def tick (->Ticket [123 \\"www.ticket.com\\"]))\\n(->Event \\"exit\\" \\"avicii\\" \\"novi sad\\" dat tick\\n          )" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?sort\=lowest_price.asc&performers.slug\=\\" artist)))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (parse-string (\:body response))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?sort\=lowest_price.asc&performers.slug\=\\" artist)))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (parse-string (\:body response))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?sort\=lowest_price.asc&performers.slug\=\\" artist)))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (parse-string (\:body response))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )\\r\\n(defrecord Ticket [price url])\\r\\n(defrecord Event [name performer place date Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?sort\=lowest_price.asc&performers.slug\=\\" artist)))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (parse-string (\:body response))" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?sort\=lowest_price.asc&performers.slug\=avicii\\" )))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (parse-string (\:body response))" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n    ;; Other keys \:headers \:body \:error \:opts\\r\\n    (parse-string (\:body response))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n    ;; Other keys \:headers \:body \:error \:opts\\r\\n    (parse-string (\:body response))" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n    ;; Other keys \:headers \:body \:error \:opts\\r\\n   (def res (parse-string (\:body response)))" "res" "(\\"events\\" res)" "(res \\"events\\")" "( (parse-string (\:body response)) \\"events\\")" "(def events ( (parse-string (\:body response)) \\"events\\"))" "(count events)" "(defrecord Ticket [price url])\\r\\n(defrecord Event [name performer place date Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])\\n(def eventmap (atom{}))\\n(for [i (range (0 (count events)))] \\n  ( (swap\! eventmap assoc i (->Event ((nth events i) \\"title\\"))) i)\\n    )" "(defrecord Ticket [price url])\\r\\n(defrecord Event [name performer place date Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])\\n(def eventmap (atom{}))\\n(for [i (range (0 (count events)))] \\n  ( (swap\! eventmap assoc (i) (->Event ((nth events i) \\"title\\"))) i)\\n    )" "(->Event ((nth events i) \\"title\\"))" "(def eventmap (atom{}))\\r\\n   (for [i (range (0 (count events)))] \\r\\n     ( (->Event ((nth events i) \\"title\\")))\\r\\n       )" "(def eventmap (atom{}))\\r\\n   (for [i (range (0 (count events)))] \\r\\n     ( ((nth events i) \\"title\\")))" "(def eventmap (atom{}))\\r\\n   (for [i (range (0 (count events)))] \\r\\n      ((nth events i) \\"title\\"))" "(nth 1 events)" "(nth events 1)" "((nth 1 events) \\"title\\")" "((nth 1 events) \\"name\\")" "((nth 1 events) \\"score\\")" "(\\"score\\" (nth 1 events))" "(def el (nth events 1))" "el" "(el \\"score\\")" "((nth 1 events) \\"score\\")" "((nth events 1) \\"score\\")" "((nth events 1) \\"title\\")" " (for [i (range (0 (count events)))] \\r\\n        ( ((nth events i) \\"title\\")))" " (for [i (range (0 (count events)))] \\r\\n         ((nth events i) \\"title\\"))" " (for [i (range 0 (count events))] \\r\\n         ((nth events i) \\"title\\"))" "(def eventmap (atom{}))\\r\\n   (for [i (range 0 (count events))] \\r\\n     ( (->Event ((nth events i) \\"title\\")))\\r\\n       )" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )\\r\\n(defrecord Ticket [price url])\\r\\n(defrecord Event [name performer place date Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (def events (parse-string (\:body response)))" "events" "(def response (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))\\r\\n     ;; Handle responses one-by-one, blocking as necessary\\r\\n     ;; Other keys \:headers \:body \:error \:opts\\r\\n     (def events ((parse-string (\:body response)) \\"events\\"))" "events" "(for [i (range 0 (count events))] \\r\\n     (let [el (nth events i)]\\r\\n       (->Event (el \\"title\\") (el \\"performers\\") (el \\"venue\\") (el \\"stats\\")))\\r\\n       )" "(defrecord Ticket [price url])\\r\\n(defrecord Performer [name genre image_url])\\r\\n(defrecord Location [longitude latitude])\\r\\n(defrecord Place [name city country Location])\\r\\n(defrecord Event [name performer Place Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])" "(for [i (range 0 (count events))] \\r\\n     (let [el (nth events i)]\\r\\n       (->Event (el \\"title\\") (el \\"performers\\") (el \\"venue\\") (el \\"stats\\")))\\r\\n       )" "(def eventsmap (atom {}))" "(for [i (range 0 (count events))] \\r\\n     (let [el (nth events i)]\\r\\n      (def event (->Event (el \\"title\\") (el \\"performers\\") (el \\"venue\\") (el \\"stats\\")))\\n       (swap\! eventsmap assoc i event) i\\n      )\\r\\n       )" "eventsmap" "(\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))" "   (def events (parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=\\" artist)))))\\r\\n   (def eventmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n     (let [el (nth events i)]\\r\\n      (def event (->Event (el \\"title\\") (el \\"performers\\") (el \\"venue\\") (el \\"stats\\")))\\r\\n       (swap\! eventsmap assoc i event) i\\r\\n      )\\r\\n       )" "   (def events (parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))))\\r\\n   (def eventmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n     (let [el (nth events i)]\\r\\n      (def event (->Event (el \\"title\\") (el \\"performers\\") (el \\"venue\\") (el \\"stats\\")))\\r\\n       (swap\! eventsmap assoc i event) i\\r\\n      )\\r\\n       )" "(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avucuu\\")))) \\"events\\"))\\r\\n   (def eventmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n     (let [el (nth events i)]\\r\\n      (def event (->Event (el \\"title\\") (el \\"performers\\") (el \\"venue\\") (el \\"stats\\")))\\r\\n       (swap\! eventsmap assoc i event) i\\r\\n      )\\r\\n       )" "eventmap" "events" "(\\n def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))" "\\n(def eventmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n     (let [el (nth events i)]\\r\\n      (def event (->Event (el \\"title\\") (el \\"performers\\") (el \\"venue\\") (el \\"stats\\")))\\r\\n       (swap\! eventsmap assoc i event) i\\r\\n      )\\r\\n       )" "eventmap" "events" "\\n(def eventmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n     (let [el (nth events i)]\\r\\n      (def event (->Event (el \\"title\\") (el \\"performers\\") (el \\"venue\\") (el \\"stats\\")))\\r\\n       (swap\! eventsmap assoc i event) i\\r\\n      )\\r\\n       )" "eventmap" "@eventmap" "(def eventmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n     (let [el (nth events i)]\\r\\n      (def event (->Event (el \\"title\\") (el \\"performers\\") (el \\"venue\\") (el \\"stats\\")))\\r\\n       (swap\! eventsmap assoc i event) i\\r\\n      )\\r\\n       )" "eventmap" " (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n     (let [el (nth events i)]\\r\\n      (def event (->Event (el \\"title\\") (el \\"performers\\") (el \\"venue\\") (el \\"stats\\")))\\r\\n       (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n       )" "events" "(map \\"stats\\" events)" "(map events \\"title\\")" "(map \\"title \\"events)" "(map (\\"title\\" events) events)" "(def performers (events \\"perfomers\\"))" "(def performers (\\"perfomers\\" events))" "(def performers ((nth events 0) \\"performers\\"))" "performers" "(map \\"slug\\" (iterate inc 0) performers)" "(map key (iterate inc 0) performers)" "(performers 1)" "(performers 0)" "((performers 0) \\"slug\\")" "(map nth (iterate performers ))" " (take (count performers) (iterate inc 0))" "performers" "(map nth (take (count performers) (iterate inc 0)) performers)" "(map nth performers (take (count performers) (iterate inc 0)))" "( nth performers (take (count performers) (iterate inc 0)))" "(iterate nth performers)" "[0..10]" "[0 10]" "(range 10)" "(nth performers (range 10))" "(let [i (range 10)])" "(let [i (range 10)] i)" "(for [i (range 10) inc])" "(for [i (range (count performers))]\\n  (nth performers i))" "(for [i (range (count performers))]\\n  ((nth performers i) \\"image\\"))" "performers" " (def artists [])\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (conj artists (->Performer (per \\"image\\") (per \\"genre\\") (per \\"image\\"))))\\r\\n        )" "artists" "(def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"image\\") (per \\"genre\\") (per \\"image\\"))))\\r\\n        )" "artists" "(for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (per \\"genre\\") (per \\"image\\"))))\\r\\n        )" "(for [i (range (count performers))]\\n  ((nth performers i) \\"image\\"))" "(for [i (range (count performers))]\\n  ((nth performers i) \\"genres\\"))" "(for [i (range (count performers))]\\n  ((((nth performers i) \\"genres\\") 0) \\"name\\"))" " (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )" "(def a)" "a" "(def a (atom))" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def venue (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"contry\\") (->Location (vals ((el \\"venue\\") \\"location\\")))))\\r\\n      (def event (->Event (el \\"title\\") artists (el \\"venue\\") (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "(def event (first events))" "event" "((event \\"venue\\") \\"location\\")" " ( vals (event \\"venue\\") \\"location\\")" " (vals ((event \\"venue\\") \\"location\\"))" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )\\r\\n(defrecord Ticket [price url])\\r\\n(defrecord Performer [name genre image_url])\\r\\n(defrecord Place [name city country location])\\r\\n(defrecord Event [name performer Place Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def venue (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"contry\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") artists (el \\"venue\\") (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "(clojure.pprint eventsmap)" "(clojure.pprint @eventsmap)" "(require clojure.pprint)" "(use 'clojure.pprint)" "(write eventsmap)" "(write @eventsmap)" "(use 'clojure.pprint \:as fja)" "(use 'clojure.pprint)" " \\n (def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def venue (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"contry\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") artists venue (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"contry\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") artists ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "performers" "(def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )" "artists" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists [])\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (conj artists (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") artists ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "(def artists [])\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (conj artists (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )" "artists" "(def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (def artists (atom []))\\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      \\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") artists ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] (\\r\\n    (def artists (atom []))\\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      \\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") artists ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    ))" "event" "events" "(let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom [])))" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom [])))" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (performers))" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      performers)" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      venue)" "(let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        ))" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        ))" "artists" "(reset\! artists [])" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        ))" "artists" "(for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") artists ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" " (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def art (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n        (swap\! art conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") art ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") @artists @ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") @artists ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        ))" "artists" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") @artists ven (el \\"stats\\"))))" "artists" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        ) artists)" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))\\n          artists)\\r\\n        ) artists)" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))\\n          ) artists\\r\\n        ) artists)" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))\\n          ) \\r\\n        ) artists)" "(let [el (nth events 0), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))\\n          )         ) )" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), per (nth performers j), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))        \\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") @artists ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" " (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )" "artists" "(for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )))" "artists" "(for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\"))))\\r\\n        )artists))" "(def artists [])\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (conj artists (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )" "a" "  \\n  (def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists [])\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (conj artists (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") a ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def event (->Event (el \\"title\\") a ven (el \\"stats\\")))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "eventsmap" "\\n(def events ((parse-string (\:body (client/get (str \\"http\://api.seatgeek.com/2/events?per_page\=5&page\=1&sort\=lowest_price.asc&performers.slug\=avicii\\")))) \\"events\\"))\\r\\n  (def eventsmap (atom{}))\\r\\n  (for [i (range 0 (count events))] \\r\\n    (let [el (nth events i), performers (el \\"performers\\"), venue (el \\"venue\\")]\\r\\n      (def artists (atom []))\\r\\n      (for [j (range (count performers))] \\r\\n        (let [per (nth performers j)]\\r\\n          (def a (swap\! artists conj (->Performer (per \\"name\\") (((per \\"genres\\") 0) \\"name\\") (per \\"image\\")))))\\r\\n        )\\r\\n      (def ven (->Place ((el \\"venue\\") \\"name\\") ((el \\"venue\\") \\"city\\") ((el \\"venue\\") \\"country\\") (vals ((el \\"venue\\") \\"location\\"))))\\r\\n      (def tick (->Ticket ((el \\"stats\\") \\"lowest_price\\") (el \\"url\\") ))\\r\\n      (def event (->Event (el \\"title\\") a ven tick))\\r\\n      (swap\! eventsmap assoc i event) \\r\\n      )\\r\\n    )" "eventsmap" "(ns concertescape.core\\r\\n  (use (compojure handler [core \:only (GET POST defroutes)]))\\r\\n  (require [compojure.route])\\r\\n  (require [net.cgrand.enlive-html \:as en])\\r\\n  (require [org.httpkit.server \:as httpserver])   \\r\\n  (require [clj-http.client \:as client])\\r\\n  (require [cheshire.core \:refer \:all])\\r\\n  (require [clojure.data.csv \:as csv])\\r\\n  (require [clojure.java.io \:as io])\\r\\n  )" "(defrecord Ticket [price url])\\r\\n(defrecord Performer [name genre image_url])\\r\\n(defrecord Place [name city country location])\\r\\n(defrecord Event [name performer Place Ticket])\\r\\n(defrecord Flight [origin destination carrier departure_date arrival_date price url])\\r\\n(defrecord Result [Event Flight total_price total_distance])"]
eclipse.preferences.version=1
